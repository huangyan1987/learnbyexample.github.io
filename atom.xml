<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>learnbyexample</title>
	<subtitle>Doing is often better than thinking of doing</subtitle>
	<link href="https://learnbyexample.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://learnbyexample.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-01-25T00:00:00+00:00</updated>
	<id>https://learnbyexample.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Python tip 5: random choice and sample</title>
		<published>2022-01-25T00:00:00+00:00</published>
		<updated>2022-01-25T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/python-tip-5/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-5/</id>
		<content type="html">&lt;p&gt;Here are a couple of commonly used methods for the built-in &lt;code&gt;random&lt;&#x2F;code&gt; module:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choice()&lt;&#x2F;code&gt; method helps you get a random element&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sample()&lt;&#x2F;code&gt; method helps you get a &lt;code&gt;list&lt;&#x2F;code&gt; of a specific count of random elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;random
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(nums)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(nums, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;490&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;745&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;919&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Both these methods will work on any sequence object. The &lt;code&gt;sample()&lt;&#x2F;code&gt; method also accepts a &lt;code&gt;set&lt;&#x2F;code&gt; object, but that will be deprecated.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Brag post: Hacker News Front Page entries</title>
		<published>2022-01-21T00:00:00+00:00</published>
		<updated>2022-01-21T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/hacker-news-front-page-brag/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/hacker-news-front-page-brag/</id>
		<content type="html">&lt;p&gt;In case you haven&#x27;t yet read this nice post &lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;brag-documents&#x2F;&quot;&gt;&amp;quot;Get your work recognized: write a brag document&amp;quot;&lt;&#x2F;a&gt; by Julia Evans, please do that first.&lt;&#x2F;p&gt;
&lt;p&gt;I definitely found it nice to collect which of my content have reached Hacker News front page over the past 4 years. As I wrote in &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;&quot;&gt;my book writing experience post&lt;&#x2F;a&gt;, the responses I got for my GNU awk one-liners collection was one of the stepping stones towards my career as a technical author.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the list so far, ordered by oldest first:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=15549318&quot;&gt;Learn to use Awk with hundreds of examples&lt;&#x2F;a&gt; — &lt;em&gt;478 points, Oct 2017, 116 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20212622&quot;&gt;Show HN: I wrote a book on GNU grep and ripgrep&lt;&#x2F;a&gt; — &lt;em&gt;182 points, June 2019, 53 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20645319&quot;&gt;Show HN: I wrote a book on Python regular expressions&lt;&#x2F;a&gt; — &lt;em&gt;193 points, Aug 2019, 50 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=22758217&quot;&gt;Show HN: An eBook with hundreds of GNU Awk one-liners&lt;&#x2F;a&gt; — &lt;em&gt;539 points, April 2020, 48 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24637797&quot;&gt;Show HN: Ruby One-Liners Cookbook&lt;&#x2F;a&gt; — &lt;em&gt;191 points, Sept 2020, 36 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25006829&quot;&gt;Perl One-Liners Cookbook&lt;&#x2F;a&gt; — &lt;em&gt;126 points, Nov 2020, 47 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26076721&quot;&gt;Show HN: &amp;quot;100 Page Python Intro&amp;quot; eBook&lt;&#x2F;a&gt; — &lt;em&gt;107 points, Feb 2021, 26 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26356095&quot;&gt;Paying my bills with &#x27;free&#x27; ebooks&lt;&#x2F;a&gt; — &lt;em&gt;85 points, Mar 2021, 22 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=28798095&quot;&gt;Show HN: &amp;quot;Command line text processing with GNU Coreutils&amp;quot; eBook&lt;&#x2F;a&gt; — &lt;em&gt;117 points, Oct 2021, 20 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29391107&quot;&gt;Show HN: Improve your Python regex skills with 75 interactive exercises&lt;&#x2F;a&gt; — &lt;em&gt;175 points, Nov 2021, 12 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29837543&quot;&gt;Vim prank: alias vim=&#x27;vim -y&#x27;&lt;&#x2F;a&gt; — &lt;em&gt;341 points, Jan 2022, 259 comments&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As is the case with other social media platforms, being an active participant on Hacker News definitely helps. Apart from commenting on other topics, I also post links to projects and resources that I felt were useful. The number of such links reaching front page outnumbers my own content links.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Removing duplicates irrespective of field order</title>
		<published>2022-01-19T00:00:00+00:00</published>
		<updated>2022-01-19T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/duplicates-irrespective-field-order/" type="text/html"/>
		<id>https://learnbyexample.github.io/duplicates-irrespective-field-order/</id>
		<content type="html">&lt;p&gt;I posted a coding challenge in the tenth issue of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;. I discuss the problem and various solutions in this blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;problem-statement&quot;&gt;Problem statement&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Retain only the first copy of duplicate lines irrespective of the order of the fields. Input order should be maintained. Assume space as the field separator with exactly two fields on each line. For example, &lt;code&gt;hehe haha&lt;&#x2F;code&gt; and &lt;code&gt;haha hehe&lt;&#x2F;code&gt; will be considered as duplicates.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat twos.txt
hehe haha
door floor
haha hehe
6;8 3-4
true blue
hehe bebe
floor door
3-4 6;8
tru eblue
haha hehe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Expected output for the above sample:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;hehe haha
door floor
6;8 3-4
true blue
hehe bebe
tru eblue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;python-solution&quot;&gt;Python solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-solution&quot; aria-label=&quot;Anchor link for: python-solution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s one possible solution for this problem:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;twos.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(filename) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;f:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;f:
        fields &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;()
        key1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]} {fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;key2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]} {fields[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(key1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;key2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;keys):
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(line, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
            keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(key1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main trick in the above solution is to check the input field order as well as the reversed order against elements in a set. A subtle point to note is that the &lt;code&gt;split()&lt;&#x2F;code&gt; string method also removes whitespaces from the start and end of the input line. If you had to use another field delimiter (for example, comma) you&#x27;ll have to remove the line ending before splitting the input.&lt;&#x2F;p&gt;
&lt;p&gt;And here&#x27;s a generic solution for any number of fields, which also makes the solution look simpler:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;twos.txt&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(filename) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;f:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;f:
        fields &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;()
        sorted_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(fields))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sorted_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;keys:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(line, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
            keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(sorted_key)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case you are wondering why space is used to join the field contents, it is necessary to avoid false matches. &lt;code&gt;tru eblue&lt;&#x2F;code&gt; shouldn&#x27;t be considered as a duplicate of &lt;code&gt;true blue&lt;&#x2F;code&gt; or &lt;code&gt;blue true&lt;&#x2F;code&gt;. Space is a safe character to use since it is the field separator.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook if you already know programming basics but new to Python.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;gnu-awk-one-liner&quot;&gt;GNU awk one-liner&lt;a class=&quot;zola-anchor&quot; href=&quot;#gnu-awk-one-liner&quot; aria-label=&quot;Anchor link for: gnu-awk-one-liner&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a solution for CLI enthusiasts:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!(($1,$2) in seen || ($2,$1) in seen); {seen[$1,$2]}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;twos.txt
hehe haha
door floor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;true blue
hehe bebe
tru eblue
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above solution is similar to the first Python solution with a notable difference. The fields are joined using &lt;code&gt;\034&lt;&#x2F;code&gt; (a non-printing character), which is usually not present in text files.&lt;&#x2F;p&gt;
&lt;p&gt;A solution using the field separator instead of &lt;code&gt;\034&lt;&#x2F;code&gt; would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;!(($1 FS $2) in seen || ($2 FS $1) in seen); {seen[$1 FS $2]}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;GNU awk&lt;&#x2F;a&gt; ebook if you are interested in such one-liners.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 3: auto complete words and lines in Insert mode</title>
		<published>2022-01-18T00:00:00+00:00</published>
		<updated>2022-01-18T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/vim-tip-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-3/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Auto complete word&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;p&lt;&#x2F;kbd&gt; auto complete word based on matching words in the backward direction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; auto complete word based on matching words in the forward direction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If more than one word matches, they are displayed using a popup menu. You can use &lt;kbd&gt;↑&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;↓&lt;&#x2F;kbd&gt; arrow keys or &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;p&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; to move through this list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Auto complete line&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;x&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;l&lt;&#x2F;kbd&gt; auto complete line based on matching lines in the backward direction&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If more than one line matches, they are displayed using a popup menu. You can use &lt;kbd&gt;↑&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;↓&lt;&#x2F;kbd&gt; arrow keys or &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;p&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;n&lt;&#x2F;kbd&gt; to move through this list. You can also use &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;l&lt;&#x2F;kbd&gt; to move up the list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Auto complete assist&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;e&lt;&#x2F;kbd&gt; cancels auto complete
&lt;ul&gt;
&lt;li&gt;you&#x27;ll retain the text you had typed before invoking auto complete&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;y&lt;&#x2F;kbd&gt; select the current item from the popup menu
&lt;ul&gt;
&lt;li&gt;you can also press the &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; key to choose the selection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;insert.txt.html#ins-completion&quot;&gt;:h ins-completion&lt;&#x2F;a&gt; for more details and other auto complete features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;Vim reference guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Regexp gotcha: 1</title>
		<published>2022-01-14T00:00:00+00:00</published>
		<updated>2022-01-14T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/regexp-gotcha-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/regexp-gotcha-1/</id>
		<content type="html">&lt;p&gt;Similar to &lt;code&gt;a(b+c)d = abd+acd&lt;&#x2F;code&gt; in maths, you get &lt;code&gt;a(b|c)d = abd|acd&lt;&#x2F;code&gt; in regular expressions. However, you&#x27;ll have to be careful if quantifiers are involved.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code&gt;(a*|b*)&lt;&#x2F;code&gt; isn&#x27;t the same as &lt;code&gt;(a|b)*&lt;&#x2F;code&gt;. Can you reason out why? Here&#x27;s a railroad diagram to help you out:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;mini&#x2F;regexp_gotcha_1.png&quot; alt=&quot;Regexp grouping with quantifiers gotcha&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Credit: &lt;a href=&quot;https:&#x2F;&#x2F;www.debuggex.com&#x2F;&quot;&gt;debuggex&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The difference is that &lt;code&gt;(a*|b*)&lt;&#x2F;code&gt; only matches same letter sequences like &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;bb&lt;&#x2F;code&gt;, &lt;code&gt;aaaaaa&lt;&#x2F;code&gt;, etc. But &lt;code&gt;(a|b)*&lt;&#x2F;code&gt; can match mixed sequences like &lt;code&gt;ababbba&lt;&#x2F;code&gt; too. You can also simplify &lt;code&gt;(a|b)*&lt;&#x2F;code&gt; to &lt;code&gt;[ab]*&lt;&#x2F;code&gt; since it is just single character alternation in this particular example.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an illustration using Python:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbaba&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aaabbb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bbbbb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fullmatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, s)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bbbbb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fullmatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, s)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbaba&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aaabbb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bbbbb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Want to learn regular expressions from the basics with plenty of examples and exercises? I&#x27;ve written &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&quot;&gt;regexp ebooks for Python, JavaScript, Ruby and CLI tools&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 4: serialize file contents to a single line</title>
		<published>2022-01-12T00:00:00+00:00</published>
		<updated>2022-01-12T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/cli-tip-4/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-4/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;-s&lt;&#x2F;code&gt; option is one of the useful, but lesser known feature of the &lt;code&gt;paste&lt;&#x2F;code&gt; command. It helps you to serialize input file contents to a single output line.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat colors.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue
White
Orange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;

$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sd, colors.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If multiple files are passed, serialization of each file is displayed on separate output lines.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;sd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5 9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3
5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The advantage of using &lt;code&gt;paste&lt;&#x2F;code&gt; instead of other options like &lt;code&gt;tr&lt;&#x2F;code&gt;, &lt;code&gt;awk&lt;&#x2F;code&gt;, etc is that you do not have to worry about trailing delimiters, newlines, etc. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# issue 1: trailing comma
# issue 2: no newline at the end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;colors.txt tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n&amp;#39; &amp;#39;,&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# correcting the above two issues
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;colors.txt tr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\n&amp;#39; &amp;#39;,&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;,$&#x2F;\n&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s an equivalent &lt;code&gt;awk&lt;&#x2F;code&gt; solution for single file input. While slower and complicated compared to the &lt;code&gt;paste&lt;&#x2F;code&gt; solution, you get more flexibility since &lt;code&gt;awk&lt;&#x2F;code&gt; is a programming language. For example, it is pretty easy to use multicharacter output delimiter.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR&amp;gt;1{print &amp;quot;,&amp;quot;} 1; END{print &amp;quot;\n&amp;quot;}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; colors.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;

$ awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;NR&amp;gt;1{print &amp;quot; : &amp;quot;} 1; END{print &amp;quot;\n&amp;quot;}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; colors.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;White &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Orange
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;paste.html&quot;&gt;paste command&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; ebook for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnuawk&quot;&gt;GNU awk one-liners&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;awk&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Automating Excel with Python - book review</title>
		<published>2022-01-11T00:00:00+00:00</published>
		<updated>2022-01-11T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/automating-excel-with-python-review/" type="text/html"/>
		<id>https://learnbyexample.github.io/automating-excel-with-python-review/</id>
		<content type="html">&lt;p&gt;In this post, I review &lt;strong&gt;Automating Excel with Python&lt;&#x2F;strong&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;&quot;&gt;Michael Driscoll&lt;&#x2F;a&gt;. From the introduction chapter of this book:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The purpose of this book is to help you learn how to use Python to work with Excel. You will be using a package called OpenPyXL to create, read, and edit Excel documents with Python. While the focus of this book will be on OpenPyXL, you will also learn about other Python packages that you can use to interact with Excel using the Python programming language.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;book-details&quot;&gt;Book details&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-details&quot; aria-label=&quot;Anchor link for: book-details&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;automating_excel&#x2F;automating_excel_with_python.jpg&quot; alt=&quot;Automating Excel with Python book cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Book cover&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;B09M5551W2&quot;&gt;Amazon&lt;&#x2F;a&gt; — Paperback, Kindle&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;driscollis.gumroad.com&#x2F;l&#x2F;openpyxl&quot;&gt;Gumroad&lt;&#x2F;a&gt; — PDF, EPUB, Mobi&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;openpyxl&quot;&gt;Leanpub&lt;&#x2F;a&gt; — PDF, EPUB, Mobi&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;driscollis&#x2F;automating_excel_with_python&quot;&gt;GitHub&lt;&#x2F;a&gt; — code examples and sample spreadsheets used in the book&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;59974445-automating-excel-with-python&quot;&gt;Goodreads&lt;&#x2F;a&gt; — book reviews&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;a class=&quot;zola-anchor&quot; href=&quot;#review&quot; aria-label=&quot;Anchor link for: review&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My very first job assignment (at a semiconductor company) required me to use spreadsheets for tabulating results of various experiments, adding charts, etc. I used to manually copy-paste the results generated from a Perl script. There were multiple sheets and my work was complicated enough to require multiple months of refinement, feature modifications, etc. Not sure if a library like OpenPyXL existed back then, but I think I should&#x27;ve at least asked&#x2F;searched ways to automate the spreadsheet process.&lt;&#x2F;p&gt;
&lt;p&gt;Going through this book felt like someone wrote a book just for that project, albeit 13 years late. Here&#x27;s a rough list of features that would&#x27;ve helped me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating &lt;code&gt;xlsx&lt;&#x2F;code&gt; files with multiple sheets&lt;&#x2F;li&gt;
&lt;li&gt;Adding data&lt;&#x2F;li&gt;
&lt;li&gt;Formatting cells based on a known equation&lt;&#x2F;li&gt;
&lt;li&gt;Creating charts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instructions and examples were clear and easy to follow. Snapshots were also shown for all the examples, so you can check if you&#x27;ve followed along as expected. While the book is best suited if you have MS Excel, most of the examples worked for me on LibreOffice Calc. Only the charts had major differences — some types weren&#x27;t supported and x&#x2F;y axis label&#x2F;data were problematic as shown below:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;automating_excel&#x2F;bar_chart_excel.png&quot; alt=&quot;Bar Chart in Excel&quot; width=&quot;600px&quot; height=&quot;400px&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Bar Chart in Excel (snapshot from the book)&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;automating_excel&#x2F;bar_chart_calc.png&quot; alt=&quot;Bar Chart in Calc&quot; width=&quot;600px&quot; height=&quot;400px&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Bar Chart in LibreOffice Calc (what I got on my machine)&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Apart from the &lt;code&gt;openpyxl&lt;&#x2F;code&gt; module, the author also briefly covered how you can use &lt;code&gt;pandas&lt;&#x2F;code&gt;, &lt;code&gt;xlsxwriter&lt;&#x2F;code&gt; and &lt;code&gt;gspread&lt;&#x2F;code&gt; (for working with Google sheets). Some features were presented at the end as Appendix chapters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 1 - Setting Up Your Machine&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 2 - Reading Spreadsheets with OpenPyXL&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 3 - Creating a Spreadsheet with OpenPyXL&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 4 - Styling Cells&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 5 - Conditional Formatting&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 6 - Creating Charts&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 7 - Chart Types&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 8 - Converting CSV to Excel&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 9 - Using Pandas with Excel&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 10 - Python and Google Sheets&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 11 - XlsxWriter&lt;&#x2F;li&gt;
&lt;li&gt;Appendix A - Cell Comments&lt;&#x2F;li&gt;
&lt;li&gt;Appendix B - Print Settings Basics&lt;&#x2F;li&gt;
&lt;li&gt;Appendix C - Formulas&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;feedback-and-reviews&quot;&gt;Feedback and Reviews&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-reviews&quot; aria-label=&quot;Anchor link for: feedback-and-reviews&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;All in all, I would highly recommend this book for those wanting to use Python for automating spreadsheets. I&#x27;d request you to post reviews after going through the book (they help us indie authors a lot). And please do contact the author to let him know your feedback or if you have any clarifications.&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim prank: alias vim=&#x27;vim -y&#x27;</title>
		<published>2022-01-07T00:00:00+00:00</published>
		<updated>2022-01-08T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/vim-prank/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/vim-prank/</id>
		<content type="html">&lt;p&gt;While going through &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#vim-arguments&quot;&gt;:h vim-arguments&lt;&#x2F;a&gt; for my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;Vim reference guide&lt;&#x2F;a&gt; ebook, I came across the &lt;code&gt;-y&lt;&#x2F;code&gt; option:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Easy mode. Implied for &lt;code&gt;evim&lt;&#x2F;code&gt; and &lt;code&gt;eview&lt;&#x2F;code&gt;. Starts with &lt;code&gt;&#x27;insertmode&#x27;&lt;&#x2F;code&gt; set and behaves like a click-and-type editor. This sources the script $VIMRUNTIME&#x2F;evim.vim. Mappings are set up to work like most click-and-type editors, see &lt;code&gt;evim-keys&lt;&#x2F;code&gt;. The GUI is started when available.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It was so weird to use. Copy and paste works with &lt;code&gt;Ctrl+c&lt;&#x2F;code&gt; and &lt;code&gt;Ctrl+v&lt;&#x2F;code&gt; respectively. Text can be selected with mouse and typing new text overwrites this selected portion. &lt;code&gt;Esc&lt;&#x2F;code&gt; key doesn&#x27;t work (gasp!), so I couldn&#x27;t quit until I used the window buttons. Later I tried and found that &lt;code&gt;Ctrl+o&lt;&#x2F;code&gt; works, which would then allow you to use &lt;code&gt;:q&lt;&#x2F;code&gt; as usual.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you want to prank a Vim user:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;vim -y&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; I didn&#x27;t expect such a good response on &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;vim&#x2F;comments&#x2F;rxedpj&#x2F;vim_prank_alias_vimvim_y&#x2F;&quot;&gt;&#x2F;r&#x2F;vim&#x2F;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1478976141650059264&quot;&gt;twitter&lt;&#x2F;a&gt; for this &amp;quot;easy&amp;quot; feature. So, decided to make a mini blog post as well. Also, I got to know a few more ways to escape this madness from the &#x2F;r&#x2F;vim&#x2F; sub:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;One hint: If you want to go to Normal mode to be able to type a sequence of commands, use &lt;code&gt;CTRL-L&lt;&#x2F;code&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#evim-keys&quot;&gt;https:&#x2F;&#x2F;vimhelp.org&#x2F;starting.txt.html#evim-keys&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Use &lt;code&gt;&amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&lt;&#x2F;code&gt; See &lt;code&gt;:h CTRL-\_CTRL-N&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, this post reached front page on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29837543&quot;&gt;Hacker News&lt;&#x2F;a&gt;! Plenty of interesting comments and got to know about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tombh&#x2F;novim-mode&quot;&gt;novim-mode&lt;&#x2F;a&gt; plugin (which aims to make Vim behave more like a &#x27;normal&#x27; editor).&lt;&#x2F;p&gt;
&lt;p&gt;I also found &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;vim&#x2F;comments&#x2F;5102o5&#x2F;an_evil_trick_to_prank_vimsters&#x2F;&quot;&gt;an old discussion on &#x2F;r&#x2F;vim&#x2F;&lt;&#x2F;a&gt; discussing ways to trick a Vim user.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 4: comparison chaining</title>
		<published>2022-01-04T00:00:00+00:00</published>
		<updated>2022-01-04T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/python-tip-4/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-4/</id>
		<content type="html">&lt;p&gt;You can chain comparison operators arbitrarily. Apart from terser code, this also has the advantage of having to evaluate the middle expression only once.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;factorial

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# factorial function gets called twice for this example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
True

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# function needs to be called only once here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10
True

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# another example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cater&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2021 was a wild ride</title>
		<published>2021-12-30T00:00:00+00:00</published>
		<updated>2021-12-30T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/wild-ride-2021/" type="text/html"/>
		<id>https://learnbyexample.github.io/wild-ride-2021/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: Started and ended the year well, with a depressing period in the middle. Published three programming ebooks, several blog posts, started a newsletter, improved Twitter readership, read 80+ novels, and so on. Had a good year in terms of ebook sales 😇&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;books-published&quot;&gt;Books published&lt;a class=&quot;zola-anchor&quot; href=&quot;#books-published&quot; aria-label=&quot;Anchor link for: books-published&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; — short, introductory guide for the Python programming language. Started writing last year, published in February&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — five beginner to intermediate level projects inspired by real world use cases. Started writing last year (before &amp;quot;100 Page Python Intro&amp;quot;!), published in July&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;Command line text processing with GNU Coreutils&lt;&#x2F;a&gt; — learn 20+ specialized text processing tools provided by the GNU coreutils package. Published in October&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also spent time updating all my existing books from February to May.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;2021_books.png&quot; alt=&quot;Programming books published in 2021&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;workshops&quot;&gt;Workshops&lt;a class=&quot;zola-anchor&quot; href=&quot;#workshops&quot; aria-label=&quot;Anchor link for: workshops&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First and only workshop I conducted since the start of pandemic in 2020. And this was possible only because it was online. The topic was Python scripting introduction for Biotech students. Publishing &amp;quot;100 Page Python Intro&amp;quot; was timely for this workshop.&lt;&#x2F;p&gt;
&lt;p&gt;This took up most of my time during March&#x2F;April along with updating existing books.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;blog-posts&quot;&gt;Blog posts&lt;a class=&quot;zola-anchor&quot; href=&quot;#blog-posts&quot; aria-label=&quot;Anchor link for: blog-posts&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been consistently writing books for the past three years, but I find it difficult to come up with ideas for my programming blog. This is partly due to not wanting to repeat content from my books. Here&#x27;s my favorite posts I wrote this year:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;my-book-writing-experience&#x2F;&quot;&gt;Paying my bills with &#x27;free&#x27; ebooks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;gnu-bre-ere-cheatsheet&#x2F;&quot;&gt;GNU BRE&#x2F;ERE cheatsheet and differences between grep, sed and awk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escaping-madness-awk-literal-field-separator&#x2F;&quot;&gt;Escaping madness to get literal field separators in awk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-1&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 1&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-2&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I tried to be more consistent by posting short articles (see &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;&quot;&gt;mini posts list&lt;&#x2F;a&gt;), but lost interest. Starting a newsletter in November helped change my perspective about re-using content from my books. I&#x27;ve started posting tips and coding challenges that are short and easy to digest:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;tips&#x2F;&quot;&gt;Programming tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;numeric-palindrome&#x2F;&quot;&gt;Numeric Palindrome&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;counting-nested-braces&#x2F;&quot;&gt;Counting nested braces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I was more consistent for my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escapist-reviews&#x2F;&quot;&gt;Escapist Reviews&lt;&#x2F;a&gt; blog that I started late last year to review novels I read.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;book-sales&quot;&gt;Book sales&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-sales&quot; aria-label=&quot;Anchor link for: book-sales&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Had better sales compared to last year, which I really wasn&#x27;t expecting. Especially when the average monthly sales was around $100 between May to September (my monthly expenses is around $150). This coincided with some health issues and the struggle to finish writing the &amp;quot;Practice Python Projects&amp;quot; book.&lt;&#x2F;p&gt;
&lt;p&gt;This led me to reading articles about better landing pages, building audience on social media, affiliates, etc. I still have a long way to go, but I feel these active efforts led to much improved sales in the last quarter of the year. I ended up deciding not to use affiliates though.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s my sales chart from Gumroad for this year (I had similar revenue from Leanpub):&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;gumroad_sales_2021.png&quot; alt=&quot;Gumroad sales in 2021&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There were plenty of reasons that led to the awesome last quarter sales. Here&#x27;s some significant events I remember:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Joined hands with fellow Python authors for &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;indie-python-extravaganza&#x2F;&quot;&gt;The Indie Python Extravaganza&lt;&#x2F;a&gt; bundle (given away freely for a month)
&lt;ul&gt;
&lt;li&gt;A Twitter discussion led to the giveaway idea, which resulted in creating this bundle&lt;&#x2F;li&gt;
&lt;li&gt;Combined marketing efforts by all four of us gave significant paid sales too&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Published &amp;quot;Command line text processing with GNU Coreutils&amp;quot;
&lt;ul&gt;
&lt;li&gt;In addition to my usual practice of making a new book free, this time I offered &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&quot;&gt;All books bundle&lt;&#x2F;a&gt; for $5 and a lot of users bought it&lt;&#x2F;li&gt;
&lt;li&gt;Announcing the book on Reddit and Hacker News was well received&lt;&#x2F;li&gt;
&lt;li&gt;I was beginning to improve my Twitter audience around that time, which helped a bit&lt;&#x2F;li&gt;
&lt;li&gt;Got featured in Leanpub&#x27;s monthly sales newsletter&lt;&#x2F;li&gt;
&lt;li&gt;Jesse Smith on &lt;a href=&quot;https:&#x2F;&#x2F;distrowatch.com&#x2F;weekly.php?issue=20211206#book&quot;&gt;distrowatch.com&lt;&#x2F;a&gt; wrote a lovely book review, which resulted in significant sales in December&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Getting featured on &lt;a href=&quot;https:&#x2F;&#x2F;rubyweekly.com&#x2F;issues&#x2F;574&quot;&gt;Ruby weekly&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;programming-deals&#x2F;&quot;&gt;Programming deals&lt;&#x2F;a&gt; for the last week of November
&lt;ul&gt;
&lt;li&gt;Helped a lot by commenting on Hacker News and getting featured in blog posts of fellow Python authors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;python-25-days-of-regex&#x2F;&quot;&gt;Interactive GUI app for Python regex&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;As part of 50 days of break from book writing, I worked on this Python app&lt;&#x2F;li&gt;
&lt;li&gt;Made it to the front page of Hacker News yet again&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;The Indie Python Extravaganza&amp;quot; bundle and some of my other books were featured in Leanpub&#x27;s Boxing day sales&lt;&#x2F;li&gt;
&lt;li&gt;And I believe creating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&quot;&gt;GitHub Readme&lt;&#x2F;a&gt; helped as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The biggest takeaway for me was to actively look for opportunities (small or big) instead of just relying on &lt;em&gt;free&lt;&#x2F;em&gt; offering during book launch (which is about once in four months).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;newsletter&quot;&gt;Newsletter&lt;a class=&quot;zola-anchor&quot; href=&quot;#newsletter&quot; aria-label=&quot;Anchor link for: newsletter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;During the 50 days break, the other significant project I started was &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter. This is still in early stages to point out any impact it will have on my book sales, but it certainly has been a pleasure so far to email an issue every Friday.&lt;&#x2F;p&gt;
&lt;p&gt;And as mentioned earlier, this led me to write programming blog posts consistently (tips and coding challenges).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;building-twitter-audience&quot;&gt;Building Twitter audience&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-twitter-audience&quot; aria-label=&quot;Anchor link for: building-twitter-audience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I joined Twitter in 2015. My follower count was less than 400 in July. In December, I crossed 1100. This is far from being impressive (I know a few authors who added more than 15000 followers during that time period).&lt;&#x2F;p&gt;
&lt;p&gt;Being active on Twitter led me to awesome opportunities mentioned earlier in the Book sales section. The best tips I can give is to tweet consistently, interact with your readers and don&#x27;t be afraid to participate in conversations initiated by top users. Oh, and reading articles&#x2F;books about social media audience building would help too.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Follow me on Twitter&lt;&#x2F;a&gt; for interesting tech nuggets 😉&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;fictional-reading&quot;&gt;Fictional reading&lt;a class=&quot;zola-anchor&quot; href=&quot;#fictional-reading&quot; aria-label=&quot;Anchor link for: fictional-reading&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I enjoy reading fantasy and science-fiction novels. I read 80+ SFF books this year and recently wrote a post listing &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;escapist-reviews&#x2F;lists&#x2F;2021-favorite-sff-novels&#x2F;&quot;&gt;my top 10 favorites&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also got a chance to beta read &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;57289544-the-siege-of-skyhold&quot;&gt;The Siege of Skyhold&lt;&#x2F;a&gt; and an ARC of &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;58656291-bastion&quot;&gt;Bastion&lt;&#x2F;a&gt;. I find these a good way to give back to the writing community, having myself received plenty of support from strangers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;goals-for-2022&quot;&gt;Goals for 2022&lt;a class=&quot;zola-anchor&quot; href=&quot;#goals-for-2022&quot; aria-label=&quot;Anchor link for: goals-for-2022&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Foremost goal is to continue taking care of physical&#x2F;mental health. And I&#x27;d be more than happy if I manage yet another year with $250+ average monthly income.&lt;&#x2F;p&gt;
&lt;p&gt;Books:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m currently working on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;Vim Reference Guide&lt;&#x2F;a&gt; ebook. Likely to publish in the first quarter&lt;&#x2F;li&gt;
&lt;li&gt;I started working on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_rust&#x2F;&quot;&gt;Command line text processing with Rust tools&lt;&#x2F;a&gt; ebook even before &amp;quot;Command line text processing with GNU Coreutils&amp;quot;, hope to publish in 2022&lt;&#x2F;li&gt;
&lt;li&gt;Have several more book topics in mind, but not sure if I&#x27;ll start working on any of them. And it is possible that I&#x27;ll come up with something else I fancy and work on it instead of already planned topics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Projects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Interactive apps for exercises from other books, similar to the one I did for Python regex&lt;&#x2F;li&gt;
&lt;li&gt;Games for fun&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Miscellaneous:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Continue to build an audience via Twitter, Newsletter, etc&lt;&#x2F;li&gt;
&lt;li&gt;Contribute to other open source projects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Here&#x27;s wishing you a very happy, healthy and prosperous 2022 👍 😇&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 2: indent&#x2F;unindent lines</title>
		<published>2021-12-29T00:00:00+00:00</published>
		<updated>2021-12-29T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/vim-tip-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-2/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Normal mode&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3&amp;gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the current line and two lines below (same as &lt;kbd&gt;2&amp;gt;j&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;k&lt;&#x2F;kbd&gt; indent the current line and the line above (same as &lt;kbd&gt;1&amp;gt;k&lt;&#x2F;kbd&gt; or &lt;kbd&gt;&amp;gt;1k&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;&amp;lt;&lt;&#x2F;kbd&gt; unindent the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;5&amp;lt;&amp;lt;&lt;&#x2F;kbd&gt; unindent the current line and four lines below (same as &lt;kbd&gt;4&amp;lt;j&lt;&#x2F;kbd&gt; or &lt;kbd&gt;&amp;lt;4j&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;2&amp;lt;k&lt;&#x2F;kbd&gt; unindent the current line and two lines above (same as &lt;kbd&gt;&amp;lt;2k&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;=&lt;&#x2F;kbd&gt; auto indent code, use motion commands to indicate the portion to be indented
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;=4j&lt;&#x2F;kbd&gt; auto indents the current line and four lines below&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;=ip&lt;&#x2F;kbd&gt; auto indents the current paragraph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; You can use any motion command with &lt;kbd&gt;&amp;gt;&lt;&#x2F;kbd&gt; and &lt;kbd&gt;&amp;lt;&lt;&#x2F;kbd&gt;. For example, &lt;kbd&gt;&amp;gt;}&lt;&#x2F;kbd&gt; indents till the end of the paragraph.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Visual mode&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;&#x2F;kbd&gt; indent the visually selected lines once&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;3&amp;gt;&lt;&#x2F;kbd&gt; indent the visually selected lines three times&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;&lt;&#x2F;kbd&gt; unindent the visually selected lines once&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;=&lt;&#x2F;kbd&gt; auto indent code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Consider the following unindented code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;i; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
{
statements
}
statements
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the result after applying &lt;kbd&gt;vip=&lt;&#x2F;kbd&gt; (you can also use &lt;kbd&gt;=ip&lt;&#x2F;kbd&gt; if you prefer Normal mode).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;i; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
    {
        statements
    }
    statements
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Indentation depends on the &lt;code&gt;shiftwidth&lt;&#x2F;code&gt; setting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#shift-left-right&quot;&gt;:h shift-left-right&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#%3D&quot;&gt;:h =&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27shiftwidth%27&quot;&gt;:h &#x27;shiftwidth&#x27;&lt;&#x2F;a&gt; for documentation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;Vim reference guide&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 3: place backups in another directory with GNU sed</title>
		<published>2021-12-21T00:00:00+00:00</published>
		<updated>2021-12-21T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/cli-tip-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-3/</id>
		<content type="html">&lt;p&gt;You can use &lt;code&gt;*&lt;&#x2F;code&gt; to place backups of original files in another directory when using the &lt;code&gt;-i&lt;&#x2F;code&gt; option with &lt;code&gt;GNU sed&lt;&#x2F;code&gt;. Consider these two sample input files in the current directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat f1.txt
good morning
that was good, just too good!
$ cat f2.txt 
goodie goodbye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create a &lt;code&gt;backups&lt;&#x2F;code&gt; directory and use &lt;code&gt;*&lt;&#x2F;code&gt; under this directory as a placeholder for the filenames passed to the &lt;code&gt;sed&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ mkdir backups
$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;backups&#x2F;*&amp;#39; &amp;#39;s&#x2F;good&#x2F;nice&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f1.txt f2.txt
$ ls backups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
f1.txt  f2.txt

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# modified content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat f1.txt
nice morning
that was nice, just too good!
$ cat f2.txt
niceie goodbye

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# backed-up original content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat backups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;f1.txt 
good morning
that was good, just too good!
$ cat backups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;f2.txt
goodie goodbye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since &lt;code&gt;*&lt;&#x2F;code&gt; expands to the name of the input files, you can also use this feature when you need to add a prefix for the backups.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bkp.*&amp;#39; &amp;#39;s&#x2F;green&#x2F;yellow&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; colors.txt

$ ls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;colors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
bkp.colors.txt  colors.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnused&quot;&gt;GNU SED&lt;&#x2F;a&gt; ebook if you are interested in learning about the &lt;code&gt;GNU sed&lt;&#x2F;code&gt; command in more detail.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; The &lt;code&gt;*&lt;&#x2F;code&gt; trick works with Perl as well, see &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;in-place-file-editing.html&quot;&gt;In-place file editing&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl one-liners&lt;&#x2F;a&gt; ebook for examples.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Counting nested braces</title>
		<published>2021-12-15T00:00:00+00:00</published>
		<updated>2021-12-15T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/counting-nested-braces/" type="text/html"/>
		<id>https://learnbyexample.github.io/counting-nested-braces/</id>
		<content type="html">&lt;p&gt;I posted a coding challenge in the fifth issue of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;. I discuss the problem and Python&#x2F;Perl solutions in this blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;problem-statement&quot;&gt;Problem statement&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Write a function that returns the maximum nested depth of curly braces for a given string input. For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;a*{b+c}&#x27;&lt;&#x2F;code&gt; should return &lt;code&gt;1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x27;{{a+2}*{{b+{c*d}}+e*d}}&#x27;&lt;&#x2F;code&gt; should return &lt;code&gt;4&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;unbalanced or wrongly ordered braces like &lt;code&gt;&#x27;{{a}*b&#x27;&lt;&#x2F;code&gt; and &lt;code&gt;&#x27;}a+b{&#x27;&lt;&#x2F;code&gt; should return &lt;code&gt;-1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;python-solution&quot;&gt;Python solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-solution&quot; aria-label=&quot;Anchor link for: python-solution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s one possible solution for this problem:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;max_nested_braces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;):
    max_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;expr:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;:
            count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;max_count:
                max_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;:
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;max_count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; In case you have trouble understanding the above code, you can use &lt;a href=&quot;https:&#x2F;&#x2F;www.pythontutor.com&#x2F;visualize.html#mode=edit&quot;&gt;pythontutor&lt;&#x2F;a&gt; to visualize the code execution step-by-step.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here&#x27;s an alternate solution using regular expressions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;max_nested_braces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;):
    count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;:
        expr, no_of_subs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;subn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, expr)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;no_of_subs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;break
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, expr):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if you are a fan of assignment expressions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;max_nested_braces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;):
    count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;subn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\{[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, expr)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;op[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]:
        expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;op[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
        count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[{}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, expr):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; I verified these solutions using &lt;code&gt;assert&lt;&#x2F;code&gt; statements. See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;testing.html&quot;&gt;Testing&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for more details.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;working-with-matched-portions.html#resubn&quot;&gt;Working with matched portions&lt;&#x2F;a&gt; chapter from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt; ebook for more details about the &lt;code&gt;re.subn()&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;perl-one-liner&quot;&gt;Perl one-liner&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl-one-liner&quot; aria-label=&quot;Anchor link for: perl-one-liner&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a solution for CLI enthusiasts:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat ip.txt 
{a+2}*{b+c}
{{a+2}*{{b+{c*d}}+e*d}}
a*b{
{{a+2}*{{b}+{c*d}}+e*d}}

$ perl -lne &amp;#39;$c=0; $c++ while(s&#x2F;\{[^{}]*\}&#x2F;&#x2F;g);
             print &#x2F;[{}]&#x2F; ? -1 : $c&amp;#39; ip.txt
1
4
-1
-1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl one-liners&lt;&#x2F;a&gt; ebook if you are interested in learning to use Perl from the command-line.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; If you are interested in &lt;code&gt;awk&lt;&#x2F;code&gt; and &lt;code&gt;bash&lt;&#x2F;code&gt; solutions, see &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;q&#x2F;680920&#x2F;109046&quot;&gt;this unix.stackexchange thread&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 3: expression and result with f-string</title>
		<published>2021-12-14T00:00:00+00:00</published>
		<updated>2021-12-14T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/python-tip-3/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-3/</id>
		<content type="html">&lt;p&gt;In case you haven&#x27;t yet discovered this awesome &lt;strong&gt;f-string&lt;&#x2F;strong&gt; feature, you can add &lt;code&gt;=&lt;&#x2F;code&gt; after an expression to get both the expression and the result in the output.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;7

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;num2 = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&amp;#39;num1 + num2 = 49&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(num2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&amp;#39;num1 + (num2 * 10) = 112&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use it often to quickly test a function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(n):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) = }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;isodd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;string.html#formatstrings&quot;&gt;docs.python: Format String Syntax&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;lexical_analysis.html#formatted-string-literals&quot;&gt;docs.python: Formatted string literals&lt;&#x2F;a&gt; for documentation and examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;100 Page Python Intro&lt;&#x2F;a&gt; ebook for a short, introductory guide for the Python programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vim tip 1: increment&#x2F;decrement numbers</title>
		<published>2021-12-08T00:00:00+00:00</published>
		<updated>2021-12-08T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/vim-tip-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/vim-tip-1/</id>
		<content type="html">&lt;p&gt;Did you know that you can easily increment or decrement a number in Vim?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;a&lt;&#x2F;kbd&gt; will increment the number under the cursor or the first occurrence of a number to the right of the cursor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;x&lt;&#x2F;kbd&gt; will decrement the number under the cursor or the first occurrence of a number to the right of the cursor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also provide a count prefix:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;3&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;a&lt;&#x2F;kbd&gt; will add &lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;1000&lt;&#x2F;kbd&gt; followed by &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;x&lt;&#x2F;kbd&gt; will subtract &lt;code&gt;1000&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Numbers prefixed with &lt;code&gt;0&lt;&#x2F;code&gt;, &lt;code&gt;0x&lt;&#x2F;code&gt; and &lt;code&gt;0b&lt;&#x2F;code&gt; will be treated as octal, hexadecimal and binary respectively. You can also use uppercase for &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt;. What if you want numbers prefixed with &lt;code&gt;0&lt;&#x2F;code&gt; to be treated as decimal? You can use the &lt;code&gt;nrformats&lt;&#x2F;code&gt; setting as shown below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; nrformats-=octal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decimal numbers prefixed with &lt;code&gt;-&lt;&#x2F;code&gt; will be treated as negative numbers. For example, using &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;a&lt;&#x2F;kbd&gt; on &lt;code&gt;-100&lt;&#x2F;code&gt; will give you &lt;code&gt;-99&lt;&#x2F;code&gt;. While this is handy, this trips me up often when dealing with date formats like 2021-12-08.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#CTRL-A&quot;&gt;:h ctrl-a&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;change.txt.html#CTRL-X&quot;&gt;:h ctrl-x&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vimhelp.org&#x2F;options.txt.html#%27nrformats%27&quot;&gt;:h nrformats&lt;&#x2F;a&gt; for documentation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See also my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;curated_resources&#x2F;vim.html&quot;&gt;curated list of resources for Vim&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;vim_reference&#x2F;&quot;&gt;Vim reference guide&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Improve your Python regex skills with 75 interactive exercises</title>
		<published>2021-12-01T00:00:00+00:00</published>
		<updated>2021-12-01T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/python-25-days-of-regex/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-25-days-of-regex/</id>
		<content type="html">&lt;p&gt;Still confused about Python regular expressions? Grow your confidence with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt; ebook (FREE this month!) and an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;tree&#x2F;master&#x2F;interactive_exercises&quot;&gt;interactive GUI app&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Inspired by &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;&quot;&gt;Advent of Code&lt;&#x2F;a&gt;, I&#x27;ll also be posting &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1465998844898918403&quot;&gt;3 challenges per day on twitter&lt;&#x2F;a&gt; for 25 days.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;free-ebook&quot;&gt;Free ebook&lt;a class=&quot;zola-anchor&quot; href=&quot;#free-ebook&quot; aria-label=&quot;Anchor link for: free-ebook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;My post about the interactive GUI app made it to the &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29391107&quot;&gt;Hacker News front page&lt;&#x2F;a&gt;. To celebrate, you can get PDF&#x2F;EPUB versions of my &lt;strong&gt;Python re(gex)?&lt;&#x2F;strong&gt; ebook for free using either of the below links. The offer is valid till 31-Dec-2021.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&quot;&gt;Leanpub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Or, you can use the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;web version&lt;&#x2F;a&gt; if you prefer reading the book online.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;interactive-gui-app&quot;&gt;Interactive GUI app&lt;a class=&quot;zola-anchor&quot; href=&quot;#interactive-gui-app&quot; aria-label=&quot;Anchor link for: interactive-gui-app&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Based on the &lt;strong&gt;Python re(gex)?&lt;&#x2F;strong&gt; book contents as well as the exercises, I made an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&#x2F;tree&#x2F;master&#x2F;interactive_exercises&quot;&gt;interactive GUI app&lt;&#x2F;a&gt; with 75 questions on &lt;code&gt;re.search&lt;&#x2F;code&gt;, &lt;code&gt;re.sub&lt;&#x2F;code&gt;, &lt;code&gt;re.split&lt;&#x2F;code&gt; and &lt;code&gt;re.findall&lt;&#x2F;code&gt; that&#x27;ll test your understanding of anchors, alternation, grouping, escaping metacharacters, dot metacharacter, quantifiers, character class, grouping, lookarounds, flags, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s some screenshots:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;search.png&quot; alt=&quot;Python exercise example for re.search&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;sub.png&quot; alt=&quot;Python exercise example for re.sub&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;split.png&quot; alt=&quot;Python exercise example for re.split&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_exercises&#x2F;findall.png&quot; alt=&quot;Python exercise example for re.findall&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;25-days-of-regex&quot;&gt;25 Days Of Regex&lt;a class=&quot;zola-anchor&quot; href=&quot;#25-days-of-regex&quot; aria-label=&quot;Anchor link for: 25-days-of-regex&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If 75 exercises seem daunting to you, consider doing 3 exercises per day. Allocate some time everyday to read the book and complete 3 challenges.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d also be posting &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1465998844898918403&quot;&gt;3 challenges per day on twitter&lt;&#x2F;a&gt;, where you&#x27;ll be able to get help from me and fellow programmers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 2: counting number of matches</title>
		<published>2021-11-30T00:00:00+00:00</published>
		<updated>2021-11-30T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/cli-tip-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-2/</id>
		<content type="html">&lt;p&gt;Use &lt;code&gt;grep -c&lt;&#x2F;code&gt; to count the number of input &lt;em&gt;lines&lt;&#x2F;em&gt; containing a given pattern.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# number of input lines containing &amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grep -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# number of input lines containing all the vowels
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -icP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^(?=.*a)(?=.*e)(?=.*i)(?=.*o).*u&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; &#x2F;usr&#x2F;share&#x2F;dict&#x2F;words
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;640

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# number of input lines NOT containing &amp;#39;at&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grep -vc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;at&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With multiple file input, count is displayed for each file &lt;em&gt;separately&lt;&#x2F;em&gt;. Use &lt;code&gt;cat&lt;&#x2F;code&gt; if you need a combined count.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# separate count for each input file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; seq 15 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grep -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; programming_quotes.txt -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;programming_quotes.txt:1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;standard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; input):7

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# total count for all the input files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; 15) programming_quotes.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grep -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If total number of matches is required, use the &lt;code&gt;-o&lt;&#x2F;code&gt; option to display only the matching portions (one per line) and then use &lt;code&gt;wc&lt;&#x2F;code&gt; to get the count.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# -c gives count of matching lines only
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grep -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[aeiou]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;4

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use -o to get each match on a separate line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grep -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[aeiou]&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;wc -l
7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that if you use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt;, you can also use &lt;code&gt;-co&lt;&#x2F;code&gt; or &lt;code&gt;--count-matches&lt;&#x2F;code&gt; instead of piping to &lt;code&gt;wc&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# this behavior is different compared to GNU grep
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;goal\nrate\neat\npit&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rg -co &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[aeiou]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;GNU GREP and RIPGREP&lt;&#x2F;a&gt; ebook if you are interested in learning about &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; commands in more detail.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Programming deals</title>
		<published>2021-11-26T00:00:00+00:00</published>
		<updated>2021-11-27T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/programming-deals/" type="text/html"/>
		<id>https://learnbyexample.github.io/programming-deals/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s some exciting programming deals for my own ebooks as well sales details from other creators.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Offers for my ebooks&lt;&#x2F;strong&gt; (valid till Nov 30)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&#x2F;blackfriday&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — FREE (normal price $10)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&#x2F;blackfriday&quot;&gt;Learn by example Python bundle&lt;&#x2F;a&gt; — $2 (normal price $12)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;all-books&#x2F;blackfriday&quot;&gt;All 11 Books Bundle&lt;&#x2F;a&gt; — $5 (normal price $22)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&#x2F;status&#x2F;1463898778860068868&quot;&gt;Giveaway contest on twitter&lt;&#x2F;a&gt; — a chance to get a single ebook for free&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Indie creators&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathspp.gumroad.com&#x2F;l&#x2F;pythonbootcamp&#x2F;blackfriday&quot;&gt;Python Problem-Solving Bootcamp&lt;&#x2F;a&gt; — 40% OFF today, 30% OFF tomorrow and so on (boost your Python problem-solving skills)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;driscollis.gumroad.com&#x2F;&quot;&gt;Python books by Michael Driscoll&lt;&#x2F;a&gt; — $10 OFF on any book using coupon code &amp;quot;black21&amp;quot; (Python 101&#x2F;201, Image&#x2F;PDF&#x2F;Excel processing, etc)
&lt;ul&gt;
&lt;li&gt;see also author&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2021&#x2F;11&#x2F;24&#x2F;python-black-friday-cyber-monday-sales-2021&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; for links to other Python sales&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pythonmorsels.com&#x2F;&quot;&gt;Python Morsels&lt;&#x2F;a&gt; — 50% OFF until Nov 30 (skill-building service with short videos and hands-on bite-sized Python exercises)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mailchi.mp&#x2F;leanpub&#x2F;monthly-sale-2021-black-friday&quot;&gt;The Leanpub Monthly Sale for November 2021&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.humblebundle.com&#x2F;books&#x2F;code-like-pro-manning-publications-books&quot;&gt;Humble Book Bundle: Code Like a Pro by Manning Publications&lt;&#x2F;a&gt; — various sale options starting from $1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=29338976&quot;&gt;Various programming deals discussion on Hacker News&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;devutils.app&#x2F;pricing&#x2F;&quot;&gt;DevUtils.app&lt;&#x2F;a&gt; — 30% OFF this week (Powerful developer tools for your everyday tasks, Native macOS app)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bhavaniravi.gumroad.com&#x2F;l&#x2F;AxFMK&quot;&gt;How to Journal to Live your Best Life?&lt;&#x2F;a&gt; — $1.99 for 30 customers, $3.99 for the next 30 customers and so on (not strictly related to programming, applicable for life events, career, etc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Numeric Palindrome</title>
		<published>2021-11-25T00:00:00+00:00</published>
		<updated>2021-11-25T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/numeric-palindrome/" type="text/html"/>
		<id>https://learnbyexample.github.io/numeric-palindrome/</id>
		<content type="html">&lt;p&gt;I posted a coding challenge in the second issue of &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;. I discuss the problem and Python&#x2F;Perl solutions in this blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;problem-statement&quot;&gt;Problem statement&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Find numbers from &lt;code&gt;1&lt;&#x2F;code&gt; to &lt;code&gt;10000&lt;&#x2F;code&gt; (inclusive) which reads the same in reversed form in both binary and decimal format. For example, &lt;code&gt;33&lt;&#x2F;code&gt; in decimal is &lt;code&gt;100001&lt;&#x2F;code&gt; in binary and both of these are palindromic.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;python-solution&quot;&gt;Python solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-solution&quot; aria-label=&quot;Anchor link for: python-solution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s one possible solution for this problem:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;):
    dec_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{n}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;bin_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;dec_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;dec_s[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;bin_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;bin_s[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]:
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(n)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Extending the above solution to include more comparisons is easy with built-in features:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;):
    dec_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{n}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;bin_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;oct_s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;:o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;s[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(dec_s, bin_s, oct_s)):
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(n)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an exercise, extend this program further to include hexadecimal number comparison as well. Can you find out what&#x27;s the first number that is greater than ten to satisfy all the four numeric formats?&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;perl-one-liner&quot;&gt;Perl one-liner&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl-one-liner&quot; aria-label=&quot;Anchor link for: perl-one-liner&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s a solution for CLI enthusiasts:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; perl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -le &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;for (1..10000) { $bn = sprintf(&amp;quot;%b&amp;quot;, $_);
                print if ($_ eq reverse) &amp;amp;&amp;amp; ($bn eq reverse $bn) }&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1
3
5
7
9
33
99
313
585
717
7447
9009
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl one-liners&lt;&#x2F;a&gt; ebook if you are interested in learning to use Perl from the command-line.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 2: membership operator</title>
		<published>2021-11-25T00:00:00+00:00</published>
		<updated>2021-11-25T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/python-tip-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-2/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;in&lt;&#x2F;code&gt; membership operator checks if a given value is part of a collection of values. Here&#x27;s an example with &lt;code&gt;range()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# checks if num is present among the integers 3 or 4 or 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of a series of &lt;code&gt;==&lt;&#x2F;code&gt; comparisons combined with the &lt;code&gt;or&lt;&#x2F;code&gt; boolean operator, you can utilize the &lt;code&gt;in&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# instead of doing this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use the membership operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When applied to strings, the &lt;code&gt;in&lt;&#x2F;code&gt; operator performs substring comparison.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;fruit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mango&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;an&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;fruit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;at&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;fruit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To invert the membership test, use the &lt;code&gt;not in&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;parrot&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;expressions.html#membership-test-operations&quot;&gt;docs.python: Membership test operations&lt;&#x2F;a&gt; for documentation.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CLI tip 1: remove metadata from images</title>
		<published>2021-11-18T00:00:00+00:00</published>
		<updated>2021-11-18T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/cli-tip-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/cli-tip-1/</id>
		<content type="html">&lt;p&gt;Want to remove metadata (DateTime, Model, Orientation, ShutterSpeedValue, etc) from your images? Here&#x27;s an example using &lt;code&gt;mogrify&lt;&#x2F;code&gt; for all files ending with &lt;code&gt;.jpg&lt;&#x2F;code&gt; in the current directory.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; mogrify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -strip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.jpg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Note that this will replace your original images and output size may vary because of recompression. See the below resource links for more details and alternate tools.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Further Reading&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imagemagick.org&#x2F;&quot;&gt;ImageMagick&lt;&#x2F;a&gt; — create, edit, compose, or convert digital images&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;260810&#x2F;how-can-i-read-and-remove-meta-exif-data-from-my-photos-using-the-command-line&quot;&gt;How can I read and remove meta (exif) data from my photos using the command line?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;312754&#x2F;how-to-strip-metadata-from-image-files&quot;&gt;How to strip metadata from image files&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;softwareengineering.stackexchange.com&#x2F;questions&#x2F;42767&#x2F;why-do-they-name-a-program-mogrify-in-imagemagick&quot;&gt;What does mogrify mean?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exif&quot;&gt;wikipedia: Exif&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python tip 1: tuple argument for startswith&#x2F;endswith methods</title>
		<published>2021-11-16T00:00:00+00:00</published>
		<updated>2021-11-16T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/tips/python-tip-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/tips/python-tip-1/</id>
		<content type="html">&lt;p&gt;You&#x27;d probably know about the &lt;code&gt;startswith()&lt;&#x2F;code&gt; and &lt;code&gt;endswith()&lt;&#x2F;code&gt; string methods.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;is&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ing&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ly&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But did you know that you can also pass a &lt;code&gt;tuple&lt;&#x2F;code&gt; of strings?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;refuse&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;impossible&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fire&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;present&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;read&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;shim&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;im&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;re&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;use&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(prefix)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;refuse&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;impossible&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;read&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(prefix)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;refuse&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fire&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;shim&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Announcing learnbyexample weekly newsletter</title>
		<published>2021-11-13T00:00:00+00:00</published>
		<updated>2021-11-13T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/learnbyexample-weekly-newsletter/" type="text/html"/>
		<id>https://learnbyexample.github.io/learnbyexample-weekly-newsletter/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m excited to announce &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt; newsletter, scheduled to be delivered every Friday. I&#x27;ve already published the first issue, which you&#x27;ll receive after subscribing.&lt;&#x2F;p&gt;
&lt;p&gt;This free newsletter will help you discover awesome programming resources. I&#x27;ll primarily focus on resources related to Python, Linux CLI, Regular Expressions and Vim. Occasionally, I&#x27;ll also include other programming resources.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;learnbyexample-weekly.png&quot; alt=&quot;learnbyexample weekly newsletter&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;You can expect 5-15 links, usually categorized into the following sections (and some surprises at the end):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Article of the week&lt;&#x2F;li&gt;
&lt;li&gt;Resources&lt;&#x2F;li&gt;
&lt;li&gt;Programming Deals&lt;&#x2F;li&gt;
&lt;li&gt;Tip of the week&lt;&#x2F;li&gt;
&lt;li&gt;Tools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s some of the resource links from the first issue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joshwcomeau.com&#x2F;blog&#x2F;how-to-learn-stuff-quickly&#x2F;&quot;&gt;How To Learn Stuff Quickly&lt;&#x2F;a&gt; by Josh W. Comeau&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;miguendes.me&#x2F;python-pathlib&quot;&gt;Python pathlib Cookbook&lt;&#x2F;a&gt; — 57+ Examples to Master It&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shrutibalasa.gumroad.com&#x2F;l&#x2F;css-flex-and-grid&#x2F;Newsoff25&quot;&gt;Complete Guide to CSS Flex and Grid&lt;&#x2F;a&gt; by Shruti Balasa (25% OFF for a week)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;carbon.now.sh&#x2F;&quot;&gt;Carbon&lt;&#x2F;a&gt; — Create and share beautiful images of your source code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After subscribing to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;learnbyexample-weekly&quot;&gt;learnbyexample weekly&lt;&#x2F;a&gt;, you&#x27;ll get a confirmation email followed by another email with the first issue contents. You can also view the issue from your Gumroad account.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find the newsletter useful. Let me know your feedback via email (learnbyexample.net@gmail.com) or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Command line text processing with GNU Coreutils book announcement</title>
		<published>2021-10-08T00:00:00+00:00</published>
		<updated>2021-10-08T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/cli-text-processing-coreutils-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/cli-text-processing-coreutils-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published my ebook titled &amp;quot;&lt;strong&gt;Command line text processing with GNU Coreutils&lt;&#x2F;strong&gt;&amp;quot;. You might be already aware of popular coreutils commands like &lt;code&gt;head&lt;&#x2F;code&gt;, &lt;code&gt;tail&lt;&#x2F;code&gt;, &lt;code&gt;tr&lt;&#x2F;code&gt;, &lt;code&gt;sort&lt;&#x2F;code&gt;, etc. This book will teach you more than twenty of such specialized text processing tools provided by the &lt;code&gt;GNU coreutils&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;ebook-links&quot;&gt;Ebook links&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook-links&quot; aria-label=&quot;Anchor link for: ebook-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can get &lt;strong&gt;PDF&#x2F;EPUB&lt;&#x2F;strong&gt; versions from Gumroad or Leanpub using the links given below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_coreutils&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;cli_coreutils&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_coreutils&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;cli_coreutils&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;cli_coreutils.png&quot; alt=&quot;Command line text processing with GNU Coreutils cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;introduction.html&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;cli_text_processing_coreutils&#x2F;introduction.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&lt;&#x2F;a&gt; repo for code snippets, example files and other details related to the book.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;cat and tac&lt;&#x2F;li&gt;
&lt;li&gt;head and tail&lt;&#x2F;li&gt;
&lt;li&gt;tr&lt;&#x2F;li&gt;
&lt;li&gt;cut&lt;&#x2F;li&gt;
&lt;li&gt;seq&lt;&#x2F;li&gt;
&lt;li&gt;shuf&lt;&#x2F;li&gt;
&lt;li&gt;paste&lt;&#x2F;li&gt;
&lt;li&gt;pr&lt;&#x2F;li&gt;
&lt;li&gt;fold and fmt&lt;&#x2F;li&gt;
&lt;li&gt;sort&lt;&#x2F;li&gt;
&lt;li&gt;uniq&lt;&#x2F;li&gt;
&lt;li&gt;comm&lt;&#x2F;li&gt;
&lt;li&gt;join&lt;&#x2F;li&gt;
&lt;li&gt;nl&lt;&#x2F;li&gt;
&lt;li&gt;wc&lt;&#x2F;li&gt;
&lt;li&gt;split&lt;&#x2F;li&gt;
&lt;li&gt;csplit&lt;&#x2F;li&gt;
&lt;li&gt;expand and unexpand&lt;&#x2F;li&gt;
&lt;li&gt;basename and dirname&lt;&#x2F;li&gt;
&lt;li&gt;What next?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hope you find it useful and fun to learn text processing tools provided by the &lt;code&gt;GNU coreutils&lt;&#x2F;code&gt; package. As always, I&#x27;d highly appreciate your feedback. Please do let me know if you spot any error or typo.&lt;&#x2F;p&gt;
&lt;p&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;cli_text_processing_coreutils&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;E-mail: learnbyexample.net@gmail.com&lt;&#x2F;p&gt;
&lt;p&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Indie Python Extravaganza</title>
		<published>2021-10-01T00:00:00+00:00</published>
		<updated>2021-10-01T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/indie-python-extravaganza/" type="text/html"/>
		<id>https://learnbyexample.github.io/indie-python-extravaganza/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;You never know where a conversation between indie authors will lead to. A &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tw_lgiordani&#x2F;status&#x2F;1442489206681395207&quot;&gt;tweet about Leanpub Python book sales&lt;&#x2F;a&gt; brought up giveaways that we indie authors tend to do. Long story short, the four of us ended up deciding to create &lt;strong&gt;The Indie Python Extravaganza&lt;&#x2F;strong&gt; bundle.&lt;&#x2F;p&gt;
&lt;p&gt;And guess what?! You can use this &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;theindiepythonextravaganza&#x2F;c&#x2F;pytober&quot;&gt;pytober coupon link&lt;&#x2F;a&gt; to get the bundle for FREE (the offer is valid till 31-Oct-2021).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;bundle-contents&quot;&gt;Bundle contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#bundle-contents&quot; aria-label=&quot;Anchor link for: bundle-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A collection of books that will help you to improve your knowledge of the Python programming language one page at a time. Join four indie authors in a journey from the basics of Python to the structure of production-ready systems, going through the core features of the language, some intermediate projects and a deep dive into regular expressions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;indie_python.jpg&quot; alt=&quot;The Indie Python Extravaganza cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;theindiepythonextravaganza&#x2F;c&#x2F;pytober&quot;&gt;Coupon link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this bundle, Mike will teach you the basics of Python with &lt;strong&gt;Python 101&lt;&#x2F;strong&gt;. Sundeep will then take the lead and help you to put your knowledge into practice with &lt;strong&gt;Practice Python Projects&lt;&#x2F;strong&gt;. Learn what NOT to do when writing your Python programs with Rodrigo in his &lt;strong&gt;Pydon&#x27;ts&lt;&#x2F;strong&gt; book! If you need to learn regular expressions, Sundeep has again your back with his &lt;strong&gt;Python re(gex)?&lt;&#x2F;strong&gt; book, and when you are ready to start working on production code, you&#x27;ll have &lt;strong&gt;Clean Architectures in Python&lt;&#x2F;strong&gt; to help you!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;a class=&quot;zola-anchor&quot; href=&quot;#authors&quot; aria-label=&quot;Anchor link for: authors&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Leonardo Giordani: &lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatonline.com&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tw_lgiordani&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Michael Driscoll: &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;driscollis&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rodrigo Girão Serrão: &lt;a href=&quot;https:&#x2F;&#x2F;mathspp.com&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mathsppblog&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sundeep Agarwal: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;&quot;&gt;Blog&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;how-can-you-help&quot;&gt;How can you help?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-can-you-help&quot; aria-label=&quot;Anchor link for: how-can-you-help&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Share the bundle link with your friends and colleagues interested in learning Python.&lt;&#x2F;p&gt;
&lt;p&gt;Your feedback on the book contents would be appreciated even more.&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning 😇&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Practice Python Projects book announcement</title>
		<published>2021-07-30T00:00:00+00:00</published>
		<updated>2021-08-02T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/practice-python-projects-book-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/practice-python-projects-book-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published my ebook titled &amp;quot;&lt;strong&gt;Practice Python Projects&lt;&#x2F;strong&gt;&amp;quot;. This book presents five beginner to intermediate level projects inspired by real world use cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;calculator&#x2F;calculator.html&quot;&gt;Enhance your CLI experience with a custom Python calculator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;poll_data_analysis&#x2F;poll_data_analysis.html&quot;&gt;Analyzing poll data from a Reddit comment thread&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;find_typos&#x2F;find_typos.html&quot;&gt;Finding typos in plain text and Markdown files&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;mcq&#x2F;multiple_choice_questions.html&quot;&gt;Creating a GUI for evaluating multiple choice questions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;square_tic_tac_toe&#x2F;square_tic_tac_toe.html&quot;&gt;Square Tic Tac Toe — creating a GUI game with AI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;To test your understanding and to make it more interesting, you&#x27;ll also be presented with exercises at the end of each project. Resources for further exploration are also mentioned throughout the book. Here&#x27;s a short video about the book:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;5whwiiURWS8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;ebook-links&quot;&gt;Ebook links&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook-links&quot; aria-label=&quot;Anchor link for: ebook-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can buy the &lt;strong&gt;PDF&#x2F;EPUB&lt;&#x2F;strong&gt; versions of the book using these links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_projects&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;py_projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also get the ebooks as part of &lt;strong&gt;Learn by example Python bundle&lt;&#x2F;strong&gt; using these links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;python-bundle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python-bundle&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;b&#x2F;python-bundle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;py_projects.png&quot; alt=&quot;Practice Python Projects cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;preface.html&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;preface.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&lt;&#x2F;a&gt; repo has program&#x2F;example files, markdown source and other details about the book.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hope you find it useful and fun to practice these Python projects. As always, I&#x27;d highly appreciate your feedback. Please do let me know if you spot any error or typo.&lt;&#x2F;p&gt;
&lt;p&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;practice_python_projects&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;E-mail: &lt;code&gt;learn by example.net@gmail.com&lt;&#x2F;code&gt; (without the spaces)&lt;&#x2F;p&gt;
&lt;p&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Escaping madness to get literal field separators in awk</title>
		<published>2021-07-02T00:00:00+00:00</published>
		<updated>2021-07-02T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/escaping-madness-awk-literal-field-separator/" type="text/html"/>
		<id>https://learnbyexample.github.io/escaping-madness-awk-literal-field-separator/</id>
		<content type="html">&lt;p&gt;I&#x27;m building a tool called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;regexp-cut&quot;&gt;rcut&lt;&#x2F;a&gt; that allows you to use &lt;code&gt;cut&lt;&#x2F;code&gt; like syntax with features like regexp based delimiters. The solution uses &lt;code&gt;awk&lt;&#x2F;code&gt; inside a &lt;code&gt;bash&lt;&#x2F;code&gt; script.&lt;&#x2F;p&gt;
&lt;p&gt;Latest &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Feature_creep&quot;&gt;feature creep&lt;&#x2F;a&gt; is fixed string field splitting. I thought it would be a simple enough solution to add.&lt;&#x2F;p&gt;
&lt;p&gt;I was wrong.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;how-many-escapes-for-a-single-backslash&quot;&gt;How many escapes for a single backslash?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-many-escapes-for-a-single-backslash&quot; aria-label=&quot;Anchor link for: how-many-escapes-for-a-single-backslash&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For reference, these are the versions I have on my machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; gawk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; --version
GNU&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; Awk 5.1.0, API: 3.0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; mawk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -W&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; 1.3.4 20200120
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;mawk&lt;&#x2F;code&gt; and &lt;code&gt;gawk&lt;&#x2F;code&gt; differ when it comes to escaping backslashes. You&#x27;ll later see the rule that&#x27;ll work correctly for both implementations.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak

$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fatal: invalid regexp: Trailing backslash: &#x2F;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fatal: invalid regexp: Trailing backslash: &#x2F;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\\\&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value assigned to &lt;code&gt;FS&lt;&#x2F;code&gt; is treated as a string and then converted to a regexp. &lt;code&gt;\&lt;&#x2F;code&gt; is a metacharacter for string and regexp both. So, &lt;code&gt;\\&lt;&#x2F;code&gt; in a string means a single backslash and &lt;code&gt;\\\\&lt;&#x2F;code&gt; means double backslash. Double backslash in regexp means a single backslash.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;&#x2F;strong&gt;: For a consistent behavior across both &lt;code&gt;mawk&lt;&#x2F;code&gt; and &lt;code&gt;gawk&lt;&#x2F;code&gt; and irrespective of trailing backslash errors, you need to use 4 backslashes for every backslash.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# both 2 and 4 backslashes here gets treated as single backslash
# hence the empty fields in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,,2,,3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 5-8 backslashes give expected results
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# 5-6 backslashes give error, 7-8 backslashes give expected results
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fatal: invalid regexp: Trailing backslash: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fatal: invalid regexp: Trailing backslash: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\\\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As an alternate method, you can use codepoint of the backslash character. This removes one level of escaping. See &lt;a href=&quot;https:&#x2F;&#x2F;ascii.cl&#x2F;&quot;&gt;ASCII code table&lt;&#x2F;a&gt; for codepoint reference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;&#x2F;strong&gt;: You need &lt;code&gt;\x5c\x5c&lt;&#x2F;code&gt; for every backslash.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\x5c\x5c&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple\bake\cake&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;e\x5c\x5c&amp;#39; &amp;#39;{print $2}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bak

$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\x5c\x5c\x5c\x5c&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1\\2\\3&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\x5c\x5c\x5c\x5c&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;1,2,3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;using-awk-to-generate-an-escaped-string&quot;&gt;Using awk to generate an escaped string&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-awk-to-generate-an-escaped-string&quot; aria-label=&quot;Anchor link for: using-awk-to-generate-an-escaped-string&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you want to use &lt;code&gt;\.&lt;&#x2F;code&gt; literally for field splitting. Here&#x27;s some ways to do it that works for both &lt;code&gt;mawk&lt;&#x2F;code&gt; and &lt;code&gt;gawk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x\2\.y\.z&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\\\.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,y,z
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x\2\.y\.z&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\\\\[.]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,y,z
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;x\2\.y\.z&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\x5c\x5c[.]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; OFS=, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$1=$1} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;,y,z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the task is to generate one of the above strings passed to the &lt;code&gt;-F&lt;&#x2F;code&gt; option from &lt;code&gt;\.&lt;&#x2F;code&gt; as input. Using &lt;code&gt;sed&lt;&#x2F;code&gt; is better, but for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;regexp-cut&quot;&gt;rcut&lt;&#x2F;a&gt;, I didn&#x27;t want to add another external tool.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;case-1-backslash-madness&quot;&gt;Case 1: backslash madness&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-1-backslash-madness&quot; aria-label=&quot;Anchor link for: case-1-backslash-madness&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You need to convert &lt;code&gt;\&lt;&#x2F;code&gt; to 4 backslashes and escape regexp metacharacters with 2 backslashes. Note that you cannot escape all characters except &lt;code&gt;\&lt;&#x2F;code&gt; with 2 backslashes, for example &lt;code&gt;\\t&lt;&#x2F;code&gt; will become a tab character! Also, you need to escape &lt;code&gt;\&lt;&#x2F;code&gt; first and then escape the other metacharacters.&lt;&#x2F;p&gt;
&lt;p&gt;Ready for the solution? I&#x27;m not even going to try explaining this, found it by experimenting.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replacement string for the first gsub has 16 backslashes
# replacement string for the second gsub has 8 backslashes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;\\&#x2F;, &amp;quot;\\\\\\\\\\\\\\\\&amp;quot;);
                          gsub(&#x2F;[{[(^$*?+.|]&#x2F;, &amp;quot;\\\\\\\\&amp;amp;&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;.b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;^d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gawk&#x2F;manual&#x2F;gawk.html#Gory-Details&quot;&gt;gawk manual: Gory details&lt;&#x2F;a&gt; might help you understand the above solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;case-2-character-class&quot;&gt;Case 2: character class&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-2-character-class&quot; aria-label=&quot;Anchor link for: case-2-character-class&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;One of the characteristic of character class is that you can enclose all characters except &lt;code&gt;\&lt;&#x2F;code&gt; and &lt;code&gt;^&lt;&#x2F;code&gt; to match them literally. The &lt;code&gt;\&lt;&#x2F;code&gt; character is special both inside&#x2F;outside of character class and &lt;code&gt;[^]&lt;&#x2F;code&gt; is invalid since &lt;code&gt;^&lt;&#x2F;code&gt; is special if used as the first character.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;\\&#x2F;, &amp;quot;\\\\\\\\\\\\\\\\&amp;quot;);
                          gsub(&#x2F;[^^\\]&#x2F;, &amp;quot;[&amp;amp;]&amp;quot;);
                          gsub(&#x2F;\^&#x2F;, &amp;quot;\\\\^&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[a][.][b]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[c]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;^[d]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;case-3-codepoint-to-represent-backslash&quot;&gt;Case 3: codepoint to represent backslash&lt;a class=&quot;zola-anchor&quot; href=&quot;#case-3-codepoint-to-represent-backslash&quot; aria-label=&quot;Anchor link for: case-3-codepoint-to-represent-backslash&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, my preferred solutions that uses codepoint instead of escaping backslashes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# case 1 alternate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;\\&#x2F;, &amp;quot;\\x5c\\x5c&amp;quot;);
                          gsub(&#x2F;[{[(^$*?+.|]&#x2F;, &amp;quot;\\x5c&amp;amp;&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c.b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5cc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c^d

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# case 2 alternate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.b\c^d&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gawk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{gsub(&#x2F;[^^\\]&#x2F;, &amp;quot;[&amp;amp;]&amp;quot;);
                          gsub(&#x2F;\\&#x2F;, &amp;quot;\\x5c\\x5c&amp;quot;);
                          gsub(&#x2F;\^&#x2F;, &amp;quot;\\x5c^&amp;quot;)} 1&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;[a][.][b]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c[c]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;5c^[d]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;sanity-check&quot;&gt;Sanity check&lt;a class=&quot;zola-anchor&quot; href=&quot;#sanity-check&quot; aria-label=&quot;Anchor link for: sanity-check&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I probably lost my sanity trying to come up with a solution and again while writing this post. I did try a few sanity checks for the solutions presented here, but there&#x27;s a chance I messed up or missed some corner case. If you spot an issue, do let me know.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Debug woes: 2</title>
		<published>2021-06-17T00:00:00+00:00</published>
		<updated>2021-06-17T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/debug-woes-2/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/debug-woes-2/</id>
		<content type="html">&lt;p&gt;So, I was editing a markdown file in Vim and I wanted to convert some lines to links. The regexp pattern ended up needing non-greedy quantifier, but it didn&#x27;t work. I thought I got Vim&#x27;s rather weird &lt;code&gt;\{-}&lt;&#x2F;code&gt; syntax wrong and switched to using Perl from the command line instead of checking the documentation if I had actually made that mistake.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out I made other mistakes in the regexp, but I didn&#x27;t want to switch back to Vim. I was still scratching my head though, since I wasn&#x27;t getting the expected output. Thankfully, compared to the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;mini&#x2F;debug-woes-1&#x2F;&quot;&gt;previous debug misery&lt;&#x2F;a&gt;, I was able to guess this issue soon enough.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simplified issue, how I debugged it and the corrected usage:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# sample input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat ip.txt 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; blah blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; xyz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; abcd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; foobaz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fig

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# where I got stuck
# what happened to $1 and $2?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1[$2](#$3)&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#xyz 34 abcd 56 foobaz)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#apple 200 fig)

# what I did to debug
# step 1: only $1 in the replacement
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* 
- 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# step 2: $1 and $2 in the replacement
# only empty lines as output - bingo!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1[$2]&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# $1[$2] treated as array syntax in Perl
# so, need to escape [ since array isn&amp;#39;t intended here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;lpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;^(. )(.*?\d+) (.+)&#x2F;$1\[$2](#$3)&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[blah blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#xyz 34 abcd 56 foobaz)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[blah &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#apple 200 fig)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Dreaming solutions</title>
		<published>2021-06-10T00:00:00+00:00</published>
		<updated>2021-06-10T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/dreaming-solutions/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/dreaming-solutions/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;67886163&#x2F;4082052&quot;&gt;This SO question&lt;&#x2F;a&gt; was interesting and had various approaches to solve it. Here&#x27;s a sample example to explain the problem to be solved:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat ip.txt
caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;034082394234324&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;33335345435&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,  direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,
caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83479234234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,     clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;34836424733&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,
caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83479234234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,     clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;64237384533&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,

$ cat list.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;642
3333
534234235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;

$ cat op.txt
caller_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;83479234234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,     clear_number=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;64237384533&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, direction=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any data present in &lt;code&gt;list.txt&lt;&#x2F;code&gt; has to be matched immediately after &lt;code&gt;clear_number=&lt;&#x2F;code&gt; and the input line should also have &lt;code&gt;direction=2,&lt;&#x2F;code&gt;. In the sample above, first line matches &lt;code&gt;3333&lt;&#x2F;code&gt; but not the second criteria. The second line fails even though it has &lt;code&gt;642&lt;&#x2F;code&gt; since it is not immediately after &lt;code&gt;clear_number=&lt;&#x2F;code&gt;. The &lt;code&gt;list.txt&lt;&#x2F;code&gt; file can have 10K-50K lines and &lt;code&gt;ip.txt&lt;&#x2F;code&gt; is around 10GB.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a slightly modified answer based on existing solutions on that thread. Since the data present in &lt;code&gt;list.txt&lt;&#x2F;code&gt; has to be partially matched after &lt;code&gt;clear_number=&lt;&#x2F;code&gt;, a &lt;em&gt;single&lt;&#x2F;em&gt; direct comparison with the keys saved in &lt;code&gt;arr&lt;&#x2F;code&gt; is not possible. This solution loops over all the keys for every input line that matches the &lt;code&gt;direction=2,&lt;&#x2F;code&gt; criteria (breaks the loop if a match is found early).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;FNR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;=&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;direction=2,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)){
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;print
            next
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;em&gt;To run the solutions, use &lt;code&gt;mawk -f script.awk list.txt ip.txt&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;In my dreams that night&lt;&#x2F;strong&gt;, I realized that the solution can be improved drastically by looping over the digits after &lt;code&gt;clear_number=&lt;&#x2F;code&gt; instead of looping over keys saved in &lt;code&gt;arr&lt;&#x2F;code&gt;. Matching a key is &lt;code&gt;O(1)&lt;&#x2F;code&gt;, so the time saving is huge since the inner loop is now a maximum of 12 (length of digits after &lt;code&gt;clear_number=&lt;&#x2F;code&gt;) instead of looping a maximum of 10K-50K times! With a 35M sample input file and 12K keys that I created for testing, I found this solution to be about &lt;strong&gt;200&lt;&#x2F;strong&gt; times faster.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;FNR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;direction=2,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;substr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;){
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;print
            next
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>GNU BRE&#x2F;ERE cheatsheet and differences between grep, sed and awk</title>
		<published>2021-05-31T00:00:00+00:00</published>
		<updated>2021-09-07T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/gnu-bre-ere-cheatsheet/" type="text/html"/>
		<id>https://learnbyexample.github.io/gnu-bre-ere-cheatsheet/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;bre_ere_cheatsheet.png&quot; alt=&quot;GNU BRE&#x2F;ERE cheatsheet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This post covers &lt;strong&gt;Basic Regular Expressions&lt;&#x2F;strong&gt; (BRE) and &lt;strong&gt;Extended Regular Expressions&lt;&#x2F;strong&gt; (ERE) syntax supported by GNU &lt;code&gt;grep&lt;&#x2F;code&gt;, &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt;. You&#x27;ll also learn the differences between these tools — for example, &lt;code&gt;awk&lt;&#x2F;code&gt; doesn&#x27;t support backreferences within regexp definition (i.e. the search portion).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;bre-and-ere&quot;&gt;BRE and ERE&lt;a class=&quot;zola-anchor&quot; href=&quot;#bre-and-ere&quot; aria-label=&quot;Anchor link for: bre-and-ere&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; From &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;grep&#x2F;manual&#x2F;grep.html#Basic-vs-Extended&quot;&gt;GNU grep manual&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In basic regular expressions the meta-characters &lt;code&gt;?&lt;&#x2F;code&gt;, &lt;code&gt;+&lt;&#x2F;code&gt;, &lt;code&gt;{&lt;&#x2F;code&gt;, &lt;code&gt;|&lt;&#x2F;code&gt;, &lt;code&gt;(&lt;&#x2F;code&gt;, and &lt;code&gt;)&lt;&#x2F;code&gt; lose their special meaning; instead use the backslashed versions &lt;code&gt;\?&lt;&#x2F;code&gt;, &lt;code&gt;\+&lt;&#x2F;code&gt;, &lt;code&gt;\{&lt;&#x2F;code&gt;, &lt;code&gt;\|&lt;&#x2F;code&gt;, &lt;code&gt;\(&lt;&#x2F;code&gt;, and &lt;code&gt;\)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt; support BRE by default and enables ERE when &lt;code&gt;-E&lt;&#x2F;code&gt; option is used. &lt;code&gt;awk&lt;&#x2F;code&gt; supports only ERE. Assume ERE for descriptions in this post unless otherwise mentioned.&lt;&#x2F;p&gt;
&lt;p&gt;This post is intended as a reference for BRE&#x2F;ERE flavor of regular expressions. For a more detailed explanation with examples and exercises, see these chapters from &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;my ebooks&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;breere-regular-expressions.html&quot;&gt;grep BRE&#x2F;ERE Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;breere-regular-expressions.html&quot;&gt;sed BRE&#x2F;ERE Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnuawk&#x2F;regular-expressions.html&quot;&gt;awk Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;anchors&quot;&gt;Anchors&lt;a class=&quot;zola-anchor&quot; href=&quot;#anchors&quot; aria-label=&quot;Anchor link for: anchors&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of the string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of the string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&amp;lt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of word&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of word&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The &lt;code&gt;-x&lt;&#x2F;code&gt; cli option in &lt;code&gt;grep&lt;&#x2F;code&gt; is equivalent to &lt;code&gt;^pattern$&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Word characters include alphabets, digits and underscore. Here&#x27;s some more alternate ways to specify word anchors:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start&#x2F;end of words, applicable for &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\y&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start&#x2F;end of words, applicable for &lt;code&gt;awk&lt;&#x2F;code&gt; (&lt;code&gt;\b&lt;&#x2F;code&gt; means backspace)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matches wherever &lt;code&gt;\b&lt;&#x2F;code&gt; (or &lt;code&gt;\y&lt;&#x2F;code&gt;) doesn&#x27;t match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code&gt;grep&lt;&#x2F;code&gt; also supports &lt;code&gt;-w&lt;&#x2F;code&gt; cli option. It is equivalent to &lt;code&gt;(?&amp;lt;!\w)pattern(?!\w)&lt;&#x2F;code&gt;. The three different ways to specify word anchors are not exactly equivalent though, see &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;gotchas-and-tricks.html#word-boundary-differences&quot;&gt;Word boundary differences&lt;&#x2F;a&gt; section from my book for details and examples.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;alternation-and-grouping&quot;&gt;Alternation and Grouping&lt;a class=&quot;zola-anchor&quot; href=&quot;#alternation-and-grouping&quot; aria-label=&quot;Anchor link for: alternation-and-grouping&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1|pat2|pat3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;pat1&lt;&#x2F;code&gt; or &lt;code&gt;pat2&lt;&#x2F;code&gt; or &lt;code&gt;pat3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\|&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;group pattern(s), &lt;code&gt;a(b|c)d&lt;&#x2F;code&gt; is same as &lt;code&gt;abd|acd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\(\)&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The alternative patterns can have their own independent anchors. Alternative which matches earliest in the input gets precedence. Longest matching portion wins if multiple alternatives start from the same location (irrespective of the order of alternatives). In case of a tie with same lengths, leftmost alternative wins (see &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;39752929&#x2F;4082052&quot;&gt;stackoverflow: Non greedy matching in sed&lt;&#x2F;a&gt; for a practical use case).&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;escaping-metacharacters&quot;&gt;Escaping metacharacters&lt;a class=&quot;zola-anchor&quot; href=&quot;#escaping-metacharacters&quot; aria-label=&quot;Anchor link for: escaping-metacharacters&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;prefix metacharacters with &lt;code&gt;\&lt;&#x2F;code&gt; to match them literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;to match &lt;code&gt;\&lt;&#x2F;code&gt; literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt;, switching between ERE and BRE can reduce the number of escapes needed for some cases. For fixed string matching, &lt;code&gt;grep&lt;&#x2F;code&gt; has &lt;code&gt;-F&lt;&#x2F;code&gt; option and &lt;code&gt;awk&lt;&#x2F;code&gt; has string comparison operators (whole string) and the &lt;code&gt;index&lt;&#x2F;code&gt; function (partial string).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sed&lt;&#x2F;code&gt; requires both &lt;code&gt;(&lt;&#x2F;code&gt; and &lt;code&gt;)&lt;&#x2F;code&gt; characters to be escaped (in ERE mode), whereas &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; don&#x27;t require &lt;code&gt;)&lt;&#x2F;code&gt; to be escaped.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sed&lt;&#x2F;code&gt; requires &lt;code&gt;{&lt;&#x2F;code&gt; to be escaped (in ERE mode) even if it isn&#x27;t part of a valid quantifier syntax, whereas &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; don&#x27;t require escaping. For example, you&#x27;d need &lt;code&gt;\{a}&lt;&#x2F;code&gt; in &lt;code&gt;sed&lt;&#x2F;code&gt; whereas &lt;code&gt;{a}&lt;&#x2F;code&gt; is enough for the other two.&lt;&#x2F;li&gt;
&lt;li&gt;In BRE mode, &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt; don&#x27;t require &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; to be escaped if they are used away from their customary positions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;dot-metacharacter-and-quantifiers&quot;&gt;Dot metacharacter and Quantifiers&lt;a class=&quot;zola-anchor&quot; href=&quot;#dot-metacharacter-and-quantifiers&quot; aria-label=&quot;Anchor link for: dot-metacharacter-and-quantifiers&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any character, including the newline character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\?&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;1&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\+&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match at least &lt;code&gt;m&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match up to &lt;code&gt;n&lt;&#x2F;code&gt; times (including &lt;code&gt;0&lt;&#x2F;code&gt; times)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\{\}&lt;&#x2F;code&gt; in BRE mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;any number of characters between &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2|pat2.*pat1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match both &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt; in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Precedence rule is &lt;em&gt;longest match wins&lt;&#x2F;em&gt;, which is mostly similar but not exactly same as greedy quantifiers. For example, with &lt;code&gt;foo123312baz&lt;&#x2F;code&gt; as input string, &lt;code&gt;o[123]+(12baz)?&lt;&#x2F;code&gt; will match &lt;code&gt;o123312baz&lt;&#x2F;code&gt; with these tools, whereas it will match &lt;code&gt;o123312&lt;&#x2F;code&gt; with greedy quantifiers.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;character-class&quot;&gt;Character class&lt;a class=&quot;zola-anchor&quot; href=&quot;#character-class&quot; aria-label=&quot;Anchor link for: character-class&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[set123]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any of these characters once&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^set123]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match except any of these characters once&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[3-7AM-X]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;range of characters from &lt;code&gt;3&lt;&#x2F;code&gt; to &lt;code&gt;7&lt;&#x2F;code&gt;, &lt;code&gt;A&lt;&#x2F;code&gt;, another range from &lt;code&gt;M&lt;&#x2F;code&gt; to &lt;code&gt;X&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;open collating symbol&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;close collating symbol&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[=&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;open equivalence class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;=]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;close equivalence class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Specific placement will help to match character class metacharacters literally.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-z-]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt; should be first&#x2F;last character to match literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[+^]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; shouldn&#x27;t be first character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[]=]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;]&lt;&#x2F;code&gt; should be first character (second if &lt;code&gt;^&lt;&#x2F;code&gt; is used to invert the set)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&lt;&#x2F;code&gt; isn&#x27;t special within character class in &lt;code&gt;grep&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\&lt;&#x2F;code&gt; can be used to escape character class metacharacters in &lt;code&gt;awk&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some commonly used character sets have predefined escape sequences:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[a-zA-Z0-9_]&lt;&#x2F;code&gt; for matching word characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[ \t\n\r\f\v]&lt;&#x2F;code&gt; for matching whitespace characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match non-word characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match non-whitespace characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;Undefined escape sequences will be treated as the character it escapes. For example, &lt;code&gt;\e&lt;&#x2F;code&gt; will match &lt;code&gt;e&lt;&#x2F;code&gt; (not &lt;code&gt;\&lt;&#x2F;code&gt; and &lt;code&gt;e&lt;&#x2F;code&gt;).
&lt;ul&gt;
&lt;li&gt;in addition, &lt;code&gt;awk&lt;&#x2F;code&gt; gives a &amp;quot;not a known regexp operator&amp;quot; warning.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The above escape sequences &lt;em&gt;cannot&lt;&#x2F;em&gt; be used inside character classes and behavior varies between the tools.
&lt;ul&gt;
&lt;li&gt;For example, using &lt;code&gt;[\w]&lt;&#x2F;code&gt; will match &lt;code&gt;\&lt;&#x2F;code&gt; or &lt;code&gt;w&lt;&#x2F;code&gt; characters in &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt; whereas it will match only &lt;code&gt;w&lt;&#x2F;code&gt; in &lt;code&gt;awk&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;These escape sequences are also locale aware, for example &lt;code&gt;αλεπού&lt;&#x2F;code&gt; and &lt;code&gt;\u2028&lt;&#x2F;code&gt; (line separator) will be considered as word and whitespace characters respectively in appropriate locales.&lt;&#x2F;li&gt;
&lt;li&gt;These tools do &lt;em&gt;not&lt;&#x2F;em&gt; support &lt;code&gt;\d&lt;&#x2F;code&gt; and &lt;code&gt;\D&lt;&#x2F;code&gt;, commonly featured in other regexp implementations for digits and non-digits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;escape-sequences&quot;&gt;Escape sequences&lt;a class=&quot;zola-anchor&quot; href=&quot;#escape-sequences&quot; aria-label=&quot;Anchor link for: escape-sequences&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This section is applicable only for &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; unless otherwise specified and can be used within character classes too. See also &lt;a href=&quot;https:&#x2F;&#x2F;ascii.cl&#x2F;&quot;&gt;ASCII Codes Table Standard characters&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Escape sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\a&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;alert&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backspace in &lt;code&gt;awk&lt;&#x2F;code&gt;, word boundary in &lt;code&gt;grep&lt;&#x2F;code&gt; and &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt; inside a character class in &lt;code&gt;sed&lt;&#x2F;code&gt; will act as a backspace&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\f&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;formfeed&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;newline&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\r&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;carriage return&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\t&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;horizontal tab&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\v&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;vertical tab&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\cx&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;CONTROL-x in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;You can also represent ASCII characters using their codepoint values.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Escape sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\xNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;hexadecimal digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\NNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;octal digits in &lt;code&gt;awk&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\oNNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;octal digits in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\dNNN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;decimal digits in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;In search section, a metacharacter specified by escape sequences will still act as the metacharacter. For example, &lt;code&gt;&#x2F;\x5eco&#x2F;&lt;&#x2F;code&gt; will match &lt;code&gt;co&lt;&#x2F;code&gt; only at the start of the string.&lt;&#x2F;li&gt;
&lt;li&gt;In replacement section,
&lt;ul&gt;
&lt;li&gt;escape sequences in &lt;code&gt;sed&lt;&#x2F;code&gt; produces literal character. For example, &lt;code&gt;s&#x2F;.*&#x2F;&amp;quot;\x26&amp;quot;&#x2F;&lt;&#x2F;code&gt; will have &lt;code&gt;&amp;quot;&amp;amp;&amp;quot;&lt;&#x2F;code&gt; as the replacement value.&lt;&#x2F;li&gt;
&lt;li&gt;escape sequences in &lt;code&gt;awk&lt;&#x2F;code&gt; is treated as metacharacter. For example, &lt;code&gt;sub(&#x2F;.*&#x2F;, &amp;quot;[&amp;amp;]&amp;quot;)&lt;&#x2F;code&gt; and &lt;code&gt;sub(&#x2F;.*&#x2F;, &amp;quot;[\x26]&amp;quot;)&lt;&#x2F;code&gt; are equivalent.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Ways to use escape sequences with &lt;code&gt;grep&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.html#ANSI_002dC-Quoting&quot;&gt;ANSI-C Quoting&lt;&#x2F;a&gt; — for example, &lt;code&gt;$&#x27;a\tb&#x27;&lt;&#x2F;code&gt; will match &lt;code&gt;a&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt; with a tab in between.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;&#x2F;code&gt; option, see my chapter on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnugrep_ripgrep&#x2F;perl-compatible-regular-expressions.html&quot;&gt;Perl Compatible Regular Expressions&lt;&#x2F;a&gt; for more details.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;named-character-sets&quot;&gt;Named character sets&lt;a class=&quot;zola-anchor&quot; href=&quot;#named-character-sets&quot; aria-label=&quot;Anchor link for: named-character-sets&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The below table lists named sets and their equivalent character class in ASCII encoding. These can be used inside character classes only. For example, &lt;code&gt;[[:digit:]]&lt;&#x2F;code&gt; is same as &lt;code&gt;[0-9]&lt;&#x2F;code&gt; and &lt;code&gt;[[:alnum:]_]&lt;&#x2F;code&gt; is equivalent to &lt;code&gt;\w&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Named set&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:digit:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[0-9]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:lower:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[a-z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:upper:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[A-Z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:alpha:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[a-zA-Z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:alnum:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[0-9a-zA-Z]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:xdigit:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[0-9a-fA-F]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:cntrl:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;control characters — first 32 ASCII characters and 127th (DEL)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:punct:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;all the punctuation characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:graph:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[:alnum:]&lt;&#x2F;code&gt; and &lt;code&gt;[:punct:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:print:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;[:alnum:]&lt;&#x2F;code&gt;, &lt;code&gt;[:punct:]&lt;&#x2F;code&gt; and space&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:blank:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;space and tab characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[:space:]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;whitespace characters, same as &lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; From &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;grep&#x2F;manual&#x2F;grep.html#Character-Classes-and-Bracket-Expressions&quot;&gt;grep manual&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Their interpretation depends on the &lt;code&gt;LC_CTYPE&lt;&#x2F;code&gt; locale; for example, &lt;code&gt;[[:alnum:]]&lt;&#x2F;code&gt; means the character class of numbers and letters in the current locale.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;br&gt;
&lt;h2 id=&quot;backreferences&quot;&gt;Backreferences&lt;a class=&quot;zola-anchor&quot; href=&quot;#backreferences&quot; aria-label=&quot;Anchor link for: backreferences&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backreference, gives matched portion of Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;possible values: &lt;code&gt;\1&lt;&#x2F;code&gt;, &lt;code&gt;\2&lt;&#x2F;code&gt; up to &lt;code&gt;\9&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;represents entire matched string in the replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\0&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;equivalent to &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; in &lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Notes for &lt;code&gt;awk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;backreferences can be used only in replacement section, not allowed in search section.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;&#x2F;code&gt; and &lt;code&gt;gsub&lt;&#x2F;code&gt; functions allow only the &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; backreference.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gensub&lt;&#x2F;code&gt; function allows &lt;code&gt;\N&lt;&#x2F;code&gt; form of backreference as well.
&lt;ul&gt;
&lt;li&gt;but need to use &lt;code&gt;\\0&lt;&#x2F;code&gt;, &lt;code&gt;\\1&lt;&#x2F;code&gt;, &lt;code&gt;\\2&lt;&#x2F;code&gt; etc since they are specified using string syntax.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;sed-flags&quot;&gt;sed flags&lt;a class=&quot;zola-anchor&quot; href=&quot;#sed-flags&quot; aria-label=&quot;Anchor link for: sed-flags&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This section discusses flags (also known as modifiers) that change the regexp behavior. When used with regexp addressing:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flag&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match case insensitively&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;When used with substitution command:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flag&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;&#x2F;code&gt; or &lt;code&gt;I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match case insensitively&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;g&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;replace all occurrences instead of just the first match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;a number will cause only the &lt;em&gt;N&lt;&#x2F;em&gt;th match to be replaced&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Ng&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;replace from &lt;em&gt;N&lt;&#x2F;em&gt;th match to the end&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m&lt;&#x2F;code&gt; or &lt;code&gt;M&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiline mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt; will not match the newline character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; will match every line&#x27;s start and end locations (line separator is &lt;code&gt;\n&lt;&#x2F;code&gt; by default and NUL when &lt;code&gt;-z&lt;&#x2F;code&gt; option is used)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\`&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;always match the start of string irrespective of multiline mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;always match the end of string irrespective of multiline mode&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Flags are not supported by &lt;code&gt;grep&lt;&#x2F;code&gt; or &lt;code&gt;awk&lt;&#x2F;code&gt;. But these equivalent&#x2F;alternative options can be used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;&#x2F;code&gt; cli option in &lt;code&gt;grep&lt;&#x2F;code&gt; and setting &lt;code&gt;IGNORECASE&lt;&#x2F;code&gt; to non-zero value in &lt;code&gt;awk&lt;&#x2F;code&gt; will match case insensitively.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tolower&lt;&#x2F;code&gt; or &lt;code&gt;toupper&lt;&#x2F;code&gt; functions can be used in &lt;code&gt;awk&lt;&#x2F;code&gt; to convert input to single case.&lt;&#x2F;li&gt;
&lt;li&gt;you can also use character classes for small strings, for example &lt;code&gt;[cC][aA][tT]&lt;&#x2F;code&gt; will match &lt;code&gt;cat&lt;&#x2F;code&gt; case insensitively.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;&#x2F;code&gt; function in &lt;code&gt;awk&lt;&#x2F;code&gt; replaces only the first matching occurrence and &lt;code&gt;gsub&lt;&#x2F;code&gt; function is equivalent to using the &lt;code&gt;g&lt;&#x2F;code&gt; flag.&lt;&#x2F;li&gt;
&lt;li&gt;third argument of &lt;code&gt;gensub&lt;&#x2F;code&gt; function in &lt;code&gt;awk&lt;&#x2F;code&gt; supports replacing only the &lt;em&gt;N&lt;&#x2F;em&gt;th match as well as the &lt;code&gt;g&lt;&#x2F;code&gt; flag.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The behavior of &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; differs for &lt;em&gt;N&lt;&#x2F;em&gt;th match if the pattern can match empty string:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;[^,]*&#x2F;b&#x2F;2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
a,b,c,d,,f
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;[^,]*&#x2F;e&#x2F;5&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
a,,c,d,e,f

$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print gensub(&#x2F;[^,]*&#x2F;, &amp;quot;b&amp;quot;, 2)}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
ab,,c,d,,f
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a,,c,d,,f&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; awk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{print gensub(&#x2F;[^,]*&#x2F;, &amp;quot;e&amp;quot;, 5)}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
a,,ce,d,,f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;sed-case-conversion&quot;&gt;sed case conversion&lt;a class=&quot;zola-anchor&quot; href=&quot;#sed-case-conversion&quot; aria-label=&quot;Anchor link for: sed-case-conversion&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Escape sequence&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\E&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;indicates end of case conversion in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\l&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert next character to lowercase&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\u&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert next character to uppercase&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert following characters to lowercase, stops if &lt;code&gt;\U&lt;&#x2F;code&gt; or &lt;code&gt;\E&lt;&#x2F;code&gt; is found&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\U&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;convert following characters to uppercase, stops if &lt;code&gt;\L&lt;&#x2F;code&gt; or &lt;code&gt;\E&lt;&#x2F;code&gt; is found&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;h2 id=&quot;sed-delimiters&quot;&gt;sed delimiters&lt;a class=&quot;zola-anchor&quot; href=&quot;#sed-delimiters&quot; aria-label=&quot;Anchor link for: sed-delimiters&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&lt;&#x2F;code&gt; is idiomatically used as the delimiter.&lt;&#x2F;li&gt;
&lt;li&gt;Any character except &lt;code&gt;\&lt;&#x2F;code&gt; and newline character can also be used. For example: &lt;code&gt;s#&#x2F;home&#x2F;learnbyexample&#x2F;#~&#x2F;#&lt;&#x2F;code&gt; is same as &lt;code&gt;s&#x2F;\&#x2F;home\&#x2F;learnbyexample\&#x2F;&#x2F;~\&#x2F;&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For regexp addressing, the first delimiter has to be escaped. For example: &lt;code&gt;\;&#x2F;foo&#x2F;bar&#x2F;;p&lt;&#x2F;code&gt; is same as &lt;code&gt;&#x2F;foo\&#x2F;bar\&#x2F;&#x2F;p&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Debug woes: 1</title>
		<published>2021-05-29T00:00:00+00:00</published>
		<updated>2021-05-29T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/debug-woes-1/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/debug-woes-1/</id>
		<content type="html">&lt;p&gt;While answering &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;67703405&#x2F;4082052&quot;&gt;this SO question&lt;&#x2F;a&gt;, I ran into a debug misery. It took me an embarrassing amount of time and experiments to understand why.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simplified version of the problem. Can you spot the issue?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat ip.txt
a b c d
i j k l

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# Change only first two occurrences of spaces with tabs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$c=2; s&#x2F; &#x2F;\t&#x2F; while $c--&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
a       b       c d
i       j       k l

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# Wanted to generalize the solution to match one-or-more whitespaces
# But it doesn&amp;#39;t work!!!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ perl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$c=2; s&#x2F;\s+&#x2F;\t&#x2F; while $c--&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
a       b c d
i       j k l
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;details&gt;&lt;summary&gt;Click to view answer&lt;&#x2F;summary&gt;
The substitution works from start of the line for every iteration of the while loop. Tab is one of the whitespace characters, so after the first substitution, the tab gets matched for rest of the iterations.
&lt;&#x2F;details&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Perl one-liner articles</title>
		<published>2021-05-26T00:00:00+00:00</published>
		<updated>2021-05-26T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/mini/perl-oneliner-articles/" type="text/html"/>
		<id>https://learnbyexample.github.io/mini/perl-oneliner-articles/</id>
		<content type="html">&lt;p&gt;One of the feedback I got for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_perl_oneliners&quot;&gt;Perl one-liners ebook&lt;&#x2F;a&gt; was to showcase examples where Perl shines compared to other text processing tools.&lt;&#x2F;p&gt;
&lt;p&gt;Soon after, I got an invite to publish an article for the &lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;&quot;&gt;perldotcom&lt;&#x2F;a&gt; site. So, I wrote a two-part post highlighting use cases where Perl&#x27;s rich regular expression engine, built-in functions, extensive ecosystem and portability helps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-1&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.com&#x2F;article&#x2F;perl-one-liners-part-2&#x2F;&quot;&gt;Perl &#x2F; Unix One-liner Cage Match, Part 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Thanks to the editors for suggestions and improvements.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Paying my bills with &#x27;free&#x27; ebooks</title>
		<published>2021-03-03T00:00:00+00:00</published>
		<updated>2021-05-26T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/my-book-writing-experience/" type="text/html"/>
		<id>https://learnbyexample.github.io/my-book-writing-experience/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: Small victories are more precious when you have nothing. Instead of burning through my savings, I&#x27;m now adding to it. The relief is priceless.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;it-is-worth-it-for-me&quot;&gt;It is worth it (for me)&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-is-worth-it-for-me&quot; aria-label=&quot;Anchor link for: it-is-worth-it-for-me&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The section title is my response to this article &lt;a href=&quot;https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;2020&#x2F;09&#x2F;29&#x2F;is-book-writing-worth-it.html&quot;&gt;Writing a book: is it worth it?&lt;&#x2F;a&gt; that I saw on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24628549&quot;&gt;Hacker News&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For my unique circumstances, the decision to write ebooks has brought me financial stability, improved my mental health and gives me a sense of satisfaction. This could&#x27;ve come from any of my previous attempts to earn money, but ebooks is what worked out for me.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;book_writing.jpg&quot; alt=&quot;Book writing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Photo by &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;@bramnaus&quot;&gt;Bram Naus&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;n8Qb1ZAkK88&quot;&gt;Unsplash&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;how-it-all-started&quot;&gt;How it all started?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-it-all-started&quot; aria-label=&quot;Anchor link for: how-it-all-started&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I left my job in 2014 for various reasons. I didn&#x27;t have any plans for the future, just knew that I couldn&#x27;t work as an employee any more.&lt;&#x2F;p&gt;
&lt;p&gt;After enjoying my break, I had to try something to start earning again. I wrote an android gaming app, fantasized earning loads of money with an awesome work planner&#x2F;communicator software that never left my imaginations, tried a small stint with &lt;a href=&quot;https:&#x2F;&#x2F;krishworks.com&#x2F;&quot;&gt;a team making an educational app&lt;&#x2F;a&gt;, etc. I failed due to various reasons — didn&#x27;t try hard enough, quit early, didn&#x27;t fit my skills, wasn&#x27;t good at design&#x2F;marketing and so on. The educational app for example went on to become a success. Or perhaps, having saved enough to live out a few years without working meant I wasn&#x27;t under enough pressure to earn.&lt;&#x2F;p&gt;
&lt;p&gt;Among these failures, college workshops was the sole bread giver (and long way from supporting my modest living costs). My bachelor&#x27;s degree was in electronics and communications and I had worked in a semiconductor company. So I knew enough to teach students pursuing similar courses the basics for Linux command line, Vim, Perl, Bash scripting, etc. As reference materials, I used to provide ppt slides (when I still had a job). Now that I had loads of free time, I started expanding my knowledge. Came to know about sites like Stackoverflow&#x2F;Stackexchange&#x2F;Reddit&#x2F;etc. With newer and better materials to learn from, I created PDFs (using LibreOffice, which was pretty much the only option I knew about).&lt;&#x2F;p&gt;
&lt;p&gt;Another loss maker was getting a domain&#x2F;host to share these learning materials. Web development was too much for me and the (ugly) site didn&#x27;t get any love. In hindsight, one of the better turning points was learning about GitHub in 2016. I loved markdown&#x27;s nice output with syntax highlighting (and realized I was using it poorly in Reddit) and GitHub&#x27;s social aspect (stars, issues, etc) — plus I can use Vim! I manually converted my materials from LibreOffice to markdown (again, I didn&#x27;t know that tools like &lt;code&gt;pandoc&lt;&#x2F;code&gt; could&#x27;ve helped me). Just like any other skill, I was learning and getting better with every iteration. That was the year I learned Python (thanks to &lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;&quot;&gt;&lt;strong&gt;Al Sweigart&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&#x27;s free coupon for &amp;quot;Automate the Boring Stuff with Python&amp;quot; video course) and started conducting workshops for Python instead of Perl.&lt;&#x2F;p&gt;
&lt;p&gt;Being active on Stackoverflow and Reddit, I finally became proficient at CLI one-liners (late by 8 years, since it would have significantly helped in my role as a design and test engineer). I came across articles&#x2F;books on regular expressions and one-liners. I thought — I can do that too, plus I was really liking them. Thus began my epic &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&quot;&gt;Command Line Text Processing&lt;&#x2F;a&gt; repo, another big turning point in my journey as an author.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;encouraging-signs&quot;&gt;Encouraging signs&lt;a class=&quot;zola-anchor&quot; href=&quot;#encouraging-signs&quot; aria-label=&quot;Anchor link for: encouraging-signs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Over the course of ten months, I managed to complete the holy trinity of &lt;code&gt;grep&lt;&#x2F;code&gt;, &lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners. I promoted these tutorials on Reddit, Google+, LinkedIn and other social sites I knew at that time. The repo got hundreds of stars and more importantly, I got critical feedback. I was ecstatic, even if I was continuing to burn through my savings.&lt;&#x2F;p&gt;
&lt;p&gt;Then, I got to know about Hacker News (I think it was someone bragging about reaching front page). It took me a while to get used to Reddit, and HN was similarly alien to me. I posted a few links as a test and then I was &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=15549318&quot;&gt;brave enough to submit&lt;&#x2F;a&gt; my &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners post. I was refreshing HN anxiously for about half an hour or so. It got one vote and then other submissions pushed it away from new posts tab. Disappointed, I moved on. After sometime, I was checking traffic on my GitHub repo as usual, a habit I had picked up (all kinds of points, karma, likes, etc were so enticing). I noticed a HUGE spike in traffic and star count, the likes of which I had never seen before&#x2F;since. The last time I had felt that proud of my work was during my job. This comment made a big impression on me:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;These are the best stories on HN and why i subscribed here in the first place. I have often seen awk used so many times on SO but I&#x27;ve always put it up for something later to learn. Finally today I have some basic understanding of awk and this is really great stuff! I did get by with Perl but this is definitely more handy and the example approach to teaching it makes is super easy to understand!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After the euphoria had died down (about a week I guess), I was thinking about all the various kinds of posts I could make. And I was thinking how to use the repo popularity to bring in money. Long story short, I ended up adding donate buttons to my repos. This was before GitHub sponsors was announced. I wanted my materials to be freely available, so I wasn&#x27;t even thinking about creating paid only options. Despite adding more tutorials, getting featured in &lt;a href=&quot;https:&#x2F;&#x2F;rubyweekly.com&#x2F;issues&#x2F;389&quot;&gt;rubyweekly&lt;&#x2F;a&gt; and other newsletters, social sites, etc, all I got was a single recurring donation (which ended prematurely when that platform switched payment set up).&lt;&#x2F;p&gt;
&lt;p&gt;Another turning point came when a friend of mine was authoring a book and referred me for the reviewer role. Around that time, I had been converting &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AllenDowney&#x2F;ThinkPython2&quot;&gt;Think Python&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;ThinkRubyBuild&quot;&gt;Think Ruby&lt;&#x2F;a&gt; and simultaneously working on a separate Ruby tutorial. During the book review process, I was given a list of topics and asked if I was interested in writing a book (they were impressed by my existing repos). The topics were either beyond my knowledge or out of scope, and they weren&#x27;t interested in the repos I had already put up.&lt;&#x2F;p&gt;
&lt;p&gt;My friends were always suggesting me to write a book and my reply consistently had been that I wasn&#x27;t good enough to write one (the imposter syndrome hasn&#x27;t left me even now). The book review experience, existing repos, my tryst with Think Ruby, dwindling savings, etc changed my mindset enough to try. By then I was already familiar with Leanpub, so I knew self-publishing was an option. I picked a niche topic (&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;Ruby_Regexp&#x2F;&quot;&gt;Ruby Regexp&lt;&#x2F;a&gt;), &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;learned enough &lt;code&gt;pandoc&lt;&#x2F;code&gt; to produce a PDF&lt;&#x2F;a&gt; and published it even before the book review ended. It helped that I already had material as part of the Ruby tutorial I was working on. I still had to work a lot, since tutorial description was all bullet points.&lt;&#x2F;p&gt;
&lt;p&gt;I got only a few sales, but I had landed another review (video course for the same book) and was getting paid. So, I converted &#x27;Ruby Regexp&#x27; to &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt;. I made it free for a few days and posted on Reddit, HN and other social sites. HN submission didn&#x27;t get any traction, but fortunately &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Python&#x2F;comments&#x2F;aeusdu&#x2F;i_wrote_a_book_on_python_regular_expressions_it&#x2F;&quot;&gt;Reddit submission on &#x2F;r&#x2F;Python&#x2F;&lt;&#x2F;a&gt; was a big hit — thousands of free downloads and a few paid ones enough to cover 2 months of my expenses. I should mention now that I live alone, in outskirts of an Indian city, and my modest lifestyle costs about $150 per month. What works for me won&#x27;t necessarily suit others.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;a-dip-followed-by-sustainable-momentum&quot;&gt;A dip followed by sustainable momentum&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-dip-followed-by-sustainable-momentum&quot; aria-label=&quot;Anchor link for: a-dip-followed-by-sustainable-momentum&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Encouraged by the second release, I changed my focus from updating my GitHub repos to writing books. All those repos were now a fodder for book conversion. I picked up &lt;code&gt;grep&lt;&#x2F;code&gt; first and included &lt;code&gt;ripgrep&lt;&#x2F;code&gt; as well to keep it inline with the trend. Got decent sales from &lt;em&gt;free&lt;&#x2F;em&gt; promotions. HN submission tanked at first, but got good attention when I posted again after a revision. Then I published a new version of &#x27;Python re(gex)?&#x27; with significant changes and this HN submission got good views too. But note that these HN hits weren&#x27;t anywhere close to what my &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners post had received.&lt;&#x2F;p&gt;
&lt;p&gt;Writing &lt;code&gt;sed&lt;&#x2F;code&gt; took a lot out of me. Probably I was getting jaded again, juggling between workshops and ebooks. Then I had a medical issue. I didn&#x27;t even try promoting the &lt;code&gt;sed&lt;&#x2F;code&gt; book on HN. I managed to learn enough JS to write &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;JavaScript regexp&lt;&#x2F;a&gt;. Wasn&#x27;t anywhere close to what I got from the Python book.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;roller_coaster.jpg&quot; alt=&quot;Roller Coaster&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Photo by &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;@davidtrana&quot;&gt;David Traña&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;mmdchg5UPtQ&quot;&gt;Unsplash&lt;&#x2F;a&gt;&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, despite reasonable reception during free promotions, my ebooks weren&#x27;t still good enough to consistently pay my bills. Combined with workshops I was just about making my ends meet. I was losing interest and the medical issue was continuing. Still, without anything else to do, I finally started a book on &lt;code&gt;awk&lt;&#x2F;code&gt; one-liners. Things started getting better for a few months and then the pandemic hit.&lt;&#x2F;p&gt;
&lt;p&gt;Given the recent medical scare, pandemic fears and the trend of giveaways, I decided to open source my book contents. And, I made all my ebooks free to download indefinitely. Made a single bundle of all the 5 books I had published until then to make it easier to download in one shot. The reception was better than expected. Shortly after (last week of March), I published the &lt;code&gt;awk&lt;&#x2F;code&gt; book early by cutting corners like excluding exercises. All books bundle now had 6 entries. Again, the reception was much better than expected. I hadn&#x27;t made so many paid sales during a month ever before.&lt;&#x2F;p&gt;
&lt;p&gt;Encouraged by the success, I made another important decision. Instead of starting another book, I took up the task of updating all my books. I alloted a month or two for this task, but it took me more than 4 months in the end. It wasn&#x27;t that I had lot of new features to add. The feedback I had received over the past year and my own improving writing skills meant that I just couldn&#x27;t help updating the books to the best of my abilities. Somehow, lockdown and fear of the pandemic ended up improving my workflow.&lt;&#x2F;p&gt;
&lt;p&gt;Workshops weren&#x27;t going to come my way anytime soon, but ebook sales for about 6 months averaged $200+ per month. For the first time since leaving my job, I was saving money!!! During this period all my books were free to download, in addition to the markdown source being available from GitHub repos. I even managed to create EPUB and web versions for my ebooks. The web version generated using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;mdBook&quot;&gt;mdBook&lt;&#x2F;a&gt; was much better than my attempts with wordpress all those years ago, but to be fair I hadn&#x27;t known enough about formatting for coding books.&lt;&#x2F;p&gt;
&lt;p&gt;After finishing this marathon revision task, I reverted PDF&#x2F;EPUB versions to be a paid option again. Since then, I&#x27;ve managed to write three more books. I did Perl and Ruby one-liners (as part of the ongoing conversion of the CLI text processing repo) despite knowing sales won&#x27;t be good enough to keep up the momentum. Then I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;&quot;&gt;Python intro&lt;&#x2F;a&gt; book for those already familiar with programming basics. Published last month, sales are much lesser than I expected. Given Python is now 30 years old and there&#x27;s no shortage of Python books for beginners, I shouldn&#x27;t be surprised though. I&#x27;m probably grumpy because it took a month more than expected even though I already had decent material from my workshops. Anyway, my main motivation was to improve my Python knowledge and it did serve that purpose. As a bonus, I just got started with workshops again, conducted online (a first for me). The book is already proving useful as a handy reference for me as well as the students.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback-and-criticism&quot;&gt;Feedback and Criticism&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback-and-criticism&quot; aria-label=&quot;Anchor link for: feedback-and-criticism&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s some of the feedback I&#x27;ve received over the past two years.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grammatical mistakes. Missing &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;an&lt;&#x2F;code&gt; and &lt;code&gt;the&lt;&#x2F;code&gt; articles were particularly jarring for the readers. If you couldn&#x27;t tell from reading &lt;em&gt;this&lt;&#x2F;em&gt; article (heh) that English isn&#x27;t my native language, I&#x27;ll consider that I&#x27;ve improved a lot.&lt;&#x2F;li&gt;
&lt;li&gt;Some readers stated that they didn&#x27;t bother checking out my books because the covers are so bad. I finally got a cover done by an artist for the &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;&quot;&gt;Python intro book&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For the regexp books, a few readers said my introductions were light on content. So during the marathon book updates I did last year, I managed to add more details. I feel there&#x27;s still plenty of room for improvement.&lt;&#x2F;li&gt;
&lt;li&gt;My comprehension is kinda average and it works better whenever I manage to create code snippets to prove or disprove my understanding. So, my books are heavily example oriented. I&#x27;ve received feedback that there are too many examples, explanations aren&#x27;t sufficient, etc. I&#x27;m trying to improve on this count, but I doubt I can change my natural writing style.&lt;&#x2F;li&gt;
&lt;li&gt;A few readers wanted more exercises, which I was happy to oblige. It took me a while to accept that I should provide solutions as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I did get a few negative feedback (ones I consider weren&#x27;t constructive in nature). One such feedback affected me a lot, despite the encouraging sales for the second book. Over time, I&#x27;ve adapted but I&#x27;m still afraid of seeing one whenever I promote my books.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;self-publishing-experience&quot;&gt;Self publishing experience&lt;a class=&quot;zola-anchor&quot; href=&quot;#self-publishing-experience&quot; aria-label=&quot;Anchor link for: self-publishing-experience&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t have a personal experience with traditional publishing (other than the two review opportunities). After the initial success of &#x27;Python re(gex)?&#x27; book, I was happy to stay being self published. When there was a dip, I did consider it would be nice to have the backing of a traditional publisher and a chance to improve the contents of my books.&lt;&#x2F;p&gt;
&lt;p&gt;What I like about self published:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I can give away free copies whenever I want, change pricing, share the source code, put up free web version of the books, etc.
&lt;ul&gt;
&lt;li&gt;I&#x27;m aware of a few publishers allowing authors to put up free web copies, but it isn&#x27;t universal.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;I can push updates easily and inform the readers as well.&lt;&#x2F;li&gt;
&lt;li&gt;No deadlines, other than self imposed ones. This is both good and bad. The good thing is that I can take my time. The bad thing is that the reduced pressure leads to longer schedule. I spend a lot of time on social media, reading fiction, watching entertainment, etc. The lockdown marathon did improve my average working hours, but there&#x27;s still a lot of room for improvement.&lt;&#x2F;li&gt;
&lt;li&gt;I am not restricted by guidelines set by a publisher regarding chapter structure, images, exercises, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What I feel would improve with traditional publishing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cover image&lt;&#x2F;li&gt;
&lt;li&gt;PDF&#x2F;EPUB quality&lt;&#x2F;li&gt;
&lt;li&gt;Content quality, especially grammar&lt;&#x2F;li&gt;
&lt;li&gt;Audience reach&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not sure how my earnings would be affected. On the one hand, I get minimum 80% on book sales. On the other hand, I&#x27;d probably reach a wider audience with traditional publishing. I did receive a few offers when my promotional posts were trending. One of the offer (for &#x27;Python re(gex)?&#x27; ebook) had a joining bonus and initial advance — both combined was less than what I had already earned. But if they had extended the offer for other books as well, it would&#x27;ve been a much more tempting deal.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, I&#x27;m happy with status quo. Always free web versions and free PDF&#x2F;EPUB promotional sales kinda solves my donation problem before I started selling ebooks — I get paid and readers have a way to get the materials for free. I&#x27;m also inspired by FOSS products I use and authors like Al Sweigart and Allen B. Downey who give away quality learning resources for free.&lt;&#x2F;p&gt;
&lt;p&gt;That said, I wish I could improve my marketing skills. Or, somehow someone likes my books so much that their review attracts significant attention and my sales increase as a result. I&#x27;ve also considered trying out affiliates, but haven&#x27;t even created a list of people to contact yet. I don&#x27;t have analytics set up on Leanpub, my blog, web versions of my books, etc. Based on analytics that is available by default on GitHub and Gumroad, I do see a few links from schools and universities. I wish they would contact me, so that I can help if needed and improve my book contents based on their experiences.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;leanpub-vs-gumroad&quot;&gt;Leanpub vs Gumroad&lt;a class=&quot;zola-anchor&quot; href=&quot;#leanpub-vs-gumroad&quot; aria-label=&quot;Anchor link for: leanpub-vs-gumroad&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I started with Leanpub since I had seen a few posts from self published authors using this platform. By the time I had published the second book I got to know about Gumroad and was attracted by the pricing&#x2F;payout structure. From then on, I have published on both platforms.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what I like most about both these platforms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I can change pricing (including free option) and book contents any number of times&lt;&#x2F;li&gt;
&lt;li&gt;I can allow users to pay &lt;em&gt;more&lt;&#x2F;em&gt; than the product price, which is how I get paid during &lt;em&gt;free&lt;&#x2F;em&gt; promotional sales&lt;&#x2F;li&gt;
&lt;li&gt;I can inform readers whenever I update my books&lt;&#x2F;li&gt;
&lt;li&gt;I can create bundles&lt;&#x2F;li&gt;
&lt;li&gt;They handle collection of VAT (and other such fees)&lt;&#x2F;li&gt;
&lt;li&gt;Their payout options work for me in India&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s some differences and &lt;em&gt;my&lt;&#x2F;em&gt; opinions on some of their features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Gumroad&#x27;s pricing structure is better. If you have a following like &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;b0rk&quot;&gt;Julia Evans&lt;&#x2F;a&gt;, pricing would make a huge difference&lt;&#x2F;li&gt;
&lt;li&gt;Gumroad gives analytics for free&lt;&#x2F;li&gt;
&lt;li&gt;Gumroad&#x27;s email notification is opt-out compared to opt-in for Leanpub. Opt-in is better for readers, but in my experience less than 10% sign up and thus miss out when I want to send them book updates&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub payout delay is 45-75 days, Gumroad is 7-14 days (or instant in some cases)&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s bundle feature is better since it doesn&#x27;t require a new cover and files are automatically picked based on the links provided. In Gumroad, it is essentially a new product, but it does allow to manually pick files from existing ones. Also, Leanpub allows bundling with another author (which I have used and given me decent sales)&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s product page and UI is better. The sliding scale (along with information on author&#x27;s share) to pick a price is clearer than Gumroad&#x27;s manual price entry. And I don&#x27;t like that Gumroad places the minimum price information away from the box where the user enters a price. On Leanpub, all of these are shown together and reduces confusion&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s product page has always ranked higher in search results in my experience&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub&#x27;s 45-day Guarantee and Sample chapters as part of the product page makes it easier for readers to take a risk&lt;&#x2F;li&gt;
&lt;li&gt;Leanpub has &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;newsletters&quot;&gt;weekly&#x2F;monthly sale newsletters&lt;&#x2F;a&gt; in which you could get featured. This has brought me significant earnings in the past few months. If you enable an option, Gumroad would promote your product too (for 10% extra fee) but this has given me very few sales compared to Leanpub&#x27;s newsletter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;leanpub_price_ui.png&quot; alt=&quot;Pricing UI on Leanpub&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Pricing UI on Leanpub&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;gumroad_price_ui.png&quot; alt=&quot;Pricing UI on Gumroad&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;i&gt;Pricing UI on Gumroad&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;pandoc-and-mdbook&quot;&gt;pandoc and mdbook&lt;a class=&quot;zola-anchor&quot; href=&quot;#pandoc-and-mdbook&quot; aria-label=&quot;Anchor link for: pandoc-and-mdbook&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I picked &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;&quot;&gt;pandoc&lt;&#x2F;a&gt; to generate PDF from GitHub style markdown, as it seemed the most popular tool for this purpose. The default output is good enough, but I wanted to customize a lot of things. With help from documentation and various Stackoverflow&#x2F;Stackexchange threads, I was able to generate an output to my liking. I didn&#x27;t know about templates though, otherwise I could have researched about them and re-used solutions from others. I wrote a blog post about my learnings, visit &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;Customizing pandoc to generate beautiful pdf and epub from markdown&lt;&#x2F;a&gt; if you are interested.&lt;&#x2F;p&gt;
&lt;p&gt;Some readers wanted EPUB versions too. I thought it made sense for reading from mobile, but my own experience with this format on desktop was quite disappointing. Only later did I learn that I wasn&#x27;t using a proper EPUB reader for technical books. Which is why I didn&#x27;t realize that the default output from &lt;code&gt;pandoc&lt;&#x2F;code&gt; for EPUB was also good enough. During the revision marathon, I finally created EPUB versions too. I&#x27;d say I am still a beginner, but I did learn enough CSS and LaTeX to customize EPUB and PDF generation with &lt;code&gt;pandoc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pandoc&lt;&#x2F;code&gt; has its own enhanced version of markdown, which has a lot of nifty features for ebooks. But I chose to stick with GitHub style markdown. And it came in handy when I wanted to re-use book material for blog posts, generating web versions of the book with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;mdBook&quot;&gt;mdbook&lt;&#x2F;a&gt; and so on. After I had decided to open source my books, I also wanted to make a web version that feels like a book instead of just the single page markdown source from the GitHub repos. I would&#x27;ve probably used Gitbook if they hadn&#x27;t moved away from the legacy version. I came across &lt;code&gt;mdbook&lt;&#x2F;code&gt; as an alternate for Gitbook and I&#x27;m glad I did.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;future-plans&quot;&gt;Future plans&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-plans&quot; aria-label=&quot;Anchor link for: future-plans&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I have certainly improved a lot as a writer since I first published my book in late 2018. But after 9 books, I&#x27;m finding it a lot more difficult to motivate myself to keep writing. See also &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20212090&quot;&gt;HN discussion: Writing a book, still the same pain 15 years later&lt;&#x2F;a&gt; for another example.&lt;&#x2F;p&gt;
&lt;p&gt;I have plans to publish at least one more book in 2021 and revise my existing books (not comprehensive, but a few items have cropped up). I hope the current momentum can extend enough to cover my expenses for this year at least. Beyond that, I think I will write more books, but I&#x27;ll have to mix it up with other things (such as video courses, interactive courses, freelancing, etc) to keep myself motivated. I just hope that this time I will be able to pick an alternative quickly.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#resources&quot; aria-label=&quot;Anchor link for: resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been asked a few times regarding my experiences as an author (especially self publishing) and resources I&#x27;ve used. That was my primary intention in writing this blog post. I thought I&#x27;d add a bit of background as well, not the multi-section essay I ended up with. Anyway, here&#x27;s some links that I&#x27;ve bookmarked related to book writing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Authors sharing their experiences&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jeffgeerling.com&#x2F;blog&#x2F;2020&#x2F;self-publishing-and-2nd-edition-ansible-devops&quot;&gt;Jeff Geerling&#x27;s self-publishing experience&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;#on-writing-comics---zines&quot;&gt;Julia Evans&#x27;s articles on writing comics&#x2F;zines&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2020&#x2F;10&#x2F;28&#x2F;a-few-things-i-ve-learned-about-email-marketing&#x2F;&quot;&gt;Julia Evans&#x27;s email marketing experience&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.swyx.io&#x2F;marketing-yourself&#x2F;&quot;&gt;Shawn Wang&#x27;s article: How to Market Yourself&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andregarzia.com&#x2F;2021&#x2F;04&#x2F;writing-a-technical-book.html&quot;&gt;Andre Alves Garzia&#x27;s article: Writing a Technical Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23818859&quot;&gt;HN discussion: Writing a software book and making over $100k&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Writing skills&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20070558&quot;&gt;HN discussion: Tips for Writing a Technical Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=22283919&quot;&gt;HN discussion: Learning technical writing using the engineering method&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23281568&quot;&gt;HN discussion: How to write a programming book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jenniferlynparsons&#x2F;awesome-writing&quot;&gt;awesome-writing: list of information to help developers write better, kinder, more helpful documentation and learning materials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joshuacc&#x2F;prose-for-programmers&quot;&gt;A book to help software developers write better prose (WIP)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Tools and Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;Customizing pandoc to generate beautiful pdf and epub from markdown&lt;&#x2F;a&gt; — my own blog post, includes resource links for similar articles and tools other than &lt;code&gt;pandoc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LisaDziuba&#x2F;Awesome-Design-Tools&quot;&gt;List of awesome design tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sw-yx&#x2F;launch-cheatsheet&#x2F;&quot;&gt;launch-cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;a-parting-advice&quot;&gt;A parting advice&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-parting-advice&quot; aria-label=&quot;Anchor link for: a-parting-advice&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Don&#x27;t quit easily!&lt;&#x2F;p&gt;
&lt;br&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>100 Page Python Intro book announcement</title>
		<published>2021-02-10T00:00:00+00:00</published>
		<updated>2021-07-30T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/100-page-python-intro-book-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/100-page-python-intro-book-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I just published my ebook titled &amp;quot;&lt;strong&gt;100 Page Python Intro&lt;&#x2F;strong&gt;&amp;quot;. This book is a short, introductory guide for the Python programming language. This book is well suited:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As a reference material for Python beginner workshops&lt;&#x2F;li&gt;
&lt;li&gt;If you have prior experience with another programming language&lt;&#x2F;li&gt;
&lt;li&gt;If you want a complement resource after reading a Python basics book, watching a video course, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;ebook-links&quot;&gt;Ebook links&lt;a class=&quot;zola-anchor&quot; href=&quot;#ebook-links&quot; aria-label=&quot;Anchor link for: ebook-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can get &lt;strong&gt;PDF&#x2F;EPUB&lt;&#x2F;strong&gt; versions from Gumroad or Leanpub using the links given below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;100pagepythonintro&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;100pagepythonintro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;100pagepythonintro&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;100pagepythonintro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;python_intro.png&quot; alt=&quot;100 Page Python Intro book cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;Cover art: &lt;a href=&quot;https:&#x2F;&#x2F;ko-fi.com&#x2F;profetessaoscura&quot;&gt;Ilsa Olson&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;web-version&quot;&gt;Web version&lt;a class=&quot;zola-anchor&quot; href=&quot;#web-version&quot; aria-label=&quot;Anchor link for: web-version&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;You can also read the book online here: &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;introduction.html&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;100_page_python_intro&#x2F;introduction.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;github-repo&quot;&gt;GitHub repo&lt;a class=&quot;zola-anchor&quot; href=&quot;#github-repo&quot; aria-label=&quot;Anchor link for: github-repo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&lt;&#x2F;a&gt; repo has program&#x2F;example files, markdown source and other details about the book.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-of-contents&quot; aria-label=&quot;Anchor link for: table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Numeric data types&lt;&#x2F;li&gt;
&lt;li&gt;Strings and user input&lt;&#x2F;li&gt;
&lt;li&gt;Defining functions&lt;&#x2F;li&gt;
&lt;li&gt;Control structures&lt;&#x2F;li&gt;
&lt;li&gt;Importing and creating modules&lt;&#x2F;li&gt;
&lt;li&gt;Installing modules and Virtual environments&lt;&#x2F;li&gt;
&lt;li&gt;Exception handling&lt;&#x2F;li&gt;
&lt;li&gt;Debugging&lt;&#x2F;li&gt;
&lt;li&gt;Testing&lt;&#x2F;li&gt;
&lt;li&gt;Tuple and Sequence operations&lt;&#x2F;li&gt;
&lt;li&gt;List&lt;&#x2F;li&gt;
&lt;li&gt;Mutability&lt;&#x2F;li&gt;
&lt;li&gt;Dict&lt;&#x2F;li&gt;
&lt;li&gt;Set&lt;&#x2F;li&gt;
&lt;li&gt;Text processing&lt;&#x2F;li&gt;
&lt;li&gt;Comprehensions and Generator expressions&lt;&#x2F;li&gt;
&lt;li&gt;Dealing with files&lt;&#x2F;li&gt;
&lt;li&gt;Executing external commands&lt;&#x2F;li&gt;
&lt;li&gt;Command line arguments&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;br&gt;
&lt;h2 id=&quot;motivation-and-faq&quot;&gt;Motivation and FAQ&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation-and-faq&quot; aria-label=&quot;Anchor link for: motivation-and-faq&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been conducting a few Python introduction workshops for college students and faculty for the past four years (which came to a premature end thanks to the pandemic). These students were already familiar with another programming languages such as &lt;code&gt;C&lt;&#x2F;code&gt;, &lt;code&gt;Java&lt;&#x2F;code&gt;, etc. I used to provide my notes in PDF format as a workshop reference material, further reading resources, etc. After I started writing a book titled &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;&quot;&gt;&lt;strong&gt;Practice Python Projects&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I realized I&#x27;d be better served by improving my Python knowledge first. What better way to do it than writing a book? And it did teach me a lot of things, some of the highlights being:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exploring &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;glossary.html&quot;&gt;docs.python: Glossary&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;You cannot have mutable objects as a &lt;code&gt;set&lt;&#x2F;code&gt; element!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;startswith()&lt;&#x2F;code&gt; and &lt;code&gt;endswith()&lt;&#x2F;code&gt; string methods support &lt;code&gt;tuple&lt;&#x2F;code&gt; argument for testing multiple substrings&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;using&#x2F;cmdline.html&quot;&gt;Command line options&lt;&#x2F;a&gt; like &lt;code&gt;-q&lt;&#x2F;code&gt;, &lt;code&gt;-B&lt;&#x2F;code&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Why is it called &lt;strong&gt;100 Page Python Intro&lt;&#x2F;strong&gt; when it has more than 100 pages?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors — Leon Bambrick&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The material I was using for my workshops was 56 pages. I had more chapters to add, but I thought it would be a struggle to reach 100 pages, instead of overshooting the goal in the end. The measurement also depends on a few factors. The main content will be less than 100 pages if I reduce the font size from 12 to 11, exclude cover, TOC, Preface, etc.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;a class=&quot;zola-anchor&quot; href=&quot;#feedback&quot; aria-label=&quot;Anchor link for: feedback&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hope you find it useful and fun to learn Python. As always, I&#x27;d highly appreciate your feedback. Please do let me know if you spot any error or typo.&lt;&#x2F;p&gt;
&lt;p&gt;Issue Manager: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;issues&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;issues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;E-mail: &lt;code&gt;learn by example.net@gmail.com&lt;&#x2F;code&gt; (without the spaces)&lt;&#x2F;p&gt;
&lt;p&gt;Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Multiline fixed string search and replace with cli tools</title>
		<published>2020-11-27T00:00:00+00:00</published>
		<updated>2021-08-27T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/multiline-search-and-replace/" type="text/html"/>
		<id>https://learnbyexample.github.io/multiline-search-and-replace/</id>
		<content type="html">&lt;p&gt;This post shows how you can use &lt;code&gt;ripgrep&lt;&#x2F;code&gt;, &lt;code&gt;perl&lt;&#x2F;code&gt; and &lt;code&gt;sd&lt;&#x2F;code&gt; commands to perform multiline fixed string search and replace operations from the command line. Solution with &lt;code&gt;GNU sed&lt;&#x2F;code&gt; is also discussed, along with its limitations.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;fixed-string-matching&quot;&gt;Fixed string matching&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixed-string-matching&quot; aria-label=&quot;Anchor link for: fixed-string-matching&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The below sample input file will be used in the examples in this post.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;ripgrep&quot;&gt;ripgrep&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep&quot; aria-label=&quot;Anchor link for: ripgrep&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt; supports &lt;code&gt;-U&lt;&#x2F;code&gt; option to allow multiline matching. Use &lt;code&gt;-F&lt;&#x2F;code&gt; option to turn off regexp matching, i.e. treat the search string literally. In &lt;code&gt;bash&lt;&#x2F;code&gt; shell (and likely most other shells), you can press enter key to insert literal newline character for quoted values. When you do so, the next line starts with &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; and a space character. This isn&#x27;t shown in the examples below to make it easier to copy-paste the commands.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ rg -UF &amp;#39;like . () * [] $ {}
^ + ? \ and&amp;#39; ip.txt
4:like . () * [] $ {}
5:^ + ? \ and &amp;#39; and so on.

# -l option shows only filename instead of all the matching lines
$ rg -lUF &amp;#39;like . () * [] $ {}
^ + ? \ and&amp;#39; ip.txt
ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll have an issue if your search string itself contains single quote characters. Avoid using double quotes as a workaround, as that has its own set of special characters. You can work around by concatenating multiple strings next to each other, along with escaped single quote characters as needed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# -N option disables line number prefix
$ rg -NUF &amp;#39;like . () * [] $ {}
^ + ? \ and &amp;#39;\&amp;#39;&amp;#39; and&amp;#39; ip.txt
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If your search string starts with &lt;code&gt;-&lt;&#x2F;code&gt; character, you&#x27;ll have to use &lt;code&gt;--&lt;&#x2F;code&gt; before the search argument.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ rg -NUF -- &amp;#39;-string multiline
search&amp;#39; ip.txt
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;perl&quot;&gt;perl&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl&quot; aria-label=&quot;Anchor link for: perl&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can use &lt;code&gt;-0777&lt;&#x2F;code&gt; option with &lt;code&gt;perl&lt;&#x2F;code&gt; to slurp the entire input as a single string. Another advantage with &lt;code&gt;perl&lt;&#x2F;code&gt; is that you can use files to pass the search and replace strings. Thus, you don&#x27;t have to worry about any character that may clash with shell metacharacters. See my &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_perl_oneliners&#x2F;&quot;&gt;Perl one-liners cookbook&lt;&#x2F;a&gt; if you are not familiar with using &lt;code&gt;perl&lt;&#x2F;code&gt; from the command line.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat search_1.txt
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.

# display filename if the given search string matches
$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=$_ :
                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $ARGV&amp;#39; search_1.txt ip.txt
ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, you&#x27;ll have to make sure the file doesn&#x27;t end with a newline if you are providing partial lines for searching, or take care of it within the &lt;code&gt;perl&lt;&#x2F;code&gt; script.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat search_2.txt
-string multiline
search

# no output because there&amp;#39;s a newline at the end of search_2.txt file
$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=$_ :
                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $ARGV&amp;#39; search_2.txt ip.txt

# this will remove newline at the end of file before assigning to $s
$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=s&#x2F;\n\z&#x2F;&#x2F;r :
                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $ARGV&amp;#39; search_2.txt ip.txt
ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By default, &lt;code&gt;ripgrep&lt;&#x2F;code&gt; gives entire matching lines. To get rest of the line with &lt;code&gt;perl&lt;&#x2F;code&gt;, you&#x27;ll have to explicitly add a pattern around the search string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# $&amp;amp; variable has the entire matching portion
$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=s&#x2F;\n\z&#x2F;&#x2F;r :
                  &#x2F;\Q$s&#x2F; &amp;amp;&amp;amp; say $&amp;amp;&amp;#39; search_2.txt ip.txt
-string multiline
search

# use &amp;#39;say $&amp;amp; while &#x2F;.*\Q$s\E.*&#x2F;g&amp;#39; if there are multiple matches
$ perl -0777 -nE &amp;#39;!$#ARGV ? $s=s&#x2F;\n\z&#x2F;&#x2F;r :
                  &#x2F;.*\Q$s\E.*&#x2F; &amp;amp;&amp;amp; say $&amp;amp;&amp;#39; search_2.txt ip.txt
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;fixed-string-substitution&quot;&gt;Fixed string substitution&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixed-string-substitution&quot; aria-label=&quot;Anchor link for: fixed-string-substitution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ripgrep-1&quot;&gt;ripgrep&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep-1&quot; aria-label=&quot;Anchor link for: ripgrep-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;ripgrep&lt;&#x2F;code&gt; also supports replacing matched string with something else using the &lt;code&gt;-r&lt;&#x2F;code&gt; option. By default, you&#x27;ll see only matched lines in the output. Use &lt;code&gt;--passthru&lt;&#x2F;code&gt; option to display all the input lines, even if they do not match the given search string. See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;substitution-with-ripgrep&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; for more details about the &lt;code&gt;-r&lt;&#x2F;code&gt; option and various ways you can use it for substitution requirements.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ rg --passthru -NUF &amp;#39;like . () * [] $ {}
^ + ? \ and&amp;#39; -r &amp;#39;====
----
====&amp;#39; ip.txt
This is a multiline
sample input with lots
of special characters
====
----
==== &amp;#39; and so on.
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apart from having to workaround single quote, you&#x27;ll have to use &lt;code&gt;$$&lt;&#x2F;code&gt; instead of &lt;code&gt;$&lt;&#x2F;code&gt; as it is used for backreferences in the replacement section.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &amp;#39;sample input&amp;#39; | rg --passthru -F &amp;#39;in&amp;#39; -r &amp;#39;$a&amp;#39;
sample put
$ echo &amp;#39;sample input&amp;#39; | rg --passthru -F &amp;#39;in&amp;#39; -r &amp;#39;$$a&amp;#39;
sample $aput
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;perl-1&quot;&gt;perl&lt;a class=&quot;zola-anchor&quot; href=&quot;#perl-1&quot; aria-label=&quot;Anchor link for: perl-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;With &lt;code&gt;perl&lt;&#x2F;code&gt;, you can use files for both search and replace strings. And, you can easily choose to replace first or all occurrences, unlike &lt;code&gt;ripgrep&lt;&#x2F;code&gt; where it always replaces all the matches.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat replace.txt
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
=====================

$ perl -0777 -ne &amp;#39;$#ARGV==1 ? $s=$_ : $#ARGV==0 ? $r=$_ :
                  print s&#x2F;\Q$s&#x2F;$r&#x2F;gr&amp;#39; search_1.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
=====================
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As seen before, you&#x27;ll have to remove newline from search string for partial line matching.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# use $r=s&#x2F;\n\z&#x2F;&#x2F;r to avoid trailing newline from replace.txt
$ perl -0777 -ne &amp;#39;$#ARGV==1 ? $s=s&#x2F;\n\z&#x2F;&#x2F;r : $#ARGV==0 ? $r=$_ :
                  print s&#x2F;\Q$s&#x2F;$r&#x2F;gr&amp;#39; search_2.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.
This post shows how
you can do fixed
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
=====================
 with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;sd&quot;&gt;sd&lt;a class=&quot;zola-anchor&quot; href=&quot;#sd&quot; aria-label=&quot;Anchor link for: sd&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chmln&#x2F;sd&quot;&gt;sd&lt;&#x2F;a&gt; supports fixed string and Rust regexp based substitution. Unlike &lt;code&gt;ripgrep&lt;&#x2F;code&gt;, &lt;code&gt;-s&lt;&#x2F;code&gt; option for fixed string will apply to both search and replacement sections. &lt;code&gt;sd&lt;&#x2F;code&gt; does in-place editing for file inputs by default, you can use &lt;code&gt;-p&lt;&#x2F;code&gt; to preview results on the terminal. Multiline matching is automatically performed by default.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &amp;#39;sample input&amp;#39; | sd -s &amp;#39;in&amp;#39; &amp;#39;$a&amp;#39;
sample $aput

$ sd -ps &amp;#39;like . () * [] $ {}
^ + ? \ and&amp;#39; &amp;#39;====
----
====&amp;#39; ip.txt
This is a multiline
sample input with lots
of special characters
====
----
==== &amp;#39; and so on.
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;saving-file-contents-to-a-variable&quot;&gt;Saving file contents to a variable&lt;a class=&quot;zola-anchor&quot; href=&quot;#saving-file-contents-to-a-variable&quot; aria-label=&quot;Anchor link for: saving-file-contents-to-a-variable&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Trailing newlines and ASCII NUL characters will be lost if you wish to save contents of a file as &lt;code&gt;bash&lt;&#x2F;code&gt; variables using &lt;code&gt;var=$(&amp;lt; filename)&lt;&#x2F;code&gt; command. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;22607352&#x2F;4082052&quot;&gt;stackoverflow: pitfalls of reading file into shell variable&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ printf &amp;#39;\na\0b\n123\n\n\n\n\n\n\n\n&amp;#39; &amp;gt; t1
$ a=$(&amp;lt; t1)

# NUL character is lost after the assignment
# all the trailing newlines are lost as well
$ printf &amp;#39;%b&amp;#39; &amp;quot;$a&amp;quot; | cat -A
$
ab$
123
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;ripgrep-2&quot;&gt;ripgrep&lt;a class=&quot;zola-anchor&quot; href=&quot;#ripgrep-2&quot; aria-label=&quot;Anchor link for: ripgrep-2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If your search string doesn&#x27;t have multiple trailing newlines or ASCII NUL characters, then you can save file contents to variables and then pass them to &lt;code&gt;ripgrep&lt;&#x2F;code&gt;. Single trailing newline will not normally cause an issue for searching operations as &lt;code&gt;ripgrep&lt;&#x2F;code&gt; will append a newline while displaying results anyway. If you want to make sure input file also contains the trailing newline, then you can manually concatenate a newline character to the search string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=$(&amp;lt; search_1.txt)
# use &amp;quot;$s&amp;quot;$&amp;#39;\n&amp;#39; if you want to match trailing newline as well
$ rg -NUF &amp;quot;$s&amp;quot; ip.txt
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.

# use -- if the search string starts with - character
$ s=$(&amp;lt; search_2.txt)
$ rg -NUF -- &amp;quot;$s&amp;quot; ip.txt
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For substitution operations, you&#x27;ll have to preprocess the replacement file to replace &lt;code&gt;$&lt;&#x2F;code&gt; with &lt;code&gt;$$&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=$(&amp;lt; search_1.txt)
$ r=$(sed &amp;#39;s&#x2F;\$&#x2F;$$&#x2F;g&amp;#39; replace.txt)

# here, removal of trailing newline doesn&amp;#39;t cause an issue,
# as it evens out between search and replace strings
$ rg --passthru -NUF &amp;quot;$s&amp;quot; -r &amp;quot;$r&amp;quot; ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
=====================
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, partial line has to be matched. So, &lt;code&gt;$()&lt;&#x2F;code&gt; assignment works well for the search string. If the trailing newline of the replacement string isn&#x27;t needed, then &lt;code&gt;$()&lt;&#x2F;code&gt; assignment again is good enough. Otherwise, you can modify the replacement string as &lt;code&gt;-r &amp;quot;$r&amp;quot;$&#x27;\n&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=$(&amp;lt; search_2.txt)
$ r=$(sed &amp;#39;s&#x2F;\$&#x2F;$$&#x2F;g&amp;#39; replace.txt)

$ rg --passthru -NUF -r &amp;quot;$r&amp;quot; -- &amp;quot;$s&amp;quot; ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.
This post shows how
you can do fixed
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
===================== with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;sd-1&quot;&gt;sd&lt;a class=&quot;zola-anchor&quot; href=&quot;#sd-1&quot; aria-label=&quot;Anchor link for: sd-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned before, &lt;code&gt;-s&lt;&#x2F;code&gt; option for &lt;code&gt;sd&lt;&#x2F;code&gt; applies to both search and replacement sections. So, the usage is lot simpler compared to &lt;code&gt;ripgrep&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# -- is needed here because replace.txt starts with - character
$ sd -ps -- &amp;quot;$(&amp;lt; search_1.txt)&amp;quot; &amp;quot;$(&amp;lt; replace.txt)&amp;quot; ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
=====================
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;gnu-sed&quot;&gt;GNU sed&lt;a class=&quot;zola-anchor&quot; href=&quot;#gnu-sed&quot; aria-label=&quot;Anchor link for: gnu-sed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To follow a similar approach with &lt;code&gt;GNU sed&lt;&#x2F;code&gt;, you&#x27;ll have to preprocess the strings to escape metacharacters. Assuming input doesn&#x27;t have ASCII NUL characters, you can use &lt;code&gt;-z&lt;&#x2F;code&gt; option to slurp entire input as a single string.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example for multiline search.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# escape all BRE metacharacters
# replace literal newlines with \n
$ s=$(sed -z &amp;#39;s#[[^$*.\&#x2F;]#\\&amp;amp;#g; s&#x2F;\n&#x2F;\\n&#x2F;g&amp;#39; search_1.txt)

# since newlines are replaced with \n,
# trailing newlines will be preserved here
$ echo &amp;quot;$s&amp;quot;
like \. () \* \[] \$ {}\n\^ + ? \\ and &amp;#39; and so on\.\n

# display filename if input matches the given multiline search string
# tr is used to change NUL character after filename to newline
$ sed -nz &amp;#39;&#x2F;&amp;#39;&amp;quot;$s&amp;quot;&amp;#39;&#x2F;F&amp;#39; ip.txt | tr &amp;#39;\0&amp;#39; &amp;#39;\n&amp;#39;
ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s an example for multiline substitution.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# last newline is removed here to allow partial line matching
$ s=$(sed -z &amp;#39;s#[[^$*.\&#x2F;]#\\&amp;amp;#g; s&#x2F;\n$&#x2F;&#x2F;; s&#x2F;\n&#x2F;\\n&#x2F;g&amp;#39; search_2.txt)

# escape all replacement section metacharacters
# and prefix \ character to literal newlines, except the last line
$ r=$(sed &amp;#39;s:[\\&#x2F;&amp;amp;]:\\&amp;amp;:g; $!s&#x2F;$&#x2F;\\&#x2F;&amp;#39; replace.txt)
$ echo &amp;quot;$r&amp;quot;
---------------------\
$\&amp;amp; = $1 + $2 \&#x2F; 3 \\ 4\
=====================

# if you need trailing newline from replace.txt,
# use sed -z &amp;#39;s&#x2F;&amp;#39;&amp;quot;$s&amp;quot;&amp;#39;&#x2F;&amp;#39;&amp;quot;$r&amp;quot;&amp;#39;\n&#x2F;g&amp;#39;
$ sed -z &amp;#39;s&#x2F;&amp;#39;&amp;quot;$s&amp;quot;&amp;#39;&#x2F;&amp;#39;&amp;quot;$r&amp;quot;&amp;#39;&#x2F;g&amp;#39; ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and &amp;#39; and so on.
This post shows how
you can do fixed
---------------------
$&amp;amp; = $1 + $2 &#x2F; 3 \ 4
===================== with cli tools.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Emulating regexp lookarounds in GNU sed</title>
		<published>2020-10-31T00:00:00+00:00</published>
		<updated>2021-03-19T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/sed-lookarounds/" type="text/html"/>
		<id>https://learnbyexample.github.io/sed-lookarounds/</id>
		<content type="html">&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;64371281&#x2F;4082052&quot;&gt;stackoverflow Q&amp;amp;A&lt;&#x2F;a&gt; got me thinking about various ways to construct a solution in &lt;code&gt;GNU sed&lt;&#x2F;code&gt; if lookarounds are needed.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Only single line (with newline as the line separator) processing is presented here. Equivalent lookaround syntax with &lt;code&gt;grep -P&lt;&#x2F;code&gt; or &lt;code&gt;perl&lt;&#x2F;code&gt; is also shown for comparison. Cases where multiple lines and&#x2F;or ASCII NUL characters are present in the pattern space is left as an exercise.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;filtering&quot;&gt;Filtering&lt;a class=&quot;zola-anchor&quot; href=&quot;#filtering&quot; aria-label=&quot;Anchor link for: filtering&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here, you only need to decide whether the input line has to be matched or not. &lt;code&gt;sed&lt;&#x2F;code&gt; supports grouping commands inside &lt;code&gt;{}&lt;&#x2F;code&gt; that should be executed only if a filtering condition is matched. The condition could be negated by adding a &lt;code&gt;!&lt;&#x2F;code&gt; character. In this way, you can emulate chaining of multiple positive and&#x2F;or negative lookaround conditions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat items.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;;per kg
a,b,c,d
;foo xyz3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines containing a digit character followed by a ; character anywhere after
# lookaround isn&amp;#39;t needed here
# same as: grep &amp;#39;[0-9].*;&amp;#39; or grep -P &amp;#39;\d(?=.*;)&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;[0-9].*;&#x2F;p&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; items.txt
apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;;per kg

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines containing both digit and ; characters in any order
# same as: grep -P &amp;#39;^(?=.*;).*\d&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;;&#x2F;{ &#x2F;[0-9]&#x2F;p }&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; items.txt
apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;;per kg
;foo xyz3

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# lines containing both digit and ; characters
# but not if the line also contains character a
# same as: grep -P &amp;#39;^(?!.*a)(?=.*;).*\d&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;a&#x2F;!{ &#x2F;;&#x2F;{ &#x2F;[0-9]&#x2F;p } }&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; items.txt
;foo xyz3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some cases, multiple condition check like the previous examples is not enough. For example, filter a line if it contains &lt;code&gt;par&lt;&#x2F;code&gt; as long as &lt;code&gt;cart&lt;&#x2F;code&gt; isn&#x27;t present later in the line. Presence of &lt;code&gt;cart&lt;&#x2F;code&gt; earlier in the line shouldn&#x27;t affect the outcome. In such cases, you can first change the input line to add a newline character wherever &lt;code&gt;cart&lt;&#x2F;code&gt; is present and then construct a condition such that it depends on the newline character instead of &lt;code&gt;cart&lt;&#x2F;code&gt;. If a match is found, delete all the newline characters and then print the line.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par carted spare cart park city\na parking cart\n&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: grep -P &amp;#39;par(?!.*cart)&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;cart&#x2F;\n&amp;amp;&#x2F;g; &#x2F;par[^\n]*$&#x2F;{ s&#x2F;\n&#x2F;&#x2F;g; p }&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
par carted spare cart park city
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; Newline is a safe character to choose for default line by line processing, as &lt;code&gt;sed&lt;&#x2F;code&gt; removes it from the pattern space. If you are processing a pattern space that contains newline character (for example: &lt;code&gt;-z&lt;&#x2F;code&gt; option, &lt;code&gt;N&lt;&#x2F;code&gt; command, etc), then you can still perform this trick as long as you know a character that is guaranteed to be absent from the input data. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;substitution&quot;&gt;Substitution&lt;a class=&quot;zola-anchor&quot; href=&quot;#substitution&quot; aria-label=&quot;Anchor link for: substitution&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous section, you saw how to modify input line with newline character to make it easier to construct a lookaround condition. This trick comes in handy for substitution as well. However, for search and replace cases, you also need to emulate zero-width nature of lookarounds. To achieve this, you can make use of &lt;code&gt;t&lt;&#x2F;code&gt; command to construct a loop that performs substitution as long as a match is found. See my chapter on &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;learn_gnused&#x2F;control-structures.html&quot;&gt;Control structures&lt;&#x2F;a&gt; for more details about branching commands in &lt;code&gt;GNU sed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example of looping. Aim is to delete &lt;code&gt;fin&lt;&#x2F;code&gt; from the given input recursively.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# manual repetition, assuming count is known
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffining&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;fin&#x2F;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
cofing
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffining&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;fin&#x2F;&#x2F;; s&#x2F;&#x2F;&#x2F;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
cog

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# :loop marks the &amp;#39;s&amp;#39; command with label &amp;#39;loop&amp;#39;
# tloop will jump to label &amp;#39;loop&amp;#39; as long as the substitution succeeds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;coffining&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:loop s&#x2F;fin&#x2F;&#x2F;; tloop&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
cog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;negative-lookarounds&quot;&gt;Negative lookarounds&lt;a class=&quot;zola-anchor&quot; href=&quot;#negative-lookarounds&quot; aria-label=&quot;Anchor link for: negative-lookarounds&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Some cases can be solved by performing substitution only if a condition is first satisfied. For this example, need to first select lines if it doesn&#x27;t start with a &lt;code&gt;;&lt;&#x2F;code&gt; character. Then, for such lines, remove everything from the first space or comma character. Note that &lt;code&gt;{}&lt;&#x2F;code&gt; grouping is optional here.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -ne &amp;#39;print if s&#x2F;^(?!;).*?\K[ ,].*&#x2F;&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&#x2F;^;&#x2F;! s&#x2F;[ ,].*&#x2F;&#x2F;p&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; items.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
apple=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For this example, need to change &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;[baz]&lt;&#x2F;code&gt; only if it is not followed by a digit character. Note that &lt;code&gt;foo&lt;&#x2F;code&gt; at the end of string also satisfies this assertion. &lt;code&gt;foofoo&lt;&#x2F;code&gt; has two matches as the assertion is zero-width in nature, i.e. it doesn&#x27;t consume characters. Here, the first step is inserting a newline character between &lt;code&gt;foo&lt;&#x2F;code&gt; and a digit character. Then change all &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;[baz]&lt;&#x2F;code&gt; as long as it is at the end of string or if it isn&#x27;t followed by a newline character. Once the loop ends, remove all the newline characters.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey food! foo42 foot5 foofoo&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;foo(?!\d)&#x2F;[baz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(foo)([0-9])&#x2F;\1\n\2&#x2F;g;
                      :a s&#x2F;foo([^\n]|$)&#x2F;[baz]\1&#x2F;; ta;
                      s&#x2F;\n&#x2F;&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
hey [baz]d! foo42 [baz]t5 [baz][baz]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Change &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;[baz]&lt;&#x2F;code&gt; only if it is not preceded by &lt;code&gt;_&lt;&#x2F;code&gt; character. &lt;code&gt;foo&lt;&#x2F;code&gt; at the start of string is matched as well.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;foo _foo 42foofoo&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;(?&amp;lt;!_)foo&#x2F;[baz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;(_)(foo)&#x2F;\1\n\2&#x2F;g;
                      :a s&#x2F;(^|[^\n])foo&#x2F;\1[baz]&#x2F;; ta;
                      s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[baz] _foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[baz][baz]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace &lt;code&gt;par&lt;&#x2F;code&gt; with &lt;code&gt;[xyz]&lt;&#x2F;code&gt; as long as &lt;code&gt;s&lt;&#x2F;code&gt; character is not present later in the input. This assumes that the assertion doesn&#x27;t conflict with the search pattern, for example &lt;code&gt;s&lt;&#x2F;code&gt; will not conflict with &lt;code&gt;par&lt;&#x2F;code&gt; but would affect if it was &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;par&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spare part party&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;par(?!.*s)&#x2F;[xyz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;s&#x2F;&amp;amp;\n&#x2F;g;
                      :a s&#x2F;par([^\n]*)$&#x2F;[xyz]\1&#x2F;; ta;
                      s&#x2F;\n&#x2F;&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
par s[xyz]e [xyz]t [xyz]ty
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace all empty fields with &lt;code&gt;NA&lt;&#x2F;code&gt; for csv input (assuming no embedded comma, newline characters, etc).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;,1,,,two,3,,,&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -lpe &amp;#39;s&#x2F;(?&amp;lt;![^,])(?![^,])&#x2F;NA&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;,,&#x2F;,NA,&#x2F;g; ta; s&#x2F;^,&#x2F;NA,&#x2F;; s&#x2F;,$&#x2F;,NA&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,two,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;NA
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace if &lt;code&gt;go&lt;&#x2F;code&gt; is not there between &lt;code&gt;at&lt;&#x2F;code&gt; and &lt;code&gt;par&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot,dot,park,bat,go,spare,sat-in-a-park&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;at((?!go).)*par&#x2F;[xyz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;go&#x2F;\n&amp;amp;&#x2F;g; s&#x2F;at[^\n]*par&#x2F;[xyz]&#x2F;g; s&#x2F;\n&#x2F;&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
fox,c[xyz]k,bat,go,spare,s[xyz]k
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;positive-lookarounds&quot;&gt;Positive lookarounds&lt;a class=&quot;zola-anchor&quot; href=&quot;#positive-lookarounds&quot; aria-label=&quot;Anchor link for: positive-lookarounds&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In this example, need to surround fields with &lt;code&gt;[]&lt;&#x2F;code&gt; except first and last fields for csv input (assuming no embedded comma, newline characters, etc). With positive lookaround emulation, the modified string may continue to satisfy the matching condition, resulting in infinite looping. In this example, the fields themselves may contain &lt;code&gt;[]&lt;&#x2F;code&gt; characters, so you cannot use them to prevent infinite loop. The newline character trick comes in handy again.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,t[w]o,[3],f[ou]r,5&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;(?&amp;lt;=,)[^,]+(?=,)&#x2F;[$&amp;amp;]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;,([^,\n]+),&#x2F;,\n[\1],&#x2F;g; ta; s&#x2F;\n&#x2F;&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,[t[w]o],[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]],[f[ou]r],&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add space at word boundaries, but not at the start or end of string. Also, don&#x27;t add space if it is already present. Here, negated character class on space character is enough to emulate the assertion.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;total= num1+35*42&#x2F;num2&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -lpe &amp;#39;s&#x2F;(?&amp;lt;=[^ ])\b(?=[^ ])&#x2F; &#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;([^ ])\b([^ ])&#x2F;\1 \2&#x2F;; ta;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; num1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;35 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; num2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace &lt;code&gt;par&lt;&#x2F;code&gt; with &lt;code&gt;[xyz]&lt;&#x2F;code&gt; as long as &lt;code&gt;part&lt;&#x2F;code&gt; occurs as a whole word later in the line. Here, the nature of the modified string itself prevents the possibility of infinite loop.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spare part party&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: perl -pe &amp;#39;s&#x2F;par(?=.*\bpart\b)&#x2F;[xyz]&#x2F;g&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:a s&#x2F;par(.*\bpart\b)&#x2F;[xyz]\1&#x2F;; ta&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[xyz] s[xyz]e part party
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Branching commands and some creative preprocessing of the input can be combined to emulate lookaround assertions in &lt;code&gt;sed&lt;&#x2F;code&gt;. Given that &lt;a href=&quot;https:&#x2F;&#x2F;catonmat.net&#x2F;proof-that-sed-is-turing-complete&quot;&gt;Unix utility sed is Turing complete&lt;&#x2F;a&gt;, it&#x27;s perhaps not a big surprise. Now, please excuse me, I&#x27;ll be busy reaping points on stackoverflow&#x2F;unix.stackexchange for this edge case ;)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Search and replace tricks with ripgrep</title>
		<published>2020-09-16T00:00:00+00:00</published>
		<updated>2020-11-30T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/substitution-with-ripgrep/" type="text/html"/>
		<id>https://learnbyexample.github.io/substitution-with-ripgrep/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt; (command name &lt;code&gt;rg&lt;&#x2F;code&gt;) is a &lt;code&gt;grep&lt;&#x2F;code&gt; tool, but supports search and replace as well. &lt;code&gt;rg&lt;&#x2F;code&gt; is far from a like-for-like alternate for &lt;code&gt;sed&lt;&#x2F;code&gt;, but it has nifty features like multiline replacement, fixed string matching, &lt;code&gt;PCRE2&lt;&#x2F;code&gt; support, etc. This post gives an overview of syntax for substitution and highlights some of the cases where &lt;code&gt;rg&lt;&#x2F;code&gt; is a handy replacement for &lt;code&gt;sed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;global-search-and-replace&quot;&gt;Global search and replace&lt;a class=&quot;zola-anchor&quot; href=&quot;#global-search-and-replace&quot; aria-label=&quot;Anchor link for: global-search-and-replace&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ cat ip.txt
dark blue, light blue
light orange
blue sky

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# by default, line number is displayed if output destination is stdout
# by default, only lines that matched the given pattern is displayed
# &amp;#39;blue&amp;#39; is search pattern and -r &amp;#39;red&amp;#39; is replacement string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1:dark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; red, light red
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3:red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sky

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# --passthru option is useful to print all lines, whether or not it matched
# -N will disable line number prefix
# this command is similar to: sed &amp;#39;s&#x2F;blue&#x2F;red&#x2F;g&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt
dark red, light red
light orange
red sky
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;matching-nth-occurrence&quot;&gt;Matching Nth occurrence&lt;a class=&quot;zola-anchor&quot; href=&quot;#matching-nth-occurrence&quot; aria-label=&quot;Anchor link for: matching-nth-occurrence&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As seen in previous example, &lt;code&gt;rg&lt;&#x2F;code&gt; will search and replace all occurrences. So, you&#x27;ll have to be creative with regexp to replace only a specific occurrence per input line.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;see bat hot at but at go gate at sat at but at&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace first occurrence only
# same as: sed &amp;#39;s&#x2F;\bat\b&#x2F;[xyz]&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\bat\b(.*)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[xyz]$1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
see bat hot [xyz] but at go gate at sat at but at

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: sed &amp;#39;s&#x2F;\bat\b&#x2F;[xyz]&#x2F;3&amp;#39;
# the number within {} is N-1 to replace Nth occurrence, for N&amp;gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^((.*?\bat\b){2}.*?)\bat\b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1[xyz]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
see bat hot at but at go gate [xyz] sat at but at

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace last but Nth occurrence, for N&amp;gt;=0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^(.*)\bat\b((.*\bat\b){3})&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1[xyz]$2&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
see bat hot at but [xyz] go gate at sat at but at
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;in-place-workaround&quot;&gt;In-place workaround&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-place-workaround&quot; aria-label=&quot;Anchor link for: in-place-workaround&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;rg&lt;&#x2F;code&gt; doesn&#x27;t support in-place option, so you&#x27;ll have to do it yourself.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# -N isn&amp;#39;t needed here as output destination is a file
# same as: sed -i &amp;#39;s&#x2F;blue&#x2F;red&#x2F;g&amp;#39; ip.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; tmp.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; mv tmp.txt ip.txt

$ cat ip.txt
dark red, light red
light orange
red sky
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have &lt;a href=&quot;https:&#x2F;&#x2F;joeyh.name&#x2F;code&#x2F;moreutils&#x2F;&quot;&gt;moreutils installed&lt;&#x2F;a&gt;, then you could use &lt;code&gt;sponge&lt;&#x2F;code&gt; as well.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;blue&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;red&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ip.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sponge ip.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;rust-regex-and-pcre2&quot;&gt;Rust regex and PCRE2&lt;a class=&quot;zola-anchor&quot; href=&quot;#rust-regex-and-pcre2&quot; aria-label=&quot;Anchor link for: rust-regex-and-pcre2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;By default, &lt;code&gt;rg&lt;&#x2F;code&gt; uses Rust regular expressions, which is much more featured compared to &lt;code&gt;GNU sed&lt;&#x2F;code&gt;. The main feature not supported is backreference within regexp definition (for performance reasons). See &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;regex&#x2F;1.3.9&#x2F;regex&#x2F;index.html&quot;&gt;Rust regex documentation&lt;&#x2F;a&gt; for regular expression syntax and features. &lt;code&gt;rg&lt;&#x2F;code&gt; supports Unicode by default.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# non-greedy quantifier is supported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;food land bark sand band cue combat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;foo.*?ba&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[xyz]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[xyz]rk sand band cue combat

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# unicode support
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox:αλεπού,eagle:αετός&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\p{L}+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;($0)&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(fox)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(αλεπού),(eagle)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(αετός)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# set operator example, remove all punctuation characters except . ! and ?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ para=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;hi&amp;quot;, there! how *are* you? all fine here.&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$para&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[[:punct:]--[.!?]]+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
hi there! how are you? all fine here.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;-P&lt;&#x2F;code&gt; switch will enable &lt;a href=&quot;https:&#x2F;&#x2F;www.pcre.org&#x2F;current&#x2F;doc&#x2F;html&#x2F;index.html&quot;&gt;PCRE2&lt;&#x2F;a&gt; flavor, which has even more tricks. You can also use &lt;code&gt;--engine=auto&lt;&#x2F;code&gt; to allow &lt;code&gt;rg&lt;&#x2F;code&gt; to automatically use &lt;code&gt;PCRE2&lt;&#x2F;code&gt; when needed (for example: useful as an alias for &lt;code&gt;rg&lt;&#x2F;code&gt; command so that it gives performance of Rust engine by default and use &lt;code&gt;PCRE2&lt;&#x2F;code&gt; only when needed).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# backreference within regexp definition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cocoa appleseed tool speechless&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;wP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;{$0}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
cocoa {appleseed} tool {speechless}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace all whole words except &amp;#39;imp&amp;#39; and &amp;#39;ant&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger imp goat eagle ant important&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\b(imp|ant)\b(*SKIP)(*F)|\w+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[$0]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[tiger] imp [goat] [eagle] ant [important]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# recursively match parentheses
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ eqn=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(3+a)x * y((r-2)*(t+2)&#x2F;6) + z(a(b(c(d(e)))))&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$eqn&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\((?:[^()]++|(?0))++\)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; z

$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# all lowercase letters and optional hyphen combo from start of string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;apple-fig-mango guava grape&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\G([a-z]+)(-)?&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;($1)$2&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(apple)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(fig)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(mango) guava grape
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;extract-and-modify&quot;&gt;Extract and modify&lt;a class=&quot;zola-anchor&quot; href=&quot;#extract-and-modify&quot; aria-label=&quot;Anchor link for: extract-and-modify&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;-r&lt;&#x2F;code&gt; option can be used when &lt;code&gt;-o&lt;&#x2F;code&gt; option is active too. The example shown below is not easy to do with &lt;code&gt;sed&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501 035 154 12 26 98234&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;gt;= 100 and ignore leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;woP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0*+(\d{3,})&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;quot;$1&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; paste &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sd,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;501&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;154&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;98234&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;fixed-string-matching&quot;&gt;Fixed string matching&lt;a class=&quot;zola-anchor&quot; href=&quot;#fixed-string-matching&quot; aria-label=&quot;Anchor link for: fixed-string-matching&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Like &lt;code&gt;grep&lt;&#x2F;code&gt;, the &lt;code&gt;-F&lt;&#x2F;code&gt; option will allow fixed strings to be matched, a handy option that I feel every search and replace tool should provide.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2.3&#x2F;[4]*6\nfoo\n5.3-[4]*9\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;[4]*&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;29
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;-F&lt;&#x2F;code&gt; doesn&#x27;t extend to replacement section though, so you need &lt;code&gt;$$&lt;&#x2F;code&gt; instead of &lt;code&gt;$&lt;&#x2F;code&gt; character to represent it literally.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.*{2}-b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.*{2}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+$x\tc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\tc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;b
$ echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a.*{2}-b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;F &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;.*{2}&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;+$$x\tc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\tc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;multiline-matching&quot;&gt;Multiline matching&lt;a class=&quot;zola-anchor&quot; href=&quot;#multiline-matching&quot; aria-label=&quot;Anchor link for: multiline-matching&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another handy option is &lt;code&gt;-U&lt;&#x2F;code&gt; which enables multiline matching.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ s=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi there\nhave a nice day\nbye&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# (?s) flag will allow . to match newline characters as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39; &amp;quot;$s&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(?s)the.*ice&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
hi  day
bye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;multiline-search-and-replace&#x2F;&quot;&gt;my blog post&lt;&#x2F;a&gt; for a detailed discussion on multiline fixed string search and replace operations from the command line.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;handling-dos-style-input&quot;&gt;Handling dos-style input&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-dos-style-input&quot; aria-label=&quot;Anchor link for: handling-dos-style-input&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;rg&lt;&#x2F;code&gt; provides support for dos-style files with &lt;code&gt;--crlf&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: sed -E &amp;#39;s&#x2F;\w+(\r?)$&#x2F;xyz\1&#x2F;&amp;#39;
# note that output will retain CR+LF as line ending
# similar to the sed solution, this will work for unix-style input too
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi there\r\ngood day\r\n&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;crlf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\w+$&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xyz&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
hi xyz
good xyz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;speed-comparison-with-gnu-sed&quot;&gt;Speed comparison with GNU sed&lt;a class=&quot;zola-anchor&quot; href=&quot;#speed-comparison-with-gnu-sed&quot; aria-label=&quot;Anchor link for: speed-comparison-with-gnu-sed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another advantage of &lt;code&gt;rg&lt;&#x2F;code&gt; is that it is likely to be faster than &lt;code&gt;sed&lt;&#x2F;code&gt;. See &lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;ripgrep&#x2F;&quot;&gt;ripgrep benchmark with other grep implementations&lt;&#x2F;a&gt; by the author for a methodological detailed analysis and insights.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# for small files, initial processing time of rg is a large component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ time echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aba&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;a&#x2F;b&#x2F;g&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f1
real	0m0.002s
$ time echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aba&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f2
real	0m0.007s

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# for larger files, rg is likely to be faster
# 6.2M sample ASCII file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ wget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;norvig.com&#x2F;big.txt&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;
$ time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;LC_ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\bcat\b&#x2F;dog&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f1
real	0m0.060s
$ time rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;\bcat\b&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f2
real	0m0.048s
$ diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;s f1 f2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f2 are identical

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# nearly 8 times faster!!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$ time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;LC_ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;s&#x2F;\b(\w+)(\s+\1)+\b&#x2F;\1&#x2F;g&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f1
real	0m0.725s
$ time rg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;unicode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;passthru &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;wP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(\w+)(\s+\1)+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; big.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f2
real	0m0.093s
$ diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;s f1 f2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; f2 are identical
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;other-alternatives-for-sed&quot;&gt;Other alternatives for sed&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-alternatives-for-sed&quot; aria-label=&quot;Anchor link for: other-alternatives-for-sed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;112023&#x2F;how-can-i-replace-a-string-in-a-files&#x2F;251742#251742&quot;&gt;rpl&lt;&#x2F;a&gt; — search and replace tool, has interesting options like interactive mode and recursive mode&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chmln&#x2F;sd&quot;&gt;sd&lt;&#x2F;a&gt; — simple search and replace, implemented in Rust&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.perl.org&#x2F;&quot;&gt;perl&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;&quot;&gt;ruby&lt;&#x2F;a&gt; — programming languages with excellent command line support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>I know Python basics, what next?</title>
		<published>2020-07-25T00:00:00+00:00</published>
		<updated>2022-01-21T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/python-intermediate/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-intermediate/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;what_next.png&quot; alt=&quot;what next&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;next-step&quot;&gt;Next step&lt;a class=&quot;zola-anchor&quot; href=&quot;#next-step&quot; aria-label=&quot;Anchor link for: next-step&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What to learn next is an often asked question. &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;learnpython&#x2F;search?q=what+next&amp;amp;restrict_sr=on&quot;&gt;Searching for &lt;code&gt;what next&lt;&#x2F;code&gt; on &#x2F;r&#x2F;learnpython&lt;&#x2F;a&gt; gives you too many results. Here&#x27;s some wonderful articles on this topic:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.devdungeon.com&#x2F;content&#x2F;i-know-how-program-i-dont-know-what-program&quot;&gt;I know how to program, but I don&#x27;t know what to program&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.techinasia.com&#x2F;talk&#x2F;27-things-started-programming&quot;&gt;Things you might encounter in your programming journey&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.flyingmachinestudios.com&#x2F;programming&#x2F;learn-programming-languages-efficiently&#x2F;&quot;&gt;Techniques for Efficiently Learning Programming Languages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;exercises-and-projects&quot;&gt;Exercises and Projects&lt;a class=&quot;zola-anchor&quot; href=&quot;#exercises-and-projects&quot; aria-label=&quot;Anchor link for: exercises-and-projects&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I do not have a simple answer to this question either. If you feel comfortable with programming basics and Python syntax, then exercises are a good way to test your knowledge. The resource you used to learn Python will typically have some sort of exercises, so those would be ideal as a first choice. I&#x27;d also suggest using the below resources to improve your skills. If you get stuck, reread the material related to those topics, search online, ask for clarifications, etc  — in short, make an effort to solve it. It is okay to skip some troublesome problems (and come back to it later if you have the time), but you should be able to solve most of the beginner problems. Maintaining notes and cheatsheets will help too, especially for common mistakes.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;exercism.org&#x2F;tracks&#x2F;python&#x2F;exercises&quot;&gt;Exercism&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.hackinscience.org&#x2F;exercises&#x2F;&quot;&gt;Hackinscience&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.practicepython.org&#x2F;&quot;&gt;Practicepython&lt;&#x2F;a&gt; — these are all beginner friendly and difficulty levels are marked&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;100_page_python_intro&#x2F;blob&#x2F;main&#x2F;exercises&#x2F;Exercises.md&quot;&gt;100 Page Python Intro exercises&lt;&#x2F;a&gt; — exercises from my introductory guide&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.codewars.com&#x2F;&quot;&gt;Codewars&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;&quot;&gt;Adventofcode&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;projecteuler.net&#x2F;&quot;&gt;Projecteuler&lt;&#x2F;a&gt; — more challenging&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;py.checkio.org&#x2F;&quot;&gt;Checkio&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.codingame.com&#x2F;start&quot;&gt;Codingame&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;codecombat.com&#x2F;&quot;&gt;Codecombat&lt;&#x2F;a&gt; — gaming based challenges&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;dailyprogrammer&quot;&gt;&#x2F;r&#x2F;dailyprogrammer&lt;&#x2F;a&gt; — not active currently, but there&#x27;s plenty of past challenges with discussions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once you are comfortable with basics and syntax, the next step is projects. I use a 10-line program that solves a common problem for me — adding &lt;code&gt;body { text-align: justify }&lt;&#x2F;code&gt; to &lt;code&gt;epub&lt;&#x2F;code&gt; files that are not justify aligned. I didn&#x27;t know that this line would help beforehand. Found a solution online and then automated the process of unzipping &lt;code&gt;epub&lt;&#x2F;code&gt;, adding the line and then packing it again. That will likely need you to lookup documentation and go through some stackoverflow Q&amp;amp;A as well. And once you have written the solution and use it regularly, you&#x27;ll likely encounter corner cases and features to be added. I feel this is a great way to learn and understand programming.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;practice_python_projects&#x2F;&quot;&gt;Practice Python Projects&lt;&#x2F;a&gt; — my book on beginner to intermediate level projects&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karan&#x2F;Projects-Solutions&quot;&gt;Projects with solutions&lt;&#x2F;a&gt; — algorithms, data structures, networking, security, databases, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;practical-tutorials&#x2F;project-based-learning#python&quot;&gt;Project based learning&lt;&#x2F;a&gt; — web applications, bots, data science, machine learning, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;norvig&#x2F;pytudes&quot;&gt;Pytudes by Peter Norvig&lt;&#x2F;a&gt; — Python programs, usually short, of considerable difficulty&lt;&#x2F;li&gt;
&lt;li&gt;Books:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;bigbookpython&#x2F;&quot;&gt;The Big Book of Small Python Projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;tiny-python-projects&quot;&gt;Tiny Python Projects&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;impracticalpythonprojects&quot;&gt;Impractical Python Projects&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;real-world-python&quot;&gt;Real world Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;learnpython&#x2F;comments&#x2F;k5k1h0&#x2F;what_do_you_automate_with_python_at_home&#x2F;&quot;&gt;&#x2F;r&#x2F;learnpython: What do you automate with Python at home?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging&quot; aria-label=&quot;Anchor link for: debugging&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Knowing how to debug your programs is crucial and should be ideally taught right from the beginning instead of a chapter at the end of the book. &lt;a href=&quot;https:&#x2F;&#x2F;greenteapress.com&#x2F;wp&#x2F;think-python-2e&#x2F;&quot;&gt;Think Python&lt;&#x2F;a&gt; is an awesome example for such a resource material.&lt;&#x2F;p&gt;
&lt;p&gt;Sites like &lt;a href=&quot;http:&#x2F;&#x2F;www.pythontutor.com&#x2F;visualize.html#mode=edit&quot;&gt;Pythontutor&lt;&#x2F;a&gt; allow you to visually debug a program — you can execute a program step by step and see the current value of variables. Similar feature is typically provided by IDEs like &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;pycharm&#x2F;&quot;&gt;Pycharm&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;thonny.org&#x2F;&quot;&gt;Thonny&lt;&#x2F;a&gt;. Under the hood, these visualizations are using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;pdb.html&quot;&gt;pdb module&lt;&#x2F;a&gt;. See also &lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-debugging-pdb&#x2F;&quot;&gt;Python debugging with pdb&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Debugging is often a frustrating experience. Taking a break helps (and sometimes I find the solution or spot a problem in my dreams). Try to reduce the code as much as possible so that you are left with minimal code necessary to reproduce the issue. Talking about the problem to a friend&#x2F;colleague&#x2F;inanimate-objects&#x2F;etc can help too — known as &lt;a href=&quot;https:&#x2F;&#x2F;rubberduckdebugging.com&#x2F;&quot;&gt;Rubber duck debugging&lt;&#x2F;a&gt;. I have often found the issue while formulating a question to be asked on forums like stackoverflow&#x2F;reddit because writing down your problem is another way to bring clarity than just having a vague idea in your mind. Here&#x27;s some more articles on this challenging topic:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2019&#x2F;06&#x2F;23&#x2F;a-few-debugging-resources&#x2F;&quot;&gt;What does debugging a program look like?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ericlippert.com&#x2F;2014&#x2F;03&#x2F;05&#x2F;how-to-debug-small-programs&#x2F;&quot;&gt;How to debug small programs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uchicago-cs.github.io&#x2F;debugging-guide&#x2F;&quot;&gt;Debugging guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ryanstutorials.net&#x2F;problem-solving-skills&#x2F;&quot;&gt;Problem solving skills&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s an interesting snippet (paraphrased) from a collection of &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;169713&#x2F;4082052&quot;&gt;interesting bug stories&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A jpeg parser choked whenever the CEO came into the room, because he always had a shirt with a square pattern on it, which triggered some special case of contrast and block boundary algorithms.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;See also &lt;a href=&quot;https:&#x2F;&#x2F;500mile.email&#x2F;&quot;&gt;this curated list of absurd software bug stories&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing&quot; aria-label=&quot;Anchor link for: testing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another crucial aspect in the programming journey is knowing how to write tests. In bigger projects, usually there are separate engineers (often in much larger number than code developers) to test the code. Even in those cases, writing a few sanity test cases yourself can help you develop faster knowing that the changes aren&#x27;t breaking basic functionality.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s no single consensus on test methodologies. There is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unit_testing&quot;&gt;Unit testing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Integration_testing&quot;&gt;Integration testing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Test-driven_development&quot;&gt;Test-driven development&lt;&#x2F;a&gt; and so on. Often, a combination of these is used. These days, machine learning is also being considered to reduce the testing time, see &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2020&#x2F;07&#x2F;testing-firefox-more-efficiently-with-machine-learning&#x2F;&quot;&gt;Testing Firefox more efficiently with machine learning&lt;&#x2F;a&gt; for example.&lt;&#x2F;p&gt;
&lt;p&gt;When I start a project, I usually try to write the programs incrementally. Say I need to iterate over files from a directory. I will make sure that portion is working (usually with &lt;code&gt;print&lt;&#x2F;code&gt; statements), then add another feature — say file reading and test that and so on. This reduces the burden of testing a large program at once at the end. And depending upon the nature of the program, I&#x27;ll add a few sanity tests at the end. For example, for my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;command_help&quot;&gt;command_help&lt;&#x2F;a&gt; project, I copy pasted a few test runs of the program with different options and arguments into a separate file and wrote a program to perform these tests programmatically whenever the source code is modified.&lt;&#x2F;p&gt;
&lt;p&gt;For non-trivial projects, you&#x27;ll usually end up needing frameworks like built-in module &lt;code&gt;unittest&lt;&#x2F;code&gt; or third-party modules like &lt;code&gt;pytest&lt;&#x2F;code&gt;. Here&#x27;s some learning resources.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-testing&#x2F;&quot;&gt;Getting started with testing in Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.thea.codes&#x2F;my-python-testing-style-guide&#x2F;&quot;&gt;Python testing style guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;calmcode.io&#x2F;pytest&#x2F;introduction.html&quot;&gt;calmcode: pytest&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatonline.com&#x2F;blog&#x2F;2020&#x2F;09&#x2F;10&#x2F;tdd-in-python-with-pytest-part-1&#x2F;&quot;&gt;TDD in Python with pytest&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.obeythetestinggoat.com&#x2F;&quot;&gt;obeythetestinggoat&lt;&#x2F;a&gt; — TDD for the Web, with Python, Selenium, Django, JavaScript and pals&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;testdriven.io&#x2F;blog&#x2F;modern-tdd&#x2F;&quot;&gt;Modern Test-Driven Development in Python&lt;&#x2F;a&gt; — TDD guide, has a real world application example&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;intermediate-to-advanced-python-resources&quot;&gt;Intermediate to Advanced Python resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#intermediate-to-advanced-python-resources&quot; aria-label=&quot;Anchor link for: intermediate-to-advanced-python-resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;index.html&quot;&gt;Official Python docs&lt;&#x2F;a&gt; — Python docs are a treasure trove of information&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;calmcode.io&#x2F;&quot;&gt;Calmcode&lt;&#x2F;a&gt; — videos on testing, code style, args kwargs, data science, etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dabeaz-course.github.io&#x2F;practical-python&#x2F;Notes&#x2F;Contents.html&quot;&gt;Practical Python Programming&lt;&#x2F;a&gt; — covers foundational aspects of Python programming with an emphasis on script writing, data manipulation, and program organization&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;inventwithpython.com&#x2F;beyond&#x2F;chapter0.html&quot;&gt;Beyond the Basic Stuff with Python&lt;&#x2F;a&gt; — Best Practices, Tools, and Techniques, OOP, Practice Projects&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathspp.gumroad.com&#x2F;l&#x2F;pydonts&quot;&gt;Pydon&#x27;ts&lt;&#x2F;a&gt; — Write elegant Python code, make the best use of the core Python features&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;fluent-python-2nd&#x2F;9781492056348&#x2F;&quot;&gt;Fluent Python&lt;&#x2F;a&gt; — takes you through Python’s core language features and libraries, and shows you how to make your code shorter, faster, and more readable at the same time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nostarch.com&#x2F;seriouspython&quot;&gt;Serious Python&lt;&#x2F;a&gt; — deployment, scalability, testing, and more&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;practices-of-the-python-pro&quot;&gt;Practices of the Python Pro&lt;&#x2F;a&gt; — learn to design professional-level, clean, easily maintainable software at scale, includes examples for software development best practices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Algorithms and Design patterns&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;runestone.academy&#x2F;runestone&#x2F;static&#x2F;pythonds&#x2F;index.html&quot;&gt;Problem solving with algorithms and data structures&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;classic-computer-science-problems-in-python&quot;&gt;Classic Computer Science Problems in Python&lt;&#x2F;a&gt; — deepens your knowledge of problem solving techniques from the realm of computer science by challenging you with time-tested scenarios, exercises, and algorithms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;faif&#x2F;python-patterns&quot;&gt;GitHub: Collection of design patterns and idioms&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cosmicpython.com&#x2F;book&#x2F;preface.html&quot;&gt;Architecture Patterns with Python&lt;&#x2F;a&gt; — Enabling TDD, DDD, and Event-Driven Microservices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;handy-cheatsheets&quot;&gt;Handy cheatsheets&lt;a class=&quot;zola-anchor&quot; href=&quot;#handy-cheatsheets&quot; aria-label=&quot;Anchor link for: handy-cheatsheets&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ehmatthes.github.io&#x2F;pcc_2e&#x2F;cheat_sheets&#x2F;cheat_sheets&#x2F;&quot;&gt;Python Crash Course cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gto76.github.io&#x2F;python-cheatsheet&#x2F;&quot;&gt;Comprehensive Python cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ipgp.github.io&#x2F;scientific_python_cheat_sheet&#x2F;&quot;&gt;Scientific Python cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonforbiologists.com&#x2F;29-common-beginner-errors-on-one-page&#x2F;&quot;&gt;Common beginner errors&lt;&#x2F;a&gt; — use the pdf link&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;more-python-resources&quot;&gt;More Python resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-python-resources&quot; aria-label=&quot;Anchor link for: more-python-resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Inspired by this post, I made a &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_resources&#x2F;&quot;&gt;Python learning resources repository&lt;&#x2F;a&gt; which is categorized (beginner, intermediate, advanced, domains like web&#x2F;ML&#x2F;data science, etc) and includes a handy search feature.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;I hope these resources will help you take that crucial next step and continue your Python journey. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Customizing pandoc to generate beautiful pdf and epub from markdown</title>
		<published>2020-07-21T00:00:00+00:00</published>
		<updated>2022-01-25T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/customizing-pandoc/" type="text/html"/>
		<id>https://learnbyexample.github.io/customizing-pandoc/</id>
		<content type="html">&lt;p&gt;Either you&#x27;ve already heard of &lt;code&gt;pandoc&lt;&#x2F;code&gt; or if you have searched online for &lt;code&gt;markdown&lt;&#x2F;code&gt; to &lt;code&gt;pdf&lt;&#x2F;code&gt; or similar, you are sure to come across &lt;code&gt;pandoc&lt;&#x2F;code&gt;. This tutorial will help you use &lt;code&gt;pandoc&lt;&#x2F;code&gt; to generate &lt;code&gt;pdf&lt;&#x2F;code&gt; and &lt;code&gt;epub&lt;&#x2F;code&gt; from a &lt;a href=&quot;https:&#x2F;&#x2F;github.github.com&#x2F;gfm&#x2F;&quot;&gt;GitHub style markdown&lt;&#x2F;a&gt; file. The main motivation for this blog post is to highlight what customizations I did to generate &lt;code&gt;pdf&lt;&#x2F;code&gt; and &lt;code&gt;epub&lt;&#x2F;code&gt; versions for &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;books&#x2F;&quot;&gt;self-publishing my ebooks&lt;&#x2F;a&gt;. It wasn&#x27;t easy to arrive at the set-up I ended up with, so I hope this will be useful for those looking to use &lt;code&gt;pandoc&lt;&#x2F;code&gt; to generate &lt;code&gt;pdf&lt;&#x2F;code&gt; and &lt;code&gt;epub&lt;&#x2F;code&gt; formats. This guide is specifically aimed at technical books that has code snippets.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;a class=&quot;zola-anchor&quot; href=&quot;#installation&quot; aria-label=&quot;Anchor link for: installation&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you use a debian based distro like Ubuntu, the below steps are enough for the demos in this tutorial. If you get an error or warning, search that issue online and you&#x27;ll likely find what else has to be installed.&lt;&#x2F;p&gt;
&lt;p&gt;I first downloaded &lt;code&gt;deb&lt;&#x2F;code&gt; file from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;releases&quot;&gt;pandoc: releases&lt;&#x2F;a&gt; and installed it. Followed by packages needed for &lt;code&gt;pdf&lt;&#x2F;code&gt; generation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# latest pandoc version as of 27 Aug 2021 is 2.14.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sudo gdebi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;&#x2F;Downloads&#x2F;pandoc-2.14.2-1-amd64.deb

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# note that download size is hundreds of MB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sudo apt install texlive-xetex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sudo apt install librsvg2-bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sudo apt install texlive-science
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more details and guide for other OS, refer to &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;installing.html&quot;&gt;pandoc: installation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;minimal-example&quot;&gt;Minimal example&lt;a class=&quot;zola-anchor&quot; href=&quot;#minimal-example&quot; aria-label=&quot;Anchor link for: minimal-example&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Once &lt;code&gt;pandoc&lt;&#x2F;code&gt; is working on your system, try generating a sample &lt;code&gt;pdf&lt;&#x2F;code&gt; without any customization.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learnbyexample.github.io&#x2F;tree&#x2F;master&#x2F;files&#x2F;pandoc_pdf&quot;&gt;learnbyexample.github.io repo&lt;&#x2F;a&gt; for all the input and output files referred in this tutorial.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; pandoc sample_1.md&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; gfm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sample_1.pdf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;sample_1.md&lt;&#x2F;code&gt; is input markdown file and &lt;code&gt;-f&lt;&#x2F;code&gt; is used to specify that the input format is GitHub style markdown. The &lt;code&gt;-o&lt;&#x2F;code&gt; option specifies the output file type based on extension. The default output is probably good enough. But I wished to customize hyperlinks, inline code style, add page breaks between chapters, etc. This blog post will discuss these customizations one by one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;code&gt;pandoc&lt;&#x2F;code&gt; has its own flavor of &lt;code&gt;markdown&lt;&#x2F;code&gt; with many useful extensions — see &lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#pandocs-markdown&quot;&gt;pandoc: pandocs-markdown&lt;&#x2F;a&gt; for details. GitHub style markdown is recommended if you wish to use the same source (or with minor changes) in multiple places.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; It is advised to use &lt;code&gt;markdown&lt;&#x2F;code&gt; headers in order without skipping — for example, &lt;code&gt;H1&lt;&#x2F;code&gt; for chapter heading and &lt;code&gt;H2&lt;&#x2F;code&gt; for chapter sub-section, etc is fine. &lt;code&gt;H1&lt;&#x2F;code&gt; for chapter heading and &lt;code&gt;H3&lt;&#x2F;code&gt; for sub-section is not. Using the former can give automatic index navigation on ebook readers.&lt;&#x2F;p&gt;
&lt;p&gt;On &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Apps&#x2F;Evince&quot;&gt;Evince&lt;&#x2F;a&gt; reader, the index navigation for above sample looks like this:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;chapter_index.png&quot; alt=&quot;index navigation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;chapter-breaks&quot;&gt;Chapter breaks&lt;a class=&quot;zola-anchor&quot; href=&quot;#chapter-breaks&quot; aria-label=&quot;Anchor link for: chapter-breaks&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As observed from previous demo, by default there are no chapter breaks. Searching for a &lt;a href=&quot;https:&#x2F;&#x2F;superuser.com&#x2F;questions&#x2F;601469&#x2F;getting-chapters-to-start-on-a-new-page-in-a-pandoc-generated-pdf&quot;&gt;solution online&lt;&#x2F;a&gt;, I got this piece of &lt;code&gt;tex&lt;&#x2F;code&gt; code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;sectsty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\sectionfont&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\clearpage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be added using &lt;code&gt;-H&lt;&#x2F;code&gt; option. From &lt;code&gt;pandoc&lt;&#x2F;code&gt; manual,&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;-H FILE, --include-in-header=FILE&lt;&#x2F;p&gt;
&lt;p&gt;Include  contents  of FILE, verbatim, at the end of the header.  This
can be used, for example, to include special  CSS  or  JavaScript  in
HTML documents.  This option can be used repeatedly to include multiple
files in the header.  They will be included in the  order  specified.
Implies --standalone.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;pandoc&lt;&#x2F;code&gt; invocation now looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; pandoc sample_1.md&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; gfm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -H&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; chapter_break.tex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sample_1_chapter_break.pdf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can add further customization to headings, for example use &lt;code&gt;\sectionfont{\underline\clearpage}&lt;&#x2F;code&gt; to underline chapter names or &lt;code&gt;\sectionfont{\LARGE\clearpage}&lt;&#x2F;code&gt; to allow chapter names to get even bigger. Here&#x27;s some more links to read about various customizations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;1455&#x2F;how-to-set-the-font-for-a-section-title-and-chapter-etc&quot;&gt;tex.stackexchange: section fonts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;230730&#x2F;section-coming-up-as-undefined-when-using-sectsty&quot;&gt;tex.stackexchange: section colors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;10138&#x2F;change-section-fonts&quot;&gt;tex.stackexchange: change section fonts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h2 id=&quot;changing-settings-via-v-option&quot;&gt;Changing settings via -V option&lt;a class=&quot;zola-anchor&quot; href=&quot;#changing-settings-via-v-option&quot; aria-label=&quot;Anchor link for: changing-settings-via-v-option&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;-V KEY[=VAL], --variable=KEY[:VAL]&lt;&#x2F;p&gt;
&lt;p&gt;Set the template variable KEY to the value  VAL  when  rendering  the
document  in standalone mode.  This is generally only useful when the
--template option is used to specify a custom template, since  pandoc
automatically  sets  the variables used in the default templates.  If
no VAL is specified, the key will be given the value true.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;-V&lt;&#x2F;code&gt; option allows to change variable values to customize settings like page size, font, link color, etc. As more settings are changed, better to use a simple script to call &lt;code&gt;pandoc&lt;&#x2F;code&gt; instead of typing the whole command on terminal.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#!&#x2F;bin&#x2F;bash

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pandoc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; gfm \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    --include-in-header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; chapter_break.tex \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; linkcolor:blue \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; geometry:a4paper \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; geometry:margin=2cm \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; mainfont=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;DejaVu Serif&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; monofont=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;DejaVu Sans Mono&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    --pdf-engine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;xelatex \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;    -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mainfont&lt;&#x2F;code&gt; is for normal text&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;monofont&lt;&#x2F;code&gt; is for code snippets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;geometry&lt;&#x2F;code&gt; for page size and margins&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;linkcolor&lt;&#x2F;code&gt; to set hyperlink color&lt;&#x2F;li&gt;
&lt;li&gt;to increase default &lt;strong&gt;font size&lt;&#x2F;strong&gt;, use &lt;code&gt;-V fontsize=12pt&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;23811002&#x2F;4082052&quot;&gt;stackoverflow: change font size&lt;&#x2F;a&gt; if you need even bigger size options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Using &lt;code&gt;xelatex&lt;&#x2F;code&gt; as the &lt;code&gt;pdf-engine&lt;&#x2F;code&gt; allows to use any font installed in the system. One reason I chose &lt;code&gt;DejaVu&lt;&#x2F;code&gt; was because it supported &lt;strong&gt;Greek&lt;&#x2F;strong&gt; and other Unicode characters that were causing error with other fonts. See &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;21736&#x2F;using-xelatex-instead-of-pdflatex&quot;&gt;tex.stackexchange: Using XeLaTeX instead of pdfLaTeX&lt;&#x2F;a&gt; for some more details.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;pandoc&lt;&#x2F;code&gt; invocation is now through a script:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; chmod +x md2pdf.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; .&#x2F;md2pdf.sh sample_1.md sample_1_settings.pdf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Do compare the pdf generated side by side with previous output before proceeding.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; On my system, &lt;code&gt;DejaVu Serif&lt;&#x2F;code&gt; did not have &lt;em&gt;italic&lt;&#x2F;em&gt; variation installed, so I had to use &lt;code&gt;sudo apt install ttf-dejavu-extra&lt;&#x2F;code&gt; to get it.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;syntax-highlighting&quot;&gt;Syntax highlighting&lt;a class=&quot;zola-anchor&quot; href=&quot;#syntax-highlighting&quot; aria-label=&quot;Anchor link for: syntax-highlighting&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One option to customize syntax highlighting for code snippets is to save one of the &lt;code&gt;pandoc&lt;&#x2F;code&gt; themes and editing it. See &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;47876166&#x2F;4082052&quot;&gt;stackoverflow: What are the available syntax highlighters?&lt;&#x2F;a&gt; for available themes and more details (as a good practice on stackoverflow, go through all answers and comments — the linked&#x2F;related sections on sidebar are useful as well).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; pandoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; --print-highlight-style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pygments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; pygments.theme
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Edit the above file to customize the theme. Use sites like &lt;a href=&quot;https:&#x2F;&#x2F;www.colorhexa.com&#x2F;&quot;&gt;colorhexa&lt;&#x2F;a&gt; to help with color choices, hex values, etc. For this demo, the below settings are changed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;# by default, background is same as normal text
# change it to a shade of gray to easily distinguish code and text
&amp;quot;background-color&amp;quot;: &amp;quot;#f8f8f8&amp;quot;,

# change italic to false, messes up comments with slashes
# change comment text-color to yet another shade of gray
&amp;quot;Comment&amp;quot;: {
    &amp;quot;text-color&amp;quot;: &amp;quot;#9c9c9c&amp;quot;,
    &amp;quot;background-color&amp;quot;: null,
    &amp;quot;bold&amp;quot;: false,
    &amp;quot;italic&amp;quot;: false,
    &amp;quot;underline&amp;quot;: false
},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Inline code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Similar to changing background color for code snippets, I found a &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;40975004&#x2F;4082052&quot;&gt;solution online&lt;&#x2F;a&gt; to change background color for inline code snippets.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;fancyvrb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;,newverbs,xcolor}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\definecolor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{Light}{HTML}{F4F4F4}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\let\oldtexttt\texttt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;\renewcommand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;\texttt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}[1]{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\colorbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{Light}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\oldtexttt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{#1}}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add &lt;code&gt;--highlight-style pygments.theme&lt;&#x2F;code&gt; and &lt;code&gt;--include-in-header inline_code.tex&lt;&#x2F;code&gt; to the script and generate the &lt;code&gt;pdf&lt;&#x2F;code&gt; again.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;pandoc sample_2.md -f gfm -o sample_2.pdf&lt;&#x2F;code&gt; the output would be:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;default_syn.png&quot; alt=&quot;Default syntax highlighting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;.&#x2F;md2pdf_syn.sh sample_2.md sample_2_syn.pdf&lt;&#x2F;code&gt; the output is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;customized_syn.png&quot; alt=&quot;Customized syntax highlighting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;p&gt;For my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt; book, by chance I found that using &lt;code&gt;ruby&lt;&#x2F;code&gt; instead of &lt;code&gt;python&lt;&#x2F;code&gt; for REPL code snippets syntax highlighting was better. Snapshot from &lt;code&gt;.&#x2F;md2pdf_syn.sh sample_3.md sample_3.pdf&lt;&#x2F;code&gt; result is shown below. For &lt;code&gt;python&lt;&#x2F;code&gt; directive, string output gets treated as a comment and color for boolean values isn&#x27;t easy to distinguish from string values. The &lt;code&gt;ruby&lt;&#x2F;code&gt; directive treats string value as expected and boolean values are easier to spot.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;python_vs_ruby_syn.png&quot; alt=&quot;REPL syntax highlighting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;bullet-styling&quot;&gt;Bullet styling&lt;a class=&quot;zola-anchor&quot; href=&quot;#bullet-styling&quot; aria-label=&quot;Anchor link for: bullet-styling&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;22156999&#x2F;4082052&quot;&gt;stackoverflow Q&amp;amp;A&lt;&#x2F;a&gt; helped for bullet styling.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;enumitem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;amsfonts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;% level one
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\setlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[itemize,1]{label=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\bullet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;% level two
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\setlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[itemize,2]{label=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\circ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;% level three
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\setlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[itemize,3]{label=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\star&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comparing &lt;code&gt;pandoc sample_4.md -f gfm -o sample_4.pdf&lt;&#x2F;code&gt; vs &lt;code&gt;.&#x2F;md2pdf_syn_bullet.sh sample_4.md sample_4_bullet.pdf&lt;&#x2F;code&gt; gives:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;bullet_styling.png&quot; alt=&quot;Bullet styling&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;pdf-properties&quot;&gt;PDF properties&lt;a class=&quot;zola-anchor&quot; href=&quot;#pdf-properties&quot; aria-label=&quot;Anchor link for: pdf-properties&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;23235&#x2F;eliminate-edit-pdf-properties-added-by-pdflatex&quot;&gt;tex.stackexchange Q&amp;amp;A&lt;&#x2F;a&gt; helped to change metadata. See also &lt;a href=&quot;https:&#x2F;&#x2F;pspdfkit.com&#x2F;blog&#x2F;2018&#x2F;whats-hiding-in-your-pdf&#x2F;&quot;&gt;pspdfkit: What’s Hiding in Your PDF?&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=18381515&quot;&gt;discussion on HN&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;hyperref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\hypersetup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{
  pdftitle={My awesome book},
  pdfauthor={learnbyexample},
  pdfsubject={pandoc},
  pdfkeywords={pandoc,pdf,xelatex}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop.sh sample_4.md sample_4_bullet_prop.pdf&lt;&#x2F;code&gt; gives:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;pdf_properties.png&quot; alt=&quot;pdf properties&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;adding-table-of-contents&quot;&gt;Adding table of contents&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-table-of-contents&quot; aria-label=&quot;Anchor link for: adding-table-of-contents&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s a handy option &lt;code&gt;--toc&lt;&#x2F;code&gt; to automatically include table of contents at top of the generated &lt;code&gt;pdf&lt;&#x2F;code&gt;. You can control number of levels using &lt;code&gt;--toc-depth&lt;&#x2F;code&gt; option, the default is 3 levels. You can also change the default string &lt;code&gt;Contents&lt;&#x2F;code&gt; to something else using &lt;code&gt;-V toc-title&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop_toc.sh sample_1.md sample_1_toc.pdf&lt;&#x2F;code&gt; gives:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;table_of_contents.png&quot; alt=&quot;table of contents&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;adding-cover-image&quot;&gt;Adding cover image&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-cover-image&quot; aria-label=&quot;Anchor link for: adding-cover-image&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To add something prior to table of contents, cover image for example, you can use a &lt;code&gt;tex&lt;&#x2F;code&gt; file and include it verbatim. Create a &lt;code&gt;tex&lt;&#x2F;code&gt; file (named as &lt;code&gt;cover.tex&lt;&#x2F;code&gt; here) with content as shown below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\includegraphics&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{cover.png}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\thispagestyle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{empty}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, modify the previous script &lt;code&gt;md2pdf_syn_bullet_prop_toc.sh&lt;&#x2F;code&gt; by adding &lt;code&gt;--include-before-body cover.tex&lt;&#x2F;code&gt; and tada — you get the cover image before table of contents. &lt;code&gt;\thispagestyle{empty}&lt;&#x2F;code&gt; helps to avoid page number on the cover page, see also &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;360739&#x2F;what-is-the-use-of-clearpage-thispagestyleempty-cleardoublepage&quot;&gt;tex.stackexchange: clear page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;bash&lt;&#x2F;code&gt; script invocation is now &lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop_toc_cover.sh sample_5.md sample_5.pdf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;warning.svg&quot; alt=&quot;warning&quot; &#x2F;&gt; You&#x27;ll need at least one image in input markdown file, otherwise settings won&#x27;t apply to the cover image and you may end up with weird output. &lt;code&gt;sample_5.md&lt;&#x2F;code&gt; used in the command above includes an image. And be careful to use escapes if the image path can contain &lt;code&gt;tex&lt;&#x2F;code&gt; metacharacters.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;stylish-blockquote&quot;&gt;Stylish blockquote&lt;a class=&quot;zola-anchor&quot; href=&quot;#stylish-blockquote&quot; aria-label=&quot;Anchor link for: stylish-blockquote&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;By default, blockquotes (lines starting with &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; in markdown) are just indented in the &lt;code&gt;pdf&lt;&#x2F;code&gt; output. To make them standout, &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;154528&#x2F;how-to-change-the-background-color-and-border-of-a-pandoc-generated-blockquote&quot;&gt;tex.stackexchange: change the background color and border of blockquote&lt;&#x2F;a&gt; helped.&lt;&#x2F;p&gt;
&lt;p&gt;Create &lt;code&gt;quote.tex&lt;&#x2F;code&gt; with the contents as shown below. You can change the colors to suit your own preferred style.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\usepackage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;tcolorbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\newtcolorbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{myquote}{colback=red!5!white, colframe=red!75!black}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;\renewenvironment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{quote}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;myquote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;myquote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;bash&lt;&#x2F;code&gt; script invocation is now &lt;code&gt;.&#x2F;md2pdf_syn_bullet_prop_toc_cover_quote.sh sample_5.md sample_5_quote.pdf&lt;&#x2F;code&gt;. The difference between default and styled blockquote is shown below.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;pandoc_pdf&#x2F;styled_blockquote.png&quot; alt=&quot;styling blockquotes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;h2 id=&quot;customizing-epub&quot;&gt;Customizing epub&lt;a class=&quot;zola-anchor&quot; href=&quot;#customizing-epub&quot; aria-label=&quot;Anchor link for: customizing-epub&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For a long time, I thought &lt;code&gt;epub&lt;&#x2F;code&gt; didn&#x27;t make sense for programming books. Turned out, I wasn&#x27;t using the right ebook readers. &lt;strong&gt;FBReader&lt;&#x2F;strong&gt; is good for novels but not ebooks with code snippets. When I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mate-desktop&#x2F;atril&quot;&gt;atril&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;calibre-ebook.com&#x2F;&quot;&gt;calibre ebook-viewer&lt;&#x2F;a&gt;, the results were good.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t know how to use &lt;code&gt;css&lt;&#x2F;code&gt; before trying to generate the &lt;code&gt;epub&lt;&#x2F;code&gt; version. Somehow, I managed to take the default &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;blob&#x2F;master&#x2F;data&#x2F;epub.css&quot;&gt;epub.css&lt;&#x2F;a&gt; provided by &lt;code&gt;pandoc&lt;&#x2F;code&gt; and customize it as close as possible to the &lt;code&gt;pdf&lt;&#x2F;code&gt; version. The modified &lt;code&gt;epub.css&lt;&#x2F;code&gt; is available from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learnbyexample.github.io&#x2F;tree&#x2F;master&#x2F;files&#x2F;pandoc_pdf&quot;&gt;learnbyexample.github.io repo&lt;&#x2F;a&gt;. The &lt;code&gt;bash&lt;&#x2F;code&gt; script to generate the &lt;code&gt;epub&lt;&#x2F;code&gt; is shown below and invoked as &lt;code&gt;.&#x2F;md2epub.sh sample_5.md sample_5.epub&lt;&#x2F;code&gt;. Note that &lt;code&gt;pygments.theme&lt;&#x2F;code&gt; is same as the &lt;code&gt;pdf&lt;&#x2F;code&gt; customization discussed before.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;#!&#x2F;bin&#x2F;bash

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;pandoc  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        -f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; gfm \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --toc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --standalone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --top-level-division&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;chapter \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --highlight-style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; pygments.theme \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; epub.css \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;My awesome book&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;author:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;learnbyexample&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;lang:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;en-US&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        --metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;cover-image:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;cover.png&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;        -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;resource-links&quot;&gt;Resource links&lt;a class=&quot;zola-anchor&quot; href=&quot;#resource-links&quot; aria-label=&quot;Anchor link for: resource-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html&quot;&gt;pandoc: manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;demos.html&quot;&gt;pandoc: demos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jgm&#x2F;pandoc&#x2F;wiki&#x2F;Pandoc-Tricks&quot;&gt;pandoc: tips and tricks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;More options and workflows for generating ebooks&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Wandmalfarbe&#x2F;pandoc-latex-template&quot;&gt;pandoc-latex-template&lt;&#x2F;a&gt; — a clean pandoc LaTeX template to convert your markdown files to PDF or LaTeX&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;keleshev.com&#x2F;my-book-writing-setup&#x2F;&quot;&gt;Writing a book with pandoc, make, and vim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jupyterbook.org&#x2F;intro.html&quot;&gt;Jupyter Book&lt;&#x2F;a&gt; — open source project for building beautiful, publication-quality books and documents from computational material
&lt;ul&gt;
&lt;li&gt;See also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastai&#x2F;fastdoc&quot;&gt;fastdoc&lt;&#x2F;a&gt; — the output of fastdoc is an asciidoc file for each input notebook. You can then use asciidoctor to convert that to HTML, DocBook, epub, mobi, and so forth&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.thedigitalcatbooks.com&#x2F;maubook-introduction&#x2F;&quot;&gt;Mau&lt;&#x2F;a&gt; — template-based markup language, heavily inspired by AsciiDoc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciidoctor.org&#x2F;docs&#x2F;what-is-asciidoc&#x2F;&quot;&gt;Asciidoctor&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shape-of-code.coding-guidelines.com&#x2F;2019&#x2F;08&#x2F;11&#x2F;my-books-pdf-generation-workflow&#x2F;&quot;&gt;pdf generation workflow with Asciidoc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sphinx-doc.org&#x2F;en&#x2F;stable&#x2F;index.html&quot;&gt;Sphinx&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;digitalsuperpowers.com&#x2F;blog&#x2F;2019-02-16-publishing-ebook.html&quot;&gt;Self-publishing a book with reStructuredText, Sphinx, Calibre, and vim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bookdown.org&#x2F;home&#x2F;&quot;&gt;Bookdown&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;Emacs orgmode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;casual-effects.com&#x2F;markdeep&#x2F;&quot;&gt;Markdeep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nickjanetakis.com&#x2F;blog&#x2F;vim-is-saving-me-hours-of-work-when-writing-books-and-courses&quot;&gt;Vim is saving me hours of work when writing books &amp;amp; courses&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;joecmarshall.com&#x2F;posts&#x2F;book-writing-environment&#x2F;&quot;&gt;Writing a Book with Unix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;3697&#x2F;how-do-i-install-fonts&quot;&gt;askubuntu: How do I install fonts?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;9533&#x2F;what-best-combination-of-fonts-for-serif-sans-and-mono-do-you-recommend&quot;&gt;tex.stackexchange: What best combination of fonts for Serif, Sans, and Mono do you recommend?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tug.org&#x2F;FontCatalogue&#x2F;&quot;&gt;LATEX font catalogue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karthik&#x2F;markdown_science&#x2F;wiki&#x2F;Tools-to-support-your-markdown-authoring&quot;&gt;Tools to support markdown authoring&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;picular.co&#x2F;&quot;&gt;picular: search engine for colors&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.colorhexa.com&#x2F;&quot;&gt;colorhexa&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ebooks.stackexchange.com&#x2F;questions?sort=votes&quot;&gt;ebooks.stackexchange&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>JavaScript regular expressions cheatsheet and examples</title>
		<published>2020-07-20T00:00:00+00:00</published>
		<updated>2020-11-12T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/javascript-regexp-cheatsheet/" type="text/html"/>
		<id>https://learnbyexample.github.io/javascript-regexp-cheatsheet/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;js_regexp_example.png&quot; alt=&quot;regexp example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Above diagram created using &lt;a href=&quot;https:&#x2F;&#x2F;jex.im&#x2F;regulex&quot;&gt;Regulex&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;This blog post gives an overview of regular expression syntax and features supported by JavaScript. Examples have been tested on Chrome&#x2F;Chromium console (version 81+) and includes features not available in other browsers and platforms. Assume ASCII character set unless otherwise specified. This post is an excerpt from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;JavaScript RegExp&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elements-that-define-a-regular-expression&quot;&gt;Elements that define a regular expression&lt;a class=&quot;zola-anchor&quot; href=&quot;#elements-that-define-a-regular-expression&quot; aria-label=&quot;Anchor link for: elements-that-define-a-regular-expression&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Note&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Regular_Expressions&quot;&gt;MDN: Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;MDN documentation for JavaScript regular expressions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;pat&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;a RegExp object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;const pet = &#x2F;dog&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;save regexp in a variable for reuse, clarity, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&#x2F;pat&#x2F;.test(s)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Check if given pattern is present anywhere in input string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns &lt;code&gt;true&lt;&#x2F;code&gt; or &lt;code&gt;false&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to ignore case when matching alphabets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;g&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to match all occurrences&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;new RegExp(&#x27;pat&#x27;, &#x27;i&#x27;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;construct RegExp from a string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;second argument specifies flags&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use backtick strings with &lt;code&gt;${}&lt;&#x2F;code&gt; for interpolation&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;source&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;property to convert RegExp object to string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;helps to insert a RegExp inside another RegExp&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;flags&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;property to get flags of a RegExp object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.replace(&#x2F;pat&#x2F;, &#x27;repl&#x27;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;method for search and replace&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.search(&#x2F;pat&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;gives starting location of the match or &lt;code&gt;-1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.split(&#x2F;pat&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;split a string based on regexp&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Anchors&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to start of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to end of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to match the start&#x2F;end of line with &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;\r&lt;&#x2F;code&gt;, &lt;code&gt;\n&lt;&#x2F;code&gt;, &lt;code&gt;\u2028&lt;&#x2F;code&gt; and &lt;code&gt;\u2029&lt;&#x2F;code&gt; are line separators&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;dos-style files use &lt;code&gt;\r\n&lt;&#x2F;code&gt;, may need special attention&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to start&#x2F;end of words&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;word characters: alphabets, digits, underscore&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matches wherever &lt;code&gt;\b&lt;&#x2F;code&gt; doesn&#x27;t match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code&gt;^&lt;&#x2F;code&gt;, &lt;code&gt;$&lt;&#x2F;code&gt; and &lt;code&gt;\&lt;&#x2F;code&gt; are &lt;strong&gt;metacharacters&lt;&#x2F;strong&gt; in the above table, as these characters have special meaning. Prefix a &lt;code&gt;\&lt;&#x2F;code&gt; character to remove the special meaning and match such characters literally. For example, &lt;code&gt;\^&lt;&#x2F;code&gt; will match a &lt;code&gt;^&lt;&#x2F;code&gt; character instead of acting as an anchor.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Feature&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1|pat2|pat3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple regexp combined as OR conditional&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;each alternative can have independent anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;group pattern(s), also a capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;a(b|c)d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;same as &lt;code&gt;abd|acd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;non-capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match any character except line separators&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Character class, matches one character among many&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Greedy Quantifiers&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or &lt;code&gt;1&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;0&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;1&lt;&#x2F;code&gt; or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match at least &lt;code&gt;m&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;any number of characters between &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2|pat2.*pat1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match both &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt; in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Greedy&lt;&#x2F;strong&gt; here means that the above quantifiers will match as much as possible that&#x27;ll also honor the overall regexp. Appending a &lt;code&gt;?&lt;&#x2F;code&gt; to greedy quantifiers makes them &lt;strong&gt;non-greedy&lt;&#x2F;strong&gt;, i.e. match as &lt;em&gt;minimally&lt;&#x2F;em&gt; as possible. Quantifiers can be applied to literal characters, groups, backreferences and character classes.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Character class&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[ae;o]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match &lt;strong&gt;any&lt;&#x2F;strong&gt; of these characters once&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[3-7]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;range&lt;&#x2F;strong&gt; of characters from &lt;code&gt;3&lt;&#x2F;code&gt; to &lt;code&gt;7&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^=b2]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;negated set&lt;&#x2F;strong&gt;, match other than &lt;code&gt;=&lt;&#x2F;code&gt; or &lt;code&gt;b&lt;&#x2F;code&gt; or &lt;code&gt;2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-z-]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt; should be first&#x2F;last or escaped using &lt;code&gt;\&lt;&#x2F;code&gt; to match literally&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[+^]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; shouldn&#x27;t be first character or escaped using &lt;code&gt;\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[\]\\]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;]&lt;&#x2F;code&gt; and &lt;code&gt;\&lt;&#x2F;code&gt; should be escaped using &lt;code&gt;\&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[A-Za-z0-9_]&lt;&#x2F;code&gt; for matching word characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[0-9]&lt;&#x2F;code&gt; for matching digit characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;similar to &lt;code&gt;[ \t\n\r\f\v]&lt;&#x2F;code&gt; for matching whitespace characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\W&lt;&#x2F;code&gt;, &lt;code&gt;\D&lt;&#x2F;code&gt;, and &lt;code&gt;\S&lt;&#x2F;code&gt; for their opposites respectively&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;u&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to enable unicode matching&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\p{}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Unicode character sets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\P{}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negated unicode character sets&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Regular_Expressions&#x2F;Unicode_Property_Escapes&quot;&gt;MDN: Unicode property escapes&lt;&#x2F;a&gt; for details&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\u{}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;specify unicode characters using codepoints&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Lookarounds&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;lookarounds&lt;&#x2F;td&gt;&lt;td&gt;allows to create custom positive&#x2F;negative assertions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;zero-width like anchors and not part of matching portions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;variable length lookbehind is allowed&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat1)(?=pat2)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple assertions can be specified next to each other in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;as they mark a matching location without consuming characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;((?!pat).)*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Negates a regexp pattern&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Matched portion&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m = s.match(&#x2F;pat&#x2F;)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;assuming &lt;code&gt;g&lt;&#x2F;code&gt; flag isn&#x27;t used and regexp succeeds,&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns an array with matched portion and 3 properties&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;index&lt;&#x2F;code&gt; property gives the starting location of the match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;input&lt;&#x2F;code&gt; property gives the input string &lt;code&gt;s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;groups&lt;&#x2F;code&gt; property gives dictionary of named capture groups&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[0]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for above case, gives entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[N]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matched portion of Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.match(&#x2F;pat&#x2F;g)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns only the matched portions, no properties&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;s.matchAll(&#x2F;pat&#x2F;g)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns an iterator containing details for&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;each matched portion and its properties&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Backreference&lt;&#x2F;td&gt;&lt;td&gt;gives matched portion of Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;$1&lt;&#x2F;code&gt;, &lt;code&gt;$2&lt;&#x2F;code&gt;, &lt;code&gt;$3&lt;&#x2F;code&gt;, etc in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$&amp;amp;&lt;&#x2F;code&gt; gives entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$`&lt;&#x2F;code&gt; gives string before the matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$&#x27;&lt;&#x2F;code&gt; gives string after the matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\1&lt;&#x2F;code&gt;, &lt;code&gt;\2&lt;&#x2F;code&gt;, &lt;code&gt;\3&lt;&#x2F;code&gt;, etc within regexp definition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;insert &lt;code&gt;$&lt;&#x2F;code&gt; literally in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$0N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;same as &lt;code&gt;$N&lt;&#x2F;code&gt;, allows to separate backreference and other digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\N\xhh&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allows to separate backreference and digits in regexp definition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;\k&amp;lt;name&amp;gt;&lt;&#x2F;code&gt; for backreferencing in regexp definition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;use &lt;code&gt;$&amp;lt;name&amp;gt;&lt;&#x2F;code&gt; for backreferencing in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;br&gt;
&lt;h2 id=&quot;regular-expression-examples&quot;&gt;Regular expression examples&lt;a class=&quot;zola-anchor&quot; href=&quot;#regular-expression-examples&quot; aria-label=&quot;Anchor link for: regular-expression-examples&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;is&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;xyz&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;false

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;ring&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sentence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mission success&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;mission success
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new RegExp()&lt;&#x2F;code&gt; constructor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;i&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;dog&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;i

&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;tabc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;abc&#x2F;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;greeting &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;`${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;()} there`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;HI there&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;string and line anchors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; string anchors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;cat&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cater&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;door&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;er&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;surrender&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;newer&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use &amp;#39;m&amp;#39; flag to change string anchors to line anchors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;era&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dare&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; escape metacharacters to match them literally
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;2&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a^2 + b^2 - C*3&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;replace&lt;&#x2F;code&gt; method and word boundaries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;catapults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;concatenate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;cat&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;gm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;* &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;catapults
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;concatenate
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;cat

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace &amp;#39;par&amp;#39; only at the start of word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;X spar apparent spare Xt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace &amp;#39;par&amp;#39; at the end of word but not whole word &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;par sX apparent spare part&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;alternations and grouping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace either &amp;#39;cat&amp;#39; at start of string or &amp;#39;cat&amp;#39; at end of word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;catapults concatenate cat scat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Xapults concatenate X sX&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; same as: &#x2F;\bpark\b|\bpart\b&#x2F;g
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;park parked part party&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par(k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;t)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;X parked X party&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Guide&#x2F;Regular_Expressions&quot;&gt;MDN: Regular Expressions doc&lt;&#x2F;a&gt; provides &lt;code&gt;escapeRegExp&lt;&#x2F;code&gt; function, useful to automatically escape metacharacters.
&lt;ul&gt;
&lt;li&gt;See also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;slevithan&#x2F;xregexp&quot;&gt;XRegExp&lt;&#x2F;a&gt; utility which provides &lt;a href=&quot;http:&#x2F;&#x2F;xregexp.com&#x2F;api&#x2F;#escape&quot;&gt;XRegExp.escape&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;xregexp.com&#x2F;api&#x2F;#union&quot;&gt;XRegExp.union&lt;&#x2F;a&gt; methods. The union method has additional functionality of allowing a mix of string and RegExp literals and also takes care of renumbering backreferences.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;escapeRegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;*+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\-?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;^${}()|[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\]\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;$&amp;amp;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
  }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;unionRegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;escapeRegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
  }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;RegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;unionRegExp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c^t&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;dog$&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;f|x&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;g&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#108f3d;&quot;&gt;\|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;x&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;dot metacharacter and quantifiers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; matches character &amp;#39;2&amp;#39;, any character and then character &amp;#39;3&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;33&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;3&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;483&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; &amp;#39;s&amp;#39; flag will allow line separators to be matched as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;Have a Nice Day&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;the&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;ice&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Hi X Day&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; same as: &#x2F;part|parrot|parent&#x2F;g
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par part parrot parent&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;par(en&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;ro)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;t&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;par X X X&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ac&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xabbbcz&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;ab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{1,4}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;c&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;abc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;abbc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;xabbbcz&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; entire matched portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;a(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)d(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;a)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;abc ac adc a&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; matched portion of 2nd capture group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;a(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)d(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;a)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;c a&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get location of matching portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat and dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;dog&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;index
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get all matching portions with &amp;#39;g&amp;#39; flag
&#x2F;&#x2F; no properties or group portions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[et]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;spare&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;part&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; useful for debugging purposes as well before using &amp;#39;replace&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;that is quite a fabricated tale&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;a&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;tha&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;t is quite a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;ted ta&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matchAll&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; same as: match(&#x2F;ab*c&#x2F;g)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;matchAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;ab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;c&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;abc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;ac&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;abbbc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get index for each match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;matchAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;ab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;c&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; get only capture group portions as an array for each match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;xx:yyy x: x:yy :y&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;matchAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;):(y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;xx&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;yyy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;yy&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;__proto__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;function&#x2F;dictionary in replacement section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;titleCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;toLowerCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;()
  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aBc ac ADC aBbBC&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(a)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;c)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;ig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;titleCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Abc Ac Adc Abbbc&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 42 317&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;2 84 634&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;swap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tiger&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat tiger dog tiger cat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;tiger&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;swap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;tiger cat dog cat tiger&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split&lt;&#x2F;code&gt; method&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; split based on one or more digit characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Sample&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;string&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;with&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;numbers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; include the portion that caused the split as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Sample&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;123&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;string&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;42&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;with&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;777&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;numbers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; split based on digit or whitespace characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;3star&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;7 77&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;**&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\d\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;**&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;star&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;**&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use non-capturing group if capturing is not needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123handed42handy777handful500&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;hand(?:y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;ful)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;123&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;ed42&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;777&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;500&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;backreferencing with normal&#x2F;non-capturing&#x2F;named capture groups&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; remove consecutive duplicate words separated by space
&#x2F;&#x2F; use \W+ instead of space to cover cases like &amp;#39;a;a&amp;lt;-;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a a a 42 f_1 f_1 f_13.14&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;aa a 42 f_1 f_13.14&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; add something around the entire matched portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;52 apples and 31 mangoes&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;($&amp;amp;)&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;(52) apples and (31) mangoes&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; duplicate first field and add it as last field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fork,42,nice,3.14&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$&amp;amp;,$`&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;fork,42,nice,3.14,fork&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; use non-capturing groups when backreferencing isn&amp;#39;t needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1,2,3,4,5,6,7&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;((?:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$1($2)&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;1,2,3,(4),5,6,7&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; named capture groups, same as: replace(&#x2F;(\w+),(\w+)&#x2F;g, &amp;#39;$2,$1&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;good,bad 42,24&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;fw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;),(?&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#acb3c2;&quot;&gt;sw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;$&amp;lt;sw&amp;gt;,$&amp;lt;fw&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;bad,good 24,42&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for lookarounds&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; change &amp;#39;foo&amp;#39; only if it is not followed by a digit character
&#x2F;&#x2F; note that end of string satisfies the given assertion
&#x2F;&#x2F; note that &amp;#39;foofoo&amp;#39; has two matches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey food! foo42 foot5 foofoo&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;foo(?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;baz&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;hey bazd! foo42 bazt5 bazbaz&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; change whole word only if it is not preceded by : or --
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart apple --rest ;tea&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;!:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;--)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;:cart X --rest ;X&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; extract digits only if it is preceded by - and followed by , or ;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42 foo-5, baz3; x83, y-20; f12&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;=-)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;5&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;20&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; words containing all vowels in any order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sequoia&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exhibit&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;equation&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;a)(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;e)(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;i)(?=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;o)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;u&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;sequoia&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;questionable&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;equation&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; replace only 3rd occurrence of &amp;#39;cat&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cat scatter cater scat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;(?&amp;lt;=(cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)cat&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;cat scatter Xer scat&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; match if &amp;#39;do&amp;#39; is not there between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;&#x2F;at((?!do)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c49a39;&quot;&gt;par&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;debugging-and-visualization-tools&quot;&gt;Debugging and Visualization tools&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging-and-visualization-tools&quot; aria-label=&quot;Anchor link for: debugging-and-visualization-tools&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As your regexp gets complicated, it can get difficult to debug if you run into issues. Building your regexp step by step from scratch and testing against input strings will go a long way in correcting the problem. To aid in such a process, you could use &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20614847&quot;&gt;various online regexp tools&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;regex101.com&#x2F;r&#x2F;HSeO0z&#x2F;1&quot;&gt;regex101&lt;&#x2F;a&gt; is a popular site to test your regexp. You&#x27;ll have first choose the flavor as JavaScript. Then you can add your regexp, input strings, choose flags and an optional replacement string. Matching portions will be highlighted and explanation is offered in separate panes. There&#x27;s also a quick reference and other features like sharing, code generator, quiz, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;regex101.png&quot; alt=&quot;regex101 example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Another useful tool is &lt;a href=&quot;https:&#x2F;&#x2F;jex.im&#x2F;regulex&#x2F;#!flags=&amp;amp;re=%5Cbpar(en%7Cro)%3Ft%5Cb&quot;&gt;jex: regulex&lt;&#x2F;a&gt; which converts your regexp to a rail road diagram, thus providing a visual aid to understanding the pattern.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;regulex.png&quot; alt=&quot;regulex example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-regexp-book&quot;&gt;JavaScript RegExp book&lt;a class=&quot;zola-anchor&quot; href=&quot;#javascript-regexp-book&quot; aria-label=&quot;Anchor link for: javascript-regexp-book&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit my repo &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&quot;&gt;learn_js_regexp&lt;&#x2F;a&gt; for details about the book I wrote on JavaScript regular expressions. The ebook uses plenty of examples to explain the concepts from the basics and includes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_js_regexp&#x2F;blob&#x2F;master&#x2F;Exercises.md&quot;&gt;exercises&lt;&#x2F;a&gt; to test your understanding. The cheatsheet and examples presented in this post are based on contents of this book.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;js_regexp.png&quot; alt=&quot;JavaScript regexp book cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python regular expression cheatsheet and examples</title>
		<published>2020-07-03T00:00:00+00:00</published>
		<updated>2021-12-14T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/python-regex-cheatsheet/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-cheatsheet/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;pyregex_example.png&quot; alt=&quot;pyregex example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Above visualization is a screenshot created using&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.debuggex.com&quot;&gt;debuggex&lt;&#x2F;a&gt; &lt;em&gt;for the pattern&lt;&#x2F;em&gt; &lt;code&gt;r&#x27;\bpar(en|ro)?t\b&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;re.html&quot;&gt;docs.python: re&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This blog post gives an overview and examples of regular expression syntax as implemented by the &lt;code&gt;re&lt;&#x2F;code&gt; built-in module (Python 3.8+). Assume ASCII character set unless otherwise specified. This post is an excerpt from my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elements-that-define-a-regular-expression&quot;&gt;Elements that define a regular expression&lt;a class=&quot;zola-anchor&quot; href=&quot;#elements-that-define-a-regular-expression&quot; aria-label=&quot;Anchor link for: elements-that-define-a-regular-expression&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Anchors&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\A&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\Z&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start of line&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the end of line&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\n&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;newline character is used as line separator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.MULTILINE&lt;&#x2F;code&gt; or &lt;code&gt;re.M&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to treat input as multiline string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;restricts the match to the start&#x2F;end of words&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;word characters: alphabets, digits, underscore&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matches wherever &lt;code&gt;\b&lt;&#x2F;code&gt; doesn&#x27;t match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code&gt;^&lt;&#x2F;code&gt;, &lt;code&gt;$&lt;&#x2F;code&gt; and &lt;code&gt;\&lt;&#x2F;code&gt; are metacharacters in the above table, as these characters have special meaning. Prefix a &lt;code&gt;\&lt;&#x2F;code&gt; character to remove the special meaning and match such characters literally. For example, &lt;code&gt;\^&lt;&#x2F;code&gt; will match a &lt;code&gt;^&lt;&#x2F;code&gt; character instead of acting as an anchor.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Feature&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;|&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple RE combined as conditional OR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;each alternative can have independent anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(RE)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;group pattern(s), also a capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;a(b|c)d&lt;&#x2F;code&gt; is same as &lt;code&gt;abd|acd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?:RE)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;non-capturing group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?P&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match any character except the newline character &lt;code&gt;\n&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Character class, matches one character among many&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Greedy Quantifiers&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match zero or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match one or more times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match zero or one times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match &lt;code&gt;m&lt;&#x2F;code&gt; to &lt;code&gt;n&lt;&#x2F;code&gt; times (inclusive)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{m,}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match at least &lt;code&gt;m&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{,n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match up to &lt;code&gt;n&lt;&#x2F;code&gt; times (including &lt;code&gt;0&lt;&#x2F;code&gt; times)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match exactly &lt;code&gt;n&lt;&#x2F;code&gt; times&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;any number of characters between &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;pat1.*pat2|pat2.*pat1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match both &lt;code&gt;pat1&lt;&#x2F;code&gt; and &lt;code&gt;pat2&lt;&#x2F;code&gt; in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Greedy here means that the above quantifiers will match as much as possible that&#x27;ll also honor the overall RE. Appending a &lt;code&gt;?&lt;&#x2F;code&gt; to greedy quantifiers makes them &lt;strong&gt;non-greedy&lt;&#x2F;strong&gt;, i.e. match as &lt;em&gt;minimally&lt;&#x2F;em&gt; as possible. Quantifiers can be applied to literal characters, groups, backreferences and character classes.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Character class&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[aeiou]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match any vowel&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[^aeiou]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;^&lt;&#x2F;code&gt; inverts selection, so this matches any consonant&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-f]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt; defines a range, so this matches any of abcdef characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match a digit, same as &lt;code&gt;[0-9]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\D&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match non-digit, same as &lt;code&gt;[^0-9]&lt;&#x2F;code&gt; or &lt;code&gt;[^\d]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match word character, same as &lt;code&gt;[a-zA-Z0-9_]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match non-word character, same as &lt;code&gt;[^a-zA-Z0-9_]&lt;&#x2F;code&gt; or &lt;code&gt;[^\w]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match whitespace character, same as &lt;code&gt;[\ \t\n\r\f\v]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Match non-whitespace character, same as &lt;code&gt;[^\ \t\n\r\f\v]&lt;&#x2F;code&gt; or &lt;code&gt;[^\s]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Lookarounds&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;lookarounds&lt;&#x2F;td&gt;&lt;td&gt;custom assertions, zero-width like anchors&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;!pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negative lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookahead assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?&amp;lt;=pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;positive lookbehind assertion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!pat1)(?=pat2)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple assertions can be specified in any order&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;as they mark a matching location without consuming characters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;((?!pat).)*&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Negate a grouping, similar to negated character class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Flags&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.IGNORECASE&lt;&#x2F;code&gt; or &lt;code&gt;re.I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;flag to ignore case&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.DOTALL&lt;&#x2F;code&gt; or &lt;code&gt;re.S&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allow &lt;code&gt;.&lt;&#x2F;code&gt; metacharacter to match newline character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;flags=re.S|re.I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;multiple flags can be combined using &lt;code&gt;|&lt;&#x2F;code&gt; operator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.MULTILINE&lt;&#x2F;code&gt; or &lt;code&gt;re.M&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allow &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; anchors to match line wise&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.VERBOSE&lt;&#x2F;code&gt; or &lt;code&gt;re.X&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;allows to use literal whitespaces for aligning purposes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;and to add comments after the &lt;code&gt;#&lt;&#x2F;code&gt; character&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;escape spaces and &lt;code&gt;#&lt;&#x2F;code&gt; if needed as part of actual RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.ASCII&lt;&#x2F;code&gt; or &lt;code&gt;re.A&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;match only ASCII characters for &lt;code&gt;\b&lt;&#x2F;code&gt;, &lt;code&gt;\w&lt;&#x2F;code&gt;, &lt;code&gt;\d&lt;&#x2F;code&gt;, &lt;code&gt;\s&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;and their opposites, applicable only for Unicode patterns&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.LOCALE&lt;&#x2F;code&gt; or &lt;code&gt;re.L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;use locale settings for byte patterns and 8-bit locales&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?#comment)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;another way to add comments, not a flag&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?flags:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;inline flags only for this &lt;code&gt;pat&lt;&#x2F;code&gt;, overrides &lt;code&gt;flags&lt;&#x2F;code&gt; argument&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;flags is &lt;code&gt;i&lt;&#x2F;code&gt; for &lt;code&gt;re.I&lt;&#x2F;code&gt;, &lt;code&gt;s&lt;&#x2F;code&gt; for &lt;code&gt;re.S&lt;&#x2F;code&gt;, etc, except &lt;code&gt;L&lt;&#x2F;code&gt; for &lt;code&gt;re.L&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?-flags:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;negate flags only for this &lt;code&gt;pat&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?flags-flags:pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;apply and negate particular flags only for this &lt;code&gt;pat&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?flags)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;apply flags for whole RE, can be used only at start of RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;anchors if any, should be specified after &lt;code&gt;(?flags)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Matched portion&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.Match&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;td&gt;details like matched portions, location, etc&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[0]&lt;&#x2F;code&gt; or &lt;code&gt;m.group(0)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;entire matched portion of &lt;code&gt;re.Match&lt;&#x2F;code&gt; object &lt;code&gt;m&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m[n]&lt;&#x2F;code&gt; or &lt;code&gt;m.group(n)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;matched portion of &lt;em&gt;n&lt;&#x2F;em&gt;th capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m.groups()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;tuple of all the capture groups&#x27; matched portions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;m.span()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;start and end+1 index of entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;pass a number to get span of that particular capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;can also use &lt;code&gt;m.start()&lt;&#x2F;code&gt; and &lt;code&gt;m.end()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backreference, gives matched portion of &lt;em&gt;N&lt;&#x2F;em&gt;th capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;applies to both search and replacement sections&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;possible values: &lt;code&gt;\1&lt;&#x2F;code&gt;, &lt;code&gt;\2&lt;&#x2F;code&gt; up to &lt;code&gt;\99&lt;&#x2F;code&gt; provided no more digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;\g&amp;lt;N&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;backreference, gives matched portion of Nth capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;possible values: &lt;code&gt;\g&amp;lt;0&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;\g&amp;lt;1&amp;gt;&lt;&#x2F;code&gt;, etc (not limited to 99)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;\g&amp;lt;0&amp;gt;&lt;&#x2F;code&gt; refers to entire matched portion&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;(?P&amp;lt;name&amp;gt;pat)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;named capture group&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;refer as &lt;code&gt;&#x27;name&#x27;&lt;&#x2F;code&gt; in &lt;code&gt;re.Match&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;refer as &lt;code&gt;(?P=name)&lt;&#x2F;code&gt; in search section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;refer as &lt;code&gt;\g&amp;lt;name&amp;gt;&lt;&#x2F;code&gt; in replacement section&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;groupdict&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;method applied on a &lt;code&gt;re.Match&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;gives named capture group portions as a &lt;code&gt;dict&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;info.svg&quot; alt=&quot;info&quot; &#x2F;&gt; &lt;code&gt;\0&lt;&#x2F;code&gt; and &lt;code&gt;\100&lt;&#x2F;code&gt; onwards are considered as octal values, hence cannot be used as backreferences.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;re-module-functions&quot;&gt;re module functions&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-module-functions&quot; aria-label=&quot;Anchor link for: re-module-functions&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.search&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Check if given pattern is present anywhere in input string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Output is a &lt;code&gt;re.Match&lt;&#x2F;code&gt; object, usable in conditional expressions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;r-strings preferred to define RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Use byte pattern for byte input&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;Python also maintains a small cache of recent RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.fullmatch&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;ensures pattern matches the entire input string&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.compile&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Compile a pattern for reuse, outputs &lt;code&gt;re.Pattern&lt;&#x2F;code&gt; object&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.sub&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;search and replace&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.sub(r&#x27;pat&#x27;, f, s)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;function &lt;code&gt;f&lt;&#x2F;code&gt; with &lt;code&gt;re.Match&lt;&#x2F;code&gt; object as argument&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.escape&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;automatically escape all metacharacters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.split&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;split a string based on RE&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;text matched by the groups will be part of the output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;portion matched by pattern outside group won&#x27;t be in output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.findall&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;returns all the matches as a list&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;if 1 capture group is used, only its matches are returned&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;1+, each element will be tuple of capture groups&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;portion matched by pattern outside group won&#x27;t be in output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.finditer&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;iterator with &lt;code&gt;re.Match&lt;&#x2F;code&gt; object for each match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;re.subn&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;gives tuple of modified string and number of substitutions&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The function definitions are given below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fullmatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, repl, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;escape&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maxsplit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;subn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pattern, repl, string, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;regular-expression-examples&quot;&gt;Regular expression examples&lt;a class=&quot;zola-anchor&quot; href=&quot;#regular-expression-examples&quot; aria-label=&quot;Anchor link for: regular-expression-examples&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As a good practice, always use &lt;strong&gt;raw strings&lt;&#x2F;strong&gt; to construct RE, unless other formats are required. This will avoid clash of special meaning of backslash character between RE and normal quoted strings.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.search&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# need to load the re module before use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# check if &amp;#39;sentence&amp;#39; contains the pattern described by RE argument
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, sentence))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# ignore case while searching for a match
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, sentence, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.I))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;xyz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, sentence))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# re.search output can be directly used in conditional expressions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, sentence):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;mission success&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
... 
mission success

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use raw byte strings if input is of byte data type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;This is a sample string&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;difference between string and line anchors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# string anchors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hi hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;top spot&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;up&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;do&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ear&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;eel&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pest&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;er&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, w)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;surrender&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;newer&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# line anchors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;dare&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.M))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.findall&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whole word par with optional s at start and optional e at end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;pare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part pare&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;spare&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;pare&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;gt;= 100 with optional leading zeros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1-9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2,}\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501 035 154 12 26 98234&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;0501&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;154&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;98234&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# if multiple capturing groups are used, each element of output
# will be a tuple of strings of all the capture groups
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;&#x2F;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;&#x2F;,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2020&#x2F;04,1986&#x2F;Mar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2020&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;04&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1986&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Mar&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# normal capture group will hinder ability to get whole match
# non-capturing group to the rescue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(?:st&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;in)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cost akin more east run&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;cost&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;akin&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;east&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# useful for debugging purposes as well
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;that is quite a fabricated tale&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tha&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;t is quite a&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;ted ta&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.split&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# split based on one or more digit characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;string&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;with&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# split based on digit or whitespace characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;\d\s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;3star&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;7 77&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;**&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;star&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;**&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to include the matching delimiter strings as well in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample123string42with777numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Sample&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;string&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;with&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;777&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;numbers&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# use non-capturing group if capturing is not needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;hand(?:y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ful)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123handed42handy777handful500&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;123handed42&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;777&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;500&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;backreferencing within search pattern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# whole words that have at least one consecutive repeated character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;effort&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;flee&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;facade&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;oddball&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;rat&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tool&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, w)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;effort&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;flee&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;oddball&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;tool&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;working with matched portions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.Match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;; span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;), match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bc ac ad&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# retrieving entire matched portion, note the use of [0]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bc ac ad&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# capture group example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;a(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)d(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;a)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to get matched portion of second capture group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c a&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# to get a tuple of all the capture groups
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;groups&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;()
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bc ac a&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;c a&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.finditer&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# numbers &amp;lt; 350
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m_iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0-9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;45 349 651 593 4 204&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m_iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;350&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;45&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;349&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;4&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;204&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# start and end+1 index of each matching portion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m_iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;finditer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;abc ac adc abbbc&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;m_iter:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;())
... 
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.sub&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;ip_lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;catapults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;concatenate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;cat&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, ip_lines, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.M))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;catapults
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;concatenate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;cat

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# replace &amp;#39;par&amp;#39; only at start of word
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par spar apparent spare part&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;X spar apparent spare Xt&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# same as: r&amp;#39;part|parrot|parent&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par(en&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;ro)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par part parrot parent&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;par X X X&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove first two columns where : is delimiter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;:]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;{2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;foo:123:bar:baz&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bar:baz&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;backreferencing in replacement section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# remove consecutive duplicate words separated by space
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a a a 42 f_1 f_1 f_13.14&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;aa a 42 f_1 f_13.14&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# add something around the matched strings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;&amp;lt;0&amp;gt;0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;52 apples and 31 mangoes&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;(520) apples and (310) mangoes&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# swap words that are separated by a comma
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;),(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;good,bad 42,24&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;bad,good 24,42&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# example with both capturing and non-capturing groups
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)(?:abc)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;2abcabc42 12abcd21&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;42:2 12abcd21&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;using functions in replacement section of &lt;code&gt;re.sub&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;factorial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 3 4 5&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fact_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(n):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(n[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;])))
... 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, fact_num, numbers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 6 24 120&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# using lambda
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;factorial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(m[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]))), numbers)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;1 2 6 24 120&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for lookarounds&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change &amp;#39;foo&amp;#39; only if it is not followed by a digit character
# note that end of string satisfies the given assertion
# foofoo has 2 matches as the assertion doesn&amp;#39;t consume characters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey food! foo42 foot5 foofoo&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;hey bazd! foo42 bazt5 bazbaz&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# change whole word only if it is not preceded by : or -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;![:-]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+\b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart &amp;lt;apple -rest ;tea&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;:cart &amp;lt;X -rest ;X&amp;#39;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match digits only if it is preceded by - and followed by ; or :
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;-)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=[:;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fo-5, ba3; x-83, y-20: f12&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;20&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# words containing &amp;#39;b&amp;#39; and &amp;#39;e&amp;#39; and &amp;#39;t&amp;#39; in any order
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sequoia&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exhibit&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;equation&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;words &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;b)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?=.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;e)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, w)]
[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;questionable&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;exhibit&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match if &amp;#39;do&amp;#39; is not there between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;do)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# match if &amp;#39;go&amp;#39; is not there between &amp;#39;at&amp;#39; and &amp;#39;par&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;at((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;?!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;go)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;par&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fox,cat,dog,parrot&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;examples for &lt;code&gt;re.compile&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Regular expressions can be compiled using &lt;code&gt;re.compile&lt;&#x2F;code&gt; function, which gives back a &lt;code&gt;re.Pattern&lt;&#x2F;code&gt; object. The top level &lt;code&gt;re&lt;&#x2F;code&gt; module functions are all available as methods for this object. Compiling a regular expression helps if the RE has to be used in multiple places or called upon multiple times inside a loop (speed benefit). By default, Python maintains a small list of recently used RE, so the speed benefit doesn&#x27;t apply for trivial use cases.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7c8f4c;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pet)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#562d56bf;color:#f8f8f8;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;re.Pattern&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;They bought a dog&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(pet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;A cat crossed their path&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;False

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;\)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a+b(addition) - foo() + c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;(#modulo)&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a+b - foo + c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;pat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there(greeting). Nice day(a(b)&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Hi there. Nice day&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;br&gt;
&lt;h2 id=&quot;python-re-gex-book&quot;&gt;Python re(gex)? book&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-re-gex-book&quot; aria-label=&quot;Anchor link for: python-re-gex-book&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Visit my GitHub repo &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;Python re(gex)?&lt;&#x2F;a&gt; for details about the book I wrote on Python regular expressions. The ebook uses plenty of examples to explain the concepts from the very beginning and step by step introduces more advanced concepts. The book also covers the &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;third party module regex&lt;&#x2F;a&gt;. The cheatsheet and examples presented in this post are based on contents of this book.&lt;&#x2F;p&gt;
&lt;p&gt;Use &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&#x2F;c&#x2F;P7erPYAm1386&quot;&gt;this leanpub link&lt;&#x2F;a&gt; for a discounted price.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;pyregex.png&quot; alt=&quot;Python regex book cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Example driven book on Python regular expressions</title>
		<published>2019-08-09T00:00:00+00:00</published>
		<updated>2021-08-02T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/python-regex-book-version2/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-regex-book-version2/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I recently updated my &lt;strong&gt;Python re(gex)?&lt;&#x2F;strong&gt; ebook.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;pyregex.png&quot; alt=&quot;Python re(gex)? cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Get the ebook using either of these sites:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;py_regex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;py_regex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For web version of the book, visit &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&quot;&gt;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;py_regular_expressions&#x2F;&lt;&#x2F;a&gt;. Code snippets, example files, sample chapters, markdown source, etc are available on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;py_regular_expressions&lt;&#x2F;a&gt;. I&#x27;m generating the PDF&#x2F;EPUB versions using &lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.github.io&#x2F;customizing-pandoc&#x2F;&quot;&gt;pandoc&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This book covers both &lt;code&gt;re&lt;&#x2F;code&gt; module and the third-party &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;regex&#x2F;&quot;&gt;regex&lt;&#x2F;a&gt; module. Examples are used extensively, please follow along by typing them out. Exercises are included to test your understanding and chapters have cheatsheets for easy reference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Why is it needed?&lt;&#x2F;li&gt;
&lt;li&gt;re introduction&lt;&#x2F;li&gt;
&lt;li&gt;Anchors&lt;&#x2F;li&gt;
&lt;li&gt;Alternation and Grouping&lt;&#x2F;li&gt;
&lt;li&gt;Escaping metacharacters&lt;&#x2F;li&gt;
&lt;li&gt;Dot metacharacter and Quantifiers&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Tools for debugging and visualization&lt;&#x2F;li&gt;
&lt;li&gt;Working with matched portions&lt;&#x2F;li&gt;
&lt;li&gt;Character class&lt;&#x2F;li&gt;
&lt;li&gt;Groupings and backreferences&lt;&#x2F;li&gt;
&lt;li&gt;Interlude: Common tasks&lt;&#x2F;li&gt;
&lt;li&gt;Lookarounds&lt;&#x2F;li&gt;
&lt;li&gt;Flags&lt;&#x2F;li&gt;
&lt;li&gt;Unicode&lt;&#x2F;li&gt;
&lt;li&gt;regex module&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hope you find the book useful. I would be grateful for your feedback and suggestions (via email or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;twitter&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GNU GREP and RIPGREP</title>
		<published>2019-05-16T00:00:00+00:00</published>
		<updated>2021-08-02T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/grep-book-announcement/" type="text/html"/>
		<id>https://learnbyexample.github.io/grep-book-announcement/</id>
		<content type="html">&lt;p&gt;Hello!&lt;&#x2F;p&gt;
&lt;p&gt;I recently self-published my third book, this one is about &lt;strong&gt;GNU GREP and RIPGREP&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;books&#x2F;grep.png&quot; alt=&quot;GNU GREP and RIPGREP cover image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Get the e-book using either of these sites:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;learnbyexample.gumroad.com&#x2F;l&#x2F;gnugrep_ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;leanpub.com&#x2F;gnugrep_ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt; Please use a valid e-mail and save the mail you receive, you&#x27;ll get free updates for future versions.&lt;&#x2F;p&gt;
&lt;p&gt;Code snippets, example files, sample chapters, markdown source, etc are available on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;learn_gnugrep_ripgrep&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This book covers features of &lt;code&gt;GNU grep&lt;&#x2F;code&gt; and &lt;code&gt;ripgrep&lt;&#x2F;code&gt; along with discussion on BRE&#x2F;ERE&#x2F;PCRE(2)&#x2F;Rust &lt;strong&gt;regular expressions&lt;&#x2F;strong&gt;. Examples are used extensively, please follow along by typing them out. Exercises are also included to test your understanding.&lt;&#x2F;p&gt;
&lt;p&gt;Some of you might be familiar with my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&quot;&gt;Command Line Text Processing&lt;&#x2F;a&gt; repo. This book is based on the &lt;code&gt;grep&lt;&#x2F;code&gt; chapter - edited to add more descriptions, better examples, exercises, etc. Also, I took the plunge and checked out &lt;code&gt;ripgrep&lt;&#x2F;code&gt; while working on this book. I&#x27;d assumed it would be similar to &lt;code&gt;gnu grep&lt;&#x2F;code&gt; and I just need simple changes to present it in the book. Well, it turned out lot more work and I had to settle for not covering all the options and customizations. In hindsight, would&#x27;ve been better if I did a separate book. Speed wise, &lt;code&gt;ripgrep&lt;&#x2F;code&gt; is very impressive and has plenty of additional nice features. For example: the multiline &lt;code&gt;-U&lt;&#x2F;code&gt; and replace &lt;code&gt;-r&lt;&#x2F;code&gt; options of &lt;code&gt;ripgrep&lt;&#x2F;code&gt; are quite handy - you can use this instead of &lt;code&gt;sed&lt;&#x2F;code&gt; for some cases with added advantage of speed, &lt;code&gt;-F&lt;&#x2F;code&gt; option and better regexp features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preface&lt;&#x2F;li&gt;
&lt;li&gt;Introduction&lt;&#x2F;li&gt;
&lt;li&gt;Frequently used options&lt;&#x2F;li&gt;
&lt;li&gt;BRE&#x2F;ERE Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Context matching&lt;&#x2F;li&gt;
&lt;li&gt;Recursive search&lt;&#x2F;li&gt;
&lt;li&gt;Miscellaneous options&lt;&#x2F;li&gt;
&lt;li&gt;Perl Compatible Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Gotchas and Tricks&lt;&#x2F;li&gt;
&lt;li&gt;ripgrep&lt;&#x2F;li&gt;
&lt;li&gt;Further Reading&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hope you find the book useful. I would be grateful for your feedback and suggestions (via email or &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;learn_byexample&quot;&gt;twitter&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Creating GUI Applications with wxPython - book review</title>
		<published>2019-05-13T00:00:00+00:00</published>
		<updated>2019-05-13T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/python-gui-book-review/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-gui-book-review/</id>
		<content type="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_gui&#x2F;GUI_example.jpg&quot; alt=&quot;GUI example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Photo Credit: &lt;a href=&quot;https:&#x2F;&#x2F;www.pexels.com&#x2F;photo&#x2F;apple-computer-desk-devices-326501&#x2F;&quot;&gt;Tranmautritam&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;www.pexels.com&#x2F;&quot;&gt;Pexels&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;p&gt;I&#x27;ve always wanted to create nice looking, useful GUI applications over the years. And I&#x27;ve given up most of the time as the programming seemed too difficult for me and GUI requires at least some level of design skills. I only managed to grit through one Android app for over a year as it was a dream game from school days and I had loads of free time having quit my job. At the end of it though, I had a spaghetti mess of several 1000+ lines programs and a strong aversion to Java and object oriented programming. Part of the reason is that I didn&#x27;t try to learn in a formal way, just started from a tutorial closest to the game I wanted to do.&lt;&#x2F;p&gt;
&lt;p&gt;Several years later, here I am, trying my hand with GUI again. I have several small to medium scale apps in mind to implement and hopefully I&#x27;ll avoid previous mistakes, especially feature creep. When I saw &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;driscollis&#x2F;status&#x2F;1109106540160733184&quot;&gt;this tweet from Mike Driscoll&lt;&#x2F;a&gt;, I took up the offer. I got a free book in exchange for reviewing &lt;a href=&quot;https:&#x2F;&#x2F;www.blog.pythonlibrary.org&#x2F;2019&#x2F;05&#x2F;08&#x2F;creating-gui-applications-with-wxpython-now-available&#x2F;&quot;&gt;Creating GUI Applications with wxPython&lt;&#x2F;a&gt;. The book is currently on sale till May 15. Having to review has served as an extra incentive to read the book regularly, and so far I&#x27;m quite satisfied to have done so.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_gui&#x2F;wxPython_book_cover.png&quot; alt=&quot;book cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I hadn&#x27;t heard of &lt;a href=&quot;https:&#x2F;&#x2F;wxpython.org&quot;&gt;wxPython&lt;&#x2F;a&gt; before this book. When it comes to GUI in Python, I knew about &lt;code&gt;tkinter&lt;&#x2F;code&gt; which comes by default with standard libary, &lt;a href=&quot;https:&#x2F;&#x2F;kivy.org&quot;&gt;Kivy&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.pygame.org&quot;&gt;Pygame&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;PyQt5&#x2F;&quot;&gt;PyQt5&lt;&#x2F;a&gt;. This book starts with an introduction to &lt;code&gt;wxPython&lt;&#x2F;code&gt; and then dives into project-based approach. I&#x27;ve finished half the chapters so far, covering four project concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Image viewer&lt;&#x2F;li&gt;
&lt;li&gt;Database viewer and editor&lt;&#x2F;li&gt;
&lt;li&gt;Calculator&lt;&#x2F;li&gt;
&lt;li&gt;Archiver&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_gui&#x2F;calculator.png&quot; alt=&quot;calculator&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rest of the chapters cover these topics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MP3 tag editor&lt;&#x2F;li&gt;
&lt;li&gt;Image application using NASA&#x27;s API&lt;&#x2F;li&gt;
&lt;li&gt;PDF merger&#x2F;splitter&lt;&#x2F;li&gt;
&lt;li&gt;File search&lt;&#x2F;li&gt;
&lt;li&gt;FTP application&lt;&#x2F;li&gt;
&lt;li&gt;XML editor&lt;&#x2F;li&gt;
&lt;li&gt;Distributing your application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also a couple of appendix chapters.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned in book&#x27;s introduction, you definitely need to be comfortable with Python classes before you start this book. The code used in the book is also available from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;driscollis&#x2F;applications_with_wxpython&quot;&gt;GitHub repo&lt;&#x2F;a&gt;, but I highly recommend to type them manually.&lt;&#x2F;p&gt;
&lt;p&gt;The project nature also means that after chapter 3, you could probably skip chapters you are not interested in. For example, I didn&#x27;t pay too much attention to database chapters as I don&#x27;t have much experience with databases. Each project is described and shown step by step. The projects could be run at different stages as well - playing around with the GUI at those points helps in mapping code-to-output, as well as to experiment different settings.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, I would highly recommend this book for those wanting to start coding GUI applications in Python. And please do contact the author to let him know your feedback or if you have any clarifications. Happy learning :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python for maths</title>
		<published>2019-03-22T00:00:00+00:00</published>
		<updated>2019-03-22T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/python-for-maths/" type="text/html"/>
		<id>https://learnbyexample.github.io/python-for-maths/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;python_for_maths&#x2F;gravitational_plot.png&quot; alt=&quot;sample plot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The above image was generated using &lt;code&gt;matplotlib&lt;&#x2F;code&gt; courtesy code provided by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;doingmathwithpython&#x2F;code&#x2F;blob&#x2F;master&#x2F;chapter2&#x2F;Chapter2.ipynb&quot;&gt;Doing Math with Python&lt;&#x2F;a&gt; book.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Last month, I had an opportunity to conduct beginner Python workshop for maths department students in an arts and science college. It was a great experience and I had my first taste of how Python could be applied for mathematical problems. Presented here are bunch of useful links that I gathered as resources for the students. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;documentation-links&quot;&gt;Documentation links&lt;a class=&quot;zola-anchor&quot; href=&quot;#documentation-links&quot; aria-label=&quot;Anchor link for: documentation-links&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;&quot;&gt;docs.python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.scipy.org&#x2F;doc&#x2F;&quot;&gt;numpy and scipy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;api&#x2F;index.html&quot;&gt;matplotlib&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;books-and-courses&quot;&gt;Books and courses&lt;a class=&quot;zola-anchor&quot; href=&quot;#books-and-courses&quot; aria-label=&quot;Anchor link for: books-and-courses&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doingmathwithpython.github.io&#x2F;&quot;&gt;Doing Math with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;maths-with-python.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;Maths with Python&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;media.readthedocs.org&#x2F;pdf&#x2F;maths-with-python&#x2F;latest&#x2F;maths-with-python.pdf&quot;&gt;pdf version&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;drvinceknight&#x2F;Python-Mathematics-Handbook&quot;&gt;Doing mathematics with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jrjohansson&#x2F;scientific-python-lectures&quot;&gt;Lectures on scientific computing with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;greenteapress.com&#x2F;thinkdsp&#x2F;html&#x2F;index.html&quot;&gt;Digital Signal Processing in Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;audio-signal-processing&quot;&gt;Audio Signal Processing for Music Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;what-is-a-proof&quot;&gt;Mathematical Thinking in Computer Science&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;python-for-beginners&quot;&gt;Python for beginners&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-for-beginners&quot; aria-label=&quot;Anchor link for: python-for-beginners&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;automatetheboringstuff.com&#x2F;&quot;&gt;automatetheboringstuff&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;greenteapress.com&#x2F;wp&#x2F;think-python-2e&#x2F;&quot;&gt;Think Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;interactivepython.org&#x2F;courselib&#x2F;static&#x2F;thinkcspy&#x2F;index.html&quot;&gt;How to Think Like a Computer Scientist: Interactive Edition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gto76.github.io&#x2F;python-cheatsheet&#x2F;&quot;&gt;Comprehensive Python Cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;101268&#x2F;hidden-features-of-python&quot;&gt;Python tips and features on Stackoverflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;509211&#x2F;explain-pythons-slice-notation&quot;&gt;slice notations and assignments&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;treyhunner.com&#x2F;2015&#x2F;12&#x2F;python-list-comprehensions-now-in-color&#x2F;&quot;&gt;list comprehensions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.pythontutor.com&#x2F;visualize.html#mode=edit&quot;&gt;Visualize code execution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ryanstutorials.net&#x2F;problem-solving-skills&#x2F;&quot;&gt;Problem solving skills&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;numpy-scipy-matplotlib&quot;&gt;numpy, scipy, matplotlib&lt;a class=&quot;zola-anchor&quot; href=&quot;#numpy-scipy-matplotlib&quot; aria-label=&quot;Anchor link for: numpy-scipy-matplotlib&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.labri.fr&#x2F;perso&#x2F;nrougier&#x2F;from-python-to-numpy&#x2F;&quot;&gt;From Python to Numpy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nbviewer.jupyter.org&#x2F;github&#x2F;vlad17&#x2F;np-learn&#x2F;blob&#x2F;master&#x2F;presentation.ipynb&quot;&gt;Advanced Numpy Techniques&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;donnemartin&#x2F;data-science-ipython-notebooks&quot;&gt;List of data science Python notebooks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scipy-lectures.org&#x2F;&quot;&gt;Scipy Lecture Notes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;python-matplotlib-guide&#x2F;&quot;&gt;matplotlib guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pbpython.com&#x2F;effective-matplotlib.html&quot;&gt;effective matplotlib&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.machinelearningplus.com&#x2F;plots&#x2F;top-50-matplotlib-visualizations-the-master-plots-python&#x2F;&quot;&gt;top 50 matplotlib visualizations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;juliangaal&#x2F;python-cheat-sheet&#x2F;tree&#x2F;master&#x2F;Matplotlib&quot;&gt;matplotlib cheat sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ipgp.github.io&#x2F;scientific_python_cheat_sheet&#x2F;&quot;&gt;Scientific Python Cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;animatplot.readthedocs.io&#x2F;en&#x2F;stable&#x2F;tutorial&#x2F;getting_started..html&quot;&gt;animatplot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alimanfoo.github.io&#x2F;2017&#x2F;01&#x2F;23&#x2F;go-faster-python.html&quot;&gt;benchmarking, profiling and optimising Python code&lt;&#x2F;a&gt; - includes discussion on numpy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;br&gt;
&lt;h1 id=&quot;more-resources&quot;&gt;More resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-resources&quot; aria-label=&quot;Anchor link for: more-resources&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathoverflow.net&#x2F;questions&#x2F;308797&#x2F;what-programming-language-should-a-professional-mathematician-know&quot;&gt;What programming language should a professional mathematician know?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;BeginnersGuide&#x2F;Mathematics&quot;&gt;Python Beginners Guide for Mathematics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jupyter&#x2F;jupyter&#x2F;wiki&#x2F;A-gallery-of-interesting-Jupyter-Notebooks#mathematics&quot;&gt;Interesting Jupyter Notebooks on mathematics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;curated_resources&#x2F;blob&#x2F;master&#x2F;Education.md#maths&quot;&gt;Maths curated resource links&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sagemath.org&#x2F;&quot;&gt;Sagemath&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;octave&#x2F;&quot;&gt;GNU Octave&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A short and satisfying bug hunt</title>
		<published>2019-03-06T00:00:00+00:00</published>
		<updated>2019-03-06T00:00:00+00:00</updated>
		<link href="https://learnbyexample.github.io/a-short-and-satisfying-bug-hunt/" type="text/html"/>
		<id>https://learnbyexample.github.io/a-short-and-satisfying-bug-hunt/</id>
		<content type="html">&lt;h2 id=&quot;the-surprise&quot;&gt;The surprise&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-surprise&quot; aria-label=&quot;Anchor link for: the-surprise&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So, a pleasant surprise awaited me last Sunday. As is my usual habit, I opened my
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&quot;&gt;github&lt;&#x2F;a&gt; account after breakfast to see if I&#x27;ve
got any sudden spurt in traffic. And as usual, things were normal. Except for the blue
notification, which was rare. I hoped it wasn&#x27;t a silly pull request and thankfully
it was a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&#x2F;issues&#x2F;24&quot;&gt;new issue&lt;&#x2F;a&gt;
that was opened.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I gave the issue a cursory glance and wrongly guessed it was probably some line ending issue
(user was on Windows OS). As someone who has seen plenty of
bugs in previous job, I wasn&#x27;t ruling out anything though. I first cloned the repo so as to try
to recreate the working environment without possible interference from my local working copy.
As the user had provided detailed information while opening the issue, I was able to quickly
replicate it. Sure enough, I was seeing the same problem. I only wondered why it wasn&#x27;t
brought to my attention before. Either past users chose not to or things weren&#x27;t interesting
enough to reach that far in the exercises.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-minimal-failing-case&quot;&gt;Creating minimal failing case&lt;a class=&quot;zola-anchor&quot; href=&quot;#creating-minimal-failing-case&quot; aria-label=&quot;Anchor link for: creating-minimal-failing-case&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As I had written the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;learnbyexample&#x2F;Command-line-text-processing&#x2F;blob&#x2F;master&#x2F;exercises&#x2F;GNU_grep&#x2F;solve&quot;&gt;solution checker script&lt;&#x2F;a&gt;
about 2 years back, the script looked alien.
Right from cloning the repo, I had to fight the urge to improve things. By the time I spotted
the issue, all such fantasies were thrown out. Replaced by a todo note to &lt;em&gt;someday&lt;&#x2F;em&gt; write automated
testing script to check that my script is indeed working properly for all the exercises.&lt;&#x2F;p&gt;
&lt;p&gt;To put it simply, the role of &lt;code&gt;solve&lt;&#x2F;code&gt; script is to check if the previous command
executed by the user solves the current exercise question. To do so, the script
gets the previous command from history and compares the output of that command
and a reference solution present in the exercise directory. Sounds simple right?
Yeah, I thought so too. I do remember testing few cases before I first published it
and no one had submitted an issue so far. So, why was it failing now?&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned before, I thought it could be some weird line ending issue. But that was
effectively ruled out as it was failing for me as well on Linux. Still, I did check
for funny characters with &lt;code&gt;cat -A&lt;&#x2F;code&gt;. Nope, no issues there.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;^[^=]*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; sample.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a[2]
foo_bar
appx_pi
greeting
food[4]
b[0][1]
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; source ..&#x2F;solve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt; -s
---------------------------------------------
Mismatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; for question 1:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Expected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; output is:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a[2]
foo_bar
appx_pi
greeting
food[4]
b[0][1]
---------------------------------------------
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Expected output was same as output for submitted solution. So, why is the script failing?
I remember passing the script through &lt;a href=&quot;https:&#x2F;&#x2F;www.shellcheck.net&#x2F;&quot;&gt;shellcheck&lt;&#x2F;a&gt; but still
checked it again. No progress. So, then I started by trying to debug the most likely
culprit from terminal before trying to debug the whole script. Luckily, that turned out well.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; cat sample.txt 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;sample string&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;foo_bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;4232
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;appx_pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;3.14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Hi  there		have a nice   day&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;food[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;dosa&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;42

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# say what??
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[ $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep -o &amp;#39;^[^=]*&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) == \
&amp;gt;    $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep -o &amp;#39;^[^=]*&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Not fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Not&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fine

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# after some attempts, I tried a command that won&amp;#39;t have
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# any [] characters in the output
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;# Eureka!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; [[ $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep &amp;#39;bar&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) == \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;command grep &amp;#39;bar&amp;#39; sample.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;) ]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Not fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[ foo == foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fine
$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a[5]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; == a[5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; ]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;Not fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;Not&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; fine
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a[5]&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;a[5]&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1f1f1f;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;fine&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fine
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Having a minimal failing case from terminal was a relief. I tried &lt;code&gt;set -x&lt;&#x2F;code&gt; but
that didn&#x27;t light a bulb either. Finally, somehow I thought perhaps characters
in the output was causing the issue and when &lt;code&gt;[]&lt;&#x2F;code&gt; characters were not present,
the comparison worked as expected.&lt;&#x2F;p&gt;
&lt;p&gt;I did think quoting could be the issue, but dismissed it at first as both sides
of comparison had the same command. Then my recent experience from reviewing
&lt;a href=&quot;https:&#x2F;&#x2F;www.packtpub.com&#x2F;application-development&#x2F;command-line-fundamentals&quot;&gt;Command Line Fundamentals&lt;&#x2F;a&gt;
book came in handy. I remembered that if quotes aren&#x27;t used on RHS of comparison
operator, it is treated as &lt;code&gt;glob&lt;&#x2F;code&gt; matching instead of string matching. Phew.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;a class=&quot;zola-anchor&quot; href=&quot;#tl-dr&quot; aria-label=&quot;Anchor link for: tl-dr&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Always &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;131766&#x2F;why-does-my-shell-script-choke-on-whitespace-or-other-special-characters&quot;&gt;quote strings in bash&lt;&#x2F;a&gt;
unless you have a very good reason for not using them.&lt;&#x2F;p&gt;
&lt;p&gt;After adding double quotes around the command substitution commands, the script
worked as expected. I thanked the user for opening the issue. And then informed
the author for cli fundamentals book as well.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
